#!/usr/bin/perl -w

=head1 NAME

dh_obfuscate - obfuscate source code in scripted languages

=cut

use strict;
use File::Find;
use File::Copy;
use File::MimeInfo::Magic;
use Debian::Debhelper::Dh_Lib;
use PAR::Filter;

=head1 SYNOPSIS

B<dh_obfuscate> [S<I<debhelper options>>]

=head1 DESCRIPTION

B<dh_obfuscate> is a debhelper program to obfuscate source code in scripted languages
like Perl or Python.


=head1 FILES

=over 4

=item debian/I<package>.perl_bleach

List of files or directories to be bleached by L<PAR::Filter(3)>.
Shebangs are preserved.


=item debian/I<package>.perl_bytecode

List of files or directories to be compiled into bytecode by L<perlcc(1)>.

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command. Otherwise, it may cause files
to be processed multiple times with unpredictable result.

=cut

init(options => {});

# Files that are processed already
# (e. g., to catch dublicates in debian/<pkg>.*)
my %touched_files = ();

my @methods = qw/ perl_bleach perl_bytecode python_bytecode /;

sub perl_bleach {
    my ($src) = @_;
    my $mimetype = mimetype($src);
    if ($mimetype =~ /perl/) {
        if (exists($touched_files{$src})) {
            warning("perl_bleach: $src was already processed by `$touched_files{$src}'. Skipping.");
            return
        }
        $touched_files{$src} = 'perl_bleach';
        print "Bleaching $src ... \n";

        open(FD, "<$src") or die "Can't open `$src' to get shebang: $!";
        my $shebang = <FD>;
        close(FD);

        my $ref = PAR::Filter->new('PodStrip', 'Bleach')->apply($src);

        open(FD, ">$src") or die "Can't open `$src' to rewrite: $!";
        print FD $shebang if $shebang =~ /^#!/;
        print FD $$ref;
        close FD;
    } else {
        warning("perl_bleach: skipping `$src' ($mimetype)");
    }
}

sub perl_bytecode {
    my ($src) = @_;
    my $mimetype = mimetype($src);
    if ($mimetype =~ /perl/) {
        if (exists($touched_files{$src})) {
            warning("perl_bytecode: $src was already processed by `$touched_files{$src}'. Skipping.");
            return
        }
        $touched_files{$src} = 'perl_bytecode';
        print "Compiling to bytecode $src ... \n";

        my $dst = "$src.out";
        my @perlcc = ('perlcc', '-W', '-T', '-B', '-o', $dst, $src);
        system(@perlcc) == 0
            or die "system @perlcc failed: $?";
        move($dst, $src)
            or die "move($dst, $src): $?";
    } else {
        warning("perl_bytecode: skipping `$src' ($mimetype)");
    }
}

foreach my $package (@{$dh{DOPACKAGES}}) {
    no strict "refs"; # to call function by variable in find()
    my $tmp = tmpdir($package);

    for my $method (@methods) {
        my $list = pkgfile($package, $method);
        next if not $list;

        my @files = filearray($list, $tmp);
        foreach my $f (@files) {
            my $path = "$tmp/$f";
            if ( -d $path ) {
                find( {
                        wanted => sub { -f $_ && &$method($_) },
                        no_chdir => 1,
                    }, $path)
            } elsif (-f $path) {
                &$method($path)
            } elsif (-e $path) {
                warning("Ignoring `$path': not a file or a directory");
            } else {
                die "$path: $!"
            }
        }
    }

}



=head1 SEE ALSO

L<debhelper(7)>, L<perlcc(1)>, L<PAR::Filter(3)>.

This program is a Nexenta addition to debhelper.

=head1 AUTHOR

Igor Pashev <igor.pashev@nexenta.com>

=cut
