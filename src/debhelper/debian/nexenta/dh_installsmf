#!/usr/bin/perl -w

=head1 NAME

dh_installsmf - generate SMF manifest registration scripts

=cut

use strict;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_installsmf> [S<I<debhelper options>>] [B<-p<package>>]

=head1 DESCRIPTION

dh_installsmf is a debhelper program that is responsible for preparing
packages to be SMF aware.

It sets up lib/svc/method/<service> symbolic link to point on provided
SYSV-RC etc/init.d/<service> daemon and installs a manifest in
var/svc/manifest.

If a file named debian/package.xml exists, then it will put it into
the right location under var/svc/manifest by parsing its service name
and service group.

The svccfg provided by the sunwcsu package. An appropriate dependency will
be generated in ${misc:Depends}.

=head1 OPTIONS

=over 4

=item B<--service> I<service>

Use I<service> to specify a service name.

=item B<--manifest> I<manifest>

Use I<manifest> to specify a service's manifest file name.

=cut

sub is_link {
    my ($fn, $svc) = @_;
    if (! -l $fn) {
	print STDERR "warning: $fn is not a symbolic link\n";
	return 0;
    } else {
	my $linkdst = readlink ($fn);
	if (! defined $linkdst) {
	    die ("error reading symbolic link: $!\n");
	}
	if (($linkdst ne "../init.d/$svc") && ($linkdst ne "../init.d/$svc")) {
	    print STDERR "warning: $fn is not a link to ../init.d/$svc\n";
	    return 0;
	}
    }
    return 1;
}

sub removelinks {
	my $svc = shift;
	my $pkgdir = shift;
	my $etcd = "$pkgdir/etc/rc";
	my $oldpwd = $ENV{PWD};

	my ($i, $fn, $islnk);
	my $found = 0;
	foreach $i (0..9, 'S') {
		next unless (chdir ("$etcd$i.d"));
		opendir(DIR, ".");
		foreach $_ (readdir(DIR)) {
			next unless (/^[SK]\d\d$svc$/);
			$fn = "$etcd$i.d/$_";
			$found = 1;
			$islnk = &is_link ($fn, $svc);
			if (! $islnk) {
				print "   $fn is not a link to ../init.d/$svc; not removing\n"; 
				next;
			}
			unlink ("$etcd$i.d/$_") ||
				die "Can't unlink: $!\n";
		}
		closedir(DIR);
	}

	chdir $oldpwd;

	$found;
}

init();

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	my $service=$package;
	if (defined $dh{SERVICE}) {
		$service=$dh{SERVICE};
	}

	my $manifest="debian/$package.xml";
	if (defined $dh{MANIFEST}) {
		$manifest=$dh{MANIFEST};
	}
	die "Can't find 'manifest-file' $manifest\n" if (!-f $manifest);

	open(FD, "cat $manifest|");
	my ($found, $name, $group) = (0, "", "");
	while (<FD>) {
		if (!$found && /<\s*service/) {
			$found = 1;
			next if (! /<\s*service\s+.*name\s*=\s*['"]?(\S+)['"]?/);
			($group, $name) = ($1, $2) if (/['"]?([\w\/]+)\/(\w+)['"]?/);
			last;
		}
		if ($found) {
			next if (/^\s*$/);
			next if (! /\s*name\s*=\s*(['"]?\S+['"]?)/);
			($group, $name) = ($1, $2) if (/['"]?([\w\/]+)\/(\w+)['"]?/);
			last;
		}
	}
	close FD;
	die "Couldn't parse manifest file" if ($name eq "" || $group eq "");

	if (defined $dh{NAME}) {
		$name=$dh{NAME};
	}
	print STDERR "Warning wrong manifest file ($service != $name)\n" if ($service ne $name);

	doit("mkdir","-p","$tmp/var/svc/manifest/$group") if (!-d "$tmp/var/svc/manifest/$group");
	doit("install","-p","-m644",$manifest,"$tmp/var/svc/manifest/$group");

	die "Can't find $tmp/etc/init.d/$name" if (!-f "$tmp/etc/init.d/$name");

	doit("mkdir","-p","$tmp/lib/svc/method") if (!-d "$tmp/lib/svc/method");
	open(FD, ">$tmp/lib/svc/method/$name");
	print FD <<EOF;
#!/bin/sh
#
# Generated by dh_installsmf
#
# sysv-rc to smf execution layer

. /lib/svc/share/smf_include.sh

ACTION="\$1"
test "x\$ACTION" = x && exit \$SMF_EXIT_ERR_CONFIG
test "x\$ACTION" = xrefresh && ACTION="reload"
if test "x\$ACTION" = xmanifest; then
	echo "/var/svc/manifest/$group/$service.xml"
	exit \$SMF_EXIT_OK;
fi

unset SUN_PERSONALITY
/etc/init.d/$name \$ACTION
RC=\$?

test \$RC == 0 && exit \$SMF_EXIT_OK
exit \$SMF_EXIT_ERR_FATAL
EOF
	close FD;
	doit("chmod","755","$tmp/lib/svc/method/$name");

	removelinks($name, $tmp);
	addsubstvar($package, "misc:Depends", "sunwcsu");
}

=back

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Erast Benson <erast@gnusolaris.org>

=cut
