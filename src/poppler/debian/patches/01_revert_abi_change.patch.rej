--- debian/patches/01_revert_abi_change.patch
+++ debian/patches/01_revert_abi_change.patch
@@ -1 +1,760 @@
-tail: cannot open `.pc/applied-patches' for reading: No such file or directory
+Reverts upstream commit cb19a40f1507a87a53b60134d09b42fad686f692
+which incorrectly changed the ABI without bumping SONAME.
+Debian #558463
+fd.o #25344, #25363
+
+Index: poppler-0.12.2/poppler/Gfx.cc
+===================================================================
+--- poppler-0.12.2.orig/poppler/Gfx.cc	2009-11-30 16:46:14.194609585 +0100
++++ poppler-0.12.2/poppler/Gfx.cc	2009-11-30 16:46:35.306603769 +0100
+@@ -440,7 +440,7 @@ void GfxResources::lookupColorSpace(char
+   obj->initNull();
+ }
+ 
+-GfxPattern *GfxResources::lookupPattern(char *name, Gfx *gfx) {
++GfxPattern *GfxResources::lookupPattern(char *name) {
+   GfxResources *resPtr;
+   GfxPattern *pattern;
+   Object obj;
+@@ -448,7 +448,7 @@ GfxPattern *GfxResources::lookupPattern(
+   for (resPtr = this; resPtr; resPtr = resPtr->next) {
+     if (resPtr->patternDict.isDict()) {
+       if (!resPtr->patternDict.dictLookup(name, &obj)->isNull()) {
+-	pattern = GfxPattern::parse(&obj, gfx);
++	pattern = GfxPattern::parse(&obj);
+ 	obj.free();
+ 	return pattern;
+       }
+@@ -459,7 +459,7 @@ GfxPattern *GfxResources::lookupPattern(
+   return NULL;
+ }
+ 
+-GfxShading *GfxResources::lookupShading(char *name, Gfx *gfx) {
++GfxShading *GfxResources::lookupShading(char *name) {
+   GfxResources *resPtr;
+   GfxShading *shading;
+   Object obj;
+@@ -467,7 +467,7 @@ GfxShading *GfxResources::lookupShading(
+   for (resPtr = this; resPtr; resPtr = resPtr->next) {
+     if (resPtr->shadingDict.isDict()) {
+       if (!resPtr->shadingDict.dictLookup(name, &obj)->isNull()) {
+-	shading = GfxShading::parse(&obj, gfx);
++	shading = GfxShading::parse(&obj);
+ 	obj.free();
+ 	return shading;
+       }
+@@ -501,11 +501,7 @@ Gfx::Gfx(XRef *xrefA, OutputDev *outA, i
+ 	 double hDPI, double vDPI, PDFRectangle *box,
+ 	 PDFRectangle *cropBox, int rotate,
+ 	 GBool (*abortCheckCbkA)(void *data),
+-	 void *abortCheckCbkDataA)
+-#ifdef USE_CMS
+- : iccColorSpaceCache(5)
+-#endif
+-{
++	 void *abortCheckCbkDataA) {
+   int i;
+ 
+   xref = xrefA;
+@@ -553,11 +549,7 @@ Gfx::Gfx(XRef *xrefA, OutputDev *outA, i
+ Gfx::Gfx(XRef *xrefA, OutputDev *outA, Dict *resDict, Catalog *catalogA,
+ 	 PDFRectangle *box, PDFRectangle *cropBox,
+ 	 GBool (*abortCheckCbkA)(void *data),
+-	 void *abortCheckCbkDataA)
+- #ifdef USE_CMS
+- : iccColorSpaceCache(5)
+-#endif
+-{
++	 void *abortCheckCbkDataA) {
+   int i;
+ 
+   xref = xrefA;
+@@ -1065,7 +1057,7 @@ void Gfx::opSetExtGState(Object args[], 
+ 	  blendingColorSpace = NULL;
+ 	  isolated = knockout = gFalse;
+ 	  if (!obj4.dictLookup("CS", &obj5)->isNull()) {
+-	    blendingColorSpace = GfxColorSpace::parse(&obj5, this);
++	    blendingColorSpace = GfxColorSpace::parse(&obj5);
+ 	  }
+ 	  obj5.free();
+ 	  if (obj4.dictLookup("I", &obj5)->isBool()) {
+@@ -1372,9 +1364,9 @@ void Gfx::opSetFillColorSpace(Object arg
+   state->setFillPattern(NULL);
+   res->lookupColorSpace(args[0].getName(), &obj);
+   if (obj.isNull()) {
+-    colorSpace = GfxColorSpace::parse(&args[0], this);
++    colorSpace = GfxColorSpace::parse(&args[0]);
+   } else {
+-    colorSpace = GfxColorSpace::parse(&obj, this);
++    colorSpace = GfxColorSpace::parse(&obj);
+   }
+   obj.free();
+   if (colorSpace) {
+@@ -1414,9 +1406,9 @@ void Gfx::opSetStrokeColorSpace(Object a
+   state->setStrokePattern(NULL);
+   res->lookupColorSpace(args[0].getName(), &obj);
+   if (obj.isNull()) {
+-    colorSpace = GfxColorSpace::parse(&args[0], this);
++    colorSpace = GfxColorSpace::parse(&args[0]);
+   } else {
+-    colorSpace = GfxColorSpace::parse(&obj, this);
++    colorSpace = GfxColorSpace::parse(&obj);
+   }
+   obj.free();
+   if (colorSpace) {
+@@ -1484,7 +1476,7 @@ void Gfx::opSetFillColorN(Object args[],
+       out->updateFillColor(state);
+     }
+     if (args[numArgs-1].isName() &&
+-	(pattern = res->lookupPattern(args[numArgs-1].getName(), this))) {
++	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
+       state->setFillPattern(pattern);
+     }
+ 
+@@ -1527,7 +1519,7 @@ void Gfx::opSetStrokeColorN(Object args[
+       out->updateStrokeColor(state);
+     }
+     if (args[numArgs-1].isName() &&
+-	(pattern = res->lookupPattern(args[numArgs-1].getName(), this))) {
++	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
+       state->setStrokePattern(pattern);
+     }
+ 
+@@ -2157,7 +2149,7 @@ void Gfx::opShFill(Object args[], int nu
+   GfxPath *savedPath;
+   double xMin, yMin, xMax, yMax;
+ 
+-  if (!(shading = res->lookupShading(args[0].getName(), this))) {
++  if (!(shading = res->lookupShading(args[0].getName()))) {
+     return;
+   }
+ 
+@@ -3911,7 +3903,7 @@ void Gfx::doImage(Object *ref, Stream *s
+       }
+     }
+     if (!obj1.isNull()) {
+-      colorSpace = GfxColorSpace::parse(&obj1, this);
++      colorSpace = GfxColorSpace::parse(&obj1);
+     } else if (csMode == streamCSDeviceGray) {
+       colorSpace = new GfxDeviceGrayColorSpace();
+     } else if (csMode == streamCSDeviceRGB) {
+@@ -4006,7 +3998,7 @@ void Gfx::doImage(Object *ref, Stream *s
+ 	  obj2.free();
+ 	}
+       }
+-      maskColorSpace = GfxColorSpace::parse(&obj1, this);
++      maskColorSpace = GfxColorSpace::parse(&obj1);
+       obj1.free();
+       if (!maskColorSpace || maskColorSpace->getMode() != csDeviceGray) {
+ 	goto err1;
+@@ -4207,7 +4199,7 @@ void Gfx::doForm(Object *str) {
+     if (obj1.dictLookup("S", &obj2)->isName("Transparency")) {
+       transpGroup = gTrue;
+       if (!obj1.dictLookup("CS", &obj3)->isNull()) {
+-	blendingColorSpace = GfxColorSpace::parse(&obj3, this);
++	blendingColorSpace = GfxColorSpace::parse(&obj3);
+       }
+       obj3.free();
+       if (obj1.dictLookup("I", &obj3)->isBool()) {
+@@ -4735,10 +4727,3 @@ void Gfx::popResources() {
+   delete res;
+   res = resPtr;
+ }
+-
+-#ifdef USE_CMS
+-PopplerCache *Gfx::getIccColorSpaceCache()
+-{
+-  return &iccColorSpaceCache;
+-}
+-#endif
+Index: poppler-0.12.2/poppler/Gfx.h
+===================================================================
+--- poppler-0.12.2.orig/poppler/Gfx.h	2009-11-30 16:46:14.238607640 +0100
++++ poppler-0.12.2/poppler/Gfx.h	2009-11-30 16:46:36.994603842 +0100
+@@ -36,7 +36,6 @@
+ #include "goo/GooList.h"
+ #include "GfxState.h"
+ #include "Object.h"
+-#include "PopplerCache.h"
+ 
+ class GooString;
+ class XRef;
+@@ -110,8 +109,8 @@ public:
+   GBool lookupXObjectNF(char *name, Object *obj);
+   GBool lookupMarkedContentNF(char *name, Object *obj);
+   void lookupColorSpace(char *name, Object *obj);
+-  GfxPattern *lookupPattern(char *name, Gfx *gfx);
+-  GfxShading *lookupShading(char *name, Gfx *gfx);
++  GfxPattern *lookupPattern(char *name);
++  GfxShading *lookupShading(char *name);
+   GBool lookupGState(char *name, Object *obj);
+ 
+   GfxResources *getNext() { return next; }
+@@ -169,10 +168,6 @@ public:
+ 
+   void pushResources(Dict *resDict);
+   void popResources();
+-  
+-#ifdef USE_CMS
+-  PopplerCache *getIccColorSpaceCache();
+-#endif
+ 
+ private:
+ 
+@@ -201,10 +196,6 @@ private:
+   MarkedContentStack *mcStack;	// current BMC/EMC stack
+ 
+   Parser *parser;		// parser for page content stream(s)
+- 
+-#ifdef USE_CMS
+-  PopplerCache iccColorSpaceCache;
+-#endif
+ 
+   GBool				// callback to check for an abort
+     (*abortCheckCbk)(void *data);
+Index: poppler-0.12.2/poppler/GfxState.cc
+===================================================================
+--- poppler-0.12.2.orig/poppler/GfxState.cc	2009-11-30 16:46:21.506610199 +0100
++++ poppler-0.12.2/poppler/GfxState.cc	2009-11-30 16:46:37.490603196 +0100
+@@ -40,7 +40,6 @@
+ #include "Object.h"
+ #include "Array.h"
+ #include "Page.h"
+-#include "Gfx.h"
+ #include "GfxState.h"
+ #include "GfxState_helpers.h"
+ #include "GfxFont.h"
+@@ -193,7 +192,7 @@ GfxColorSpace::GfxColorSpace() {
+ GfxColorSpace::~GfxColorSpace() {
+ }
+ 
+-GfxColorSpace *GfxColorSpace::parse(Object *csObj, Gfx *gfx) {
++GfxColorSpace *GfxColorSpace::parse(Object *csObj) {
+   GfxColorSpace *cs;
+   Object obj1;
+ 
+@@ -225,15 +224,15 @@ GfxColorSpace *GfxColorSpace::parse(Obje
+     } else if (obj1.isName("Lab")) {
+       cs = GfxLabColorSpace::parse(csObj->getArray());
+     } else if (obj1.isName("ICCBased")) {
+-      cs = GfxICCBasedColorSpace::parse(csObj->getArray(), gfx);
++      cs = GfxICCBasedColorSpace::parse(csObj->getArray());
+     } else if (obj1.isName("Indexed") || obj1.isName("I")) {
+-      cs = GfxIndexedColorSpace::parse(csObj->getArray(), gfx);
++      cs = GfxIndexedColorSpace::parse(csObj->getArray());
+     } else if (obj1.isName("Separation")) {
+-      cs = GfxSeparationColorSpace::parse(csObj->getArray(), gfx);
++      cs = GfxSeparationColorSpace::parse(csObj->getArray());
+     } else if (obj1.isName("DeviceN")) {
+-      cs = GfxDeviceNColorSpace::parse(csObj->getArray(), gfx);
++      cs = GfxDeviceNColorSpace::parse(csObj->getArray());
+     } else if (obj1.isName("Pattern")) {
+-      cs = GfxPatternColorSpace::parse(csObj->getArray(), gfx);
++      cs = GfxPatternColorSpace::parse(csObj->getArray());
+     } else {
+       error(-1, "Bad color space");
+     }
+@@ -1393,7 +1392,7 @@ GfxColorSpace *GfxICCBasedColorSpace::co
+   return cs;
+ }
+ 
+-GfxColorSpace *GfxICCBasedColorSpace::parse(Array *arr, Gfx *gfx) {
++GfxColorSpace *GfxICCBasedColorSpace::parse(Array *arr) {
+   GfxICCBasedColorSpace *cs;
+   Ref iccProfileStreamA;
+   int nCompsA;
+@@ -1412,9 +1411,9 @@ GfxColorSpace *GfxICCBasedColorSpace::pa
+   obj1.free();
+ #ifdef USE_CMS
+   // check cache
+-  if (gfx && iccProfileStreamA.num > 0) {
++  if (iccProfileStreamA.num > 0) {
+     GfxICCBasedColorSpaceKey k(iccProfileStreamA.num, iccProfileStreamA.gen);
+-    GfxICCBasedColorSpaceItem *item = static_cast<GfxICCBasedColorSpaceItem *>(gfx->getIccColorSpaceCache()->lookup(k));
++    GfxICCBasedColorSpaceItem *item = static_cast<GfxICCBasedColorSpaceItem *>(cache->lookup(k));
+     if (item != NULL)
+     {
+       cs = static_cast<GfxICCBasedColorSpace*>(item->cs->copy());
+@@ -1443,7 +1442,7 @@ GfxColorSpace *GfxICCBasedColorSpace::pa
+     nCompsA = gfxColorMaxComps;
+   }
+   if (dict->lookup("Alternate", &obj2)->isNull() ||
+-      !(altA = GfxColorSpace::parse(&obj2, gfx))) {
++      !(altA = GfxColorSpace::parse(&obj2))) {
+     switch (nCompsA) {
+     case 1:
+       altA = new GfxDeviceGrayColorSpace();
+@@ -1533,10 +1532,10 @@ GfxColorSpace *GfxICCBasedColorSpace::pa
+   }
+   obj1.free();
+   // put this colorSpace into cache
+-  if (gfx && iccProfileStreamA.num > 0) {
++  if (iccProfileStreamA.num > 0) {
+     GfxICCBasedColorSpaceKey *k = new GfxICCBasedColorSpaceKey(iccProfileStreamA.num, iccProfileStreamA.gen);
+     GfxICCBasedColorSpaceItem *item = new GfxICCBasedColorSpaceItem(cs);
+-    gfx->getIccColorSpaceCache()->put(k, item);
++    cache->put(k, item);
+   }
+ #endif
+   return cs;
+@@ -1684,6 +1683,10 @@ void GfxICCBasedColorSpace::getDefaultRa
+ #endif
+ }
+ 
++#ifdef USE_CMS
++PopplerCache *GfxICCBasedColorSpace::cache = new PopplerCache(5);
++#endif
++
+ //------------------------------------------------------------------------
+ // GfxIndexedColorSpace
+ //------------------------------------------------------------------------
+@@ -1710,7 +1713,7 @@ GfxColorSpace *GfxIndexedColorSpace::cop
+   return cs;
+ }
+ 
+-GfxColorSpace *GfxIndexedColorSpace::parse(Array *arr, Gfx *gfx) {
++GfxColorSpace *GfxIndexedColorSpace::parse(Array *arr) {
+   GfxIndexedColorSpace *cs;
+   GfxColorSpace *baseA;
+   int indexHighA;
+@@ -1724,7 +1727,7 @@ GfxColorSpace *GfxIndexedColorSpace::par
+     goto err1;
+   }
+   arr->get(1, &obj1);
+-  if (!(baseA = GfxColorSpace::parse(&obj1, gfx))) {
++  if (!(baseA = GfxColorSpace::parse(&obj1))) {
+     error(-1, "Bad Indexed color space (base color space)");
+     goto err2;
+   }
+@@ -1870,7 +1873,7 @@ GfxColorSpace *GfxSeparationColorSpace::
+ }
+ 
+ //~ handle the 'All' and 'None' colorants
+-GfxColorSpace *GfxSeparationColorSpace::parse(Array *arr, Gfx *gfx) {
++GfxColorSpace *GfxSeparationColorSpace::parse(Array *arr) {
+   GfxSeparationColorSpace *cs;
+   GooString *nameA;
+   GfxColorSpace *altA;
+@@ -1888,7 +1891,7 @@ GfxColorSpace *GfxSeparationColorSpace::
+   nameA = new GooString(obj1.getName());
+   obj1.free();
+   arr->get(2, &obj1);
+-  if (!(altA = GfxColorSpace::parse(&obj1, gfx))) {
++  if (!(altA = GfxColorSpace::parse(&obj1))) {
+     error(-1, "Bad Separation color space (alternate color space)");
+     goto err3;
+   }
+@@ -1993,7 +1996,7 @@ GfxColorSpace *GfxDeviceNColorSpace::cop
+ }
+ 
+ //~ handle the 'None' colorant
+-GfxColorSpace *GfxDeviceNColorSpace::parse(Array *arr, Gfx *gfx) {
++GfxColorSpace *GfxDeviceNColorSpace::parse(Array *arr) {
+   GfxDeviceNColorSpace *cs;
+   int nCompsA;
+   GooString *namesA[gfxColorMaxComps];
+@@ -2027,7 +2030,7 @@ GfxColorSpace *GfxDeviceNColorSpace::par
+   }
+   obj1.free();
+   arr->get(2, &obj1);
+-  if (!(altA = GfxColorSpace::parse(&obj1, gfx))) {
++  if (!(altA = GfxColorSpace::parse(&obj1))) {
+     error(-1, "Bad DeviceN color space (alternate color space)");
+     goto err3;
+   }
+@@ -2131,7 +2134,7 @@ GfxColorSpace *GfxPatternColorSpace::cop
+ 				          (GfxColorSpace *)NULL);
+ }
+ 
+-GfxColorSpace *GfxPatternColorSpace::parse(Array *arr, Gfx *gfx) {
++GfxColorSpace *GfxPatternColorSpace::parse(Array *arr) {
+   GfxPatternColorSpace *cs;
+   GfxColorSpace *underA;
+   Object obj1;
+@@ -2143,7 +2146,7 @@ GfxColorSpace *GfxPatternColorSpace::par
+   underA = NULL;
+   if (arr->getLength() == 2) {
+     arr->get(1, &obj1);
+-    if (!(underA = GfxColorSpace::parse(&obj1, gfx))) {
++    if (!(underA = GfxColorSpace::parse(&obj1))) {
+       error(-1, "Bad Pattern color space (underlying color space)");
+       obj1.free();
+       return NULL;
+@@ -2182,7 +2185,7 @@ GfxPattern::GfxPattern(int typeA) {
+ GfxPattern::~GfxPattern() {
+ }
+ 
+-GfxPattern *GfxPattern::parse(Object *obj, Gfx *gfx) {
++GfxPattern *GfxPattern::parse(Object *obj) {
+   GfxPattern *pattern;
+   Object obj1;
+ 
+@@ -2197,7 +2200,7 @@ GfxPattern *GfxPattern::parse(Object *ob
+   if (obj1.isInt() && obj1.getInt() == 1) {
+     pattern = GfxTilingPattern::parse(obj);
+   } else if (obj1.isInt() && obj1.getInt() == 2) {
+-    pattern = GfxShadingPattern::parse(obj, gfx);
++    pattern = GfxShadingPattern::parse(obj);
+   }
+   obj1.free();
+   return pattern;
+@@ -2325,7 +2328,7 @@ GfxPattern *GfxTilingPattern::copy() {
+ // GfxShadingPattern
+ //------------------------------------------------------------------------
+ 
+-GfxShadingPattern *GfxShadingPattern::parse(Object *patObj, Gfx *gfx) {
++GfxShadingPattern *GfxShadingPattern::parse(Object *patObj) {
+   Dict *dict;
+   GfxShading *shadingA;
+   double matrixA[6];
+@@ -2338,7 +2341,7 @@ GfxShadingPattern *GfxShadingPattern::pa
+   dict = patObj->getDict();
+ 
+   dict->lookup("Shading", &obj1);
+-  shadingA = GfxShading::parse(&obj1, gfx);
++  shadingA = GfxShading::parse(&obj1);
+   obj1.free();
+   if (!shadingA) {
+     return NULL;
+@@ -2411,7 +2414,7 @@ GfxShading::~GfxShading() {
+   }
+ }
+ 
+-GfxShading *GfxShading::parse(Object *obj, Gfx *gfx) {
++GfxShading *GfxShading::parse(Object *obj) {
+   GfxShading *shading;
+   Dict *dict;
+   int typeA;
+@@ -2435,17 +2438,17 @@ GfxShading *GfxShading::parse(Object *ob
+ 
+   switch (typeA) {
+   case 1:
+-    shading = GfxFunctionShading::parse(dict, gfx);
++    shading = GfxFunctionShading::parse(dict);
+     break;
+   case 2:
+-    shading = GfxAxialShading::parse(dict, gfx);
++    shading = GfxAxialShading::parse(dict);
+     break;
+   case 3:
+-    shading = GfxRadialShading::parse(dict, gfx);
++    shading = GfxRadialShading::parse(dict);
+     break;
+   case 4:
+     if (obj->isStream()) {
+-      shading = GfxGouraudTriangleShading::parse(4, dict, obj->getStream(), gfx);
++      shading = GfxGouraudTriangleShading::parse(4, dict, obj->getStream());
+     } else {
+       error(-1, "Invalid Type 4 shading object");
+       goto err1;
+@@ -2453,7 +2456,7 @@ GfxShading *GfxShading::parse(Object *ob
+     break;
+   case 5:
+     if (obj->isStream()) {
+-      shading = GfxGouraudTriangleShading::parse(5, dict, obj->getStream(), gfx);
++      shading = GfxGouraudTriangleShading::parse(5, dict, obj->getStream());
+     } else {
+       error(-1, "Invalid Type 5 shading object");
+       goto err1;
+@@ -2461,7 +2464,7 @@ GfxShading *GfxShading::parse(Object *ob
+     break;
+   case 6:
+     if (obj->isStream()) {
+-      shading = GfxPatchMeshShading::parse(6, dict, obj->getStream(), gfx);
++      shading = GfxPatchMeshShading::parse(6, dict, obj->getStream());
+     } else {
+       error(-1, "Invalid Type 6 shading object");
+       goto err1;
+@@ -2469,7 +2472,7 @@ GfxShading *GfxShading::parse(Object *ob
+     break;
+   case 7:
+     if (obj->isStream()) {
+-      shading = GfxPatchMeshShading::parse(7, dict, obj->getStream(), gfx);
++      shading = GfxPatchMeshShading::parse(7, dict, obj->getStream());
+     } else {
+       error(-1, "Invalid Type 7 shading object");
+       goto err1;
+@@ -2486,12 +2489,12 @@ GfxShading *GfxShading::parse(Object *ob
+   return NULL;
+ }
+ 
+-GBool GfxShading::init(Dict *dict, Gfx *gfx) {
++GBool GfxShading::init(Dict *dict) {
+   Object obj1, obj2;
+   int i;
+ 
+   dict->lookup("ColorSpace", &obj1);
+-  if (!(colorSpace = GfxColorSpace::parse(&obj1, gfx))) {
++  if (!(colorSpace = GfxColorSpace::parse(&obj1))) {
+     error(-1, "Bad color space in shading dictionary");
+     obj1.free();
+     return gFalse;
+@@ -2588,7 +2591,7 @@ GfxFunctionShading::~GfxFunctionShading(
+   }
+ }
+ 
+-GfxFunctionShading *GfxFunctionShading::parse(Dict *dict, Gfx *gfx) {
++GfxFunctionShading *GfxFunctionShading::parse(Dict *dict) {
+   GfxFunctionShading *shading;
+   double x0A, y0A, x1A, y1A;
+   double matrixA[6];
+@@ -2656,7 +2659,7 @@ GfxFunctionShading *GfxFunctionShading::
+ 
+   shading = new GfxFunctionShading(x0A, y0A, x1A, y1A, matrixA,
+ 				   funcsA, nFuncsA);
+-  if (!shading->init(dict, gfx)) {
++  if (!shading->init(dict)) {
+     delete shading;
+     return NULL;
+   }
+@@ -2746,7 +2749,7 @@ GfxAxialShading::~GfxAxialShading() {
+   }
+ }
+ 
+-GfxAxialShading *GfxAxialShading::parse(Dict *dict, Gfx *gfx) {
++GfxAxialShading *GfxAxialShading::parse(Dict *dict) {
+   GfxAxialShading *shading;
+   double x0A, y0A, x1A, y1A;
+   double t0A, t1A;
+@@ -2821,7 +2824,7 @@ GfxAxialShading *GfxAxialShading::parse(
+ 
+   shading = new GfxAxialShading(x0A, y0A, x1A, y1A, t0A, t1A,
+ 				funcsA, nFuncsA, extend0A, extend1A);
+-  if (!shading->init(dict, gfx)) {
++  if (!shading->init(dict)) {
+     delete shading;
+     return NULL;
+   }
+@@ -2910,7 +2913,7 @@ GfxRadialShading::~GfxRadialShading() {
+   }
+ }
+ 
+-GfxRadialShading *GfxRadialShading::parse(Dict *dict, Gfx *gfx) {
++GfxRadialShading *GfxRadialShading::parse(Dict *dict) {
+   GfxRadialShading *shading;
+   double x0A, y0A, r0A, x1A, y1A, r1A;
+   double t0A, t1A;
+@@ -2989,7 +2992,7 @@ GfxRadialShading *GfxRadialShading::pars
+ 
+   shading = new GfxRadialShading(x0A, y0A, r0A, x1A, y1A, r1A, t0A, t1A,
+ 				 funcsA, nFuncsA, extend0A, extend1A);
+-  if (!shading->init(dict, gfx)) {
++  if (!shading->init(dict)) {
+     delete shading;
+     return NULL;
+   }
+@@ -3140,8 +3143,7 @@ GfxGouraudTriangleShading::~GfxGouraudTr
+ 
+ GfxGouraudTriangleShading *GfxGouraudTriangleShading::parse(int typeA,
+ 							    Dict *dict,
+-							    Stream *str,
+-							    Gfx *gfx) {
++							    Stream *str) {
+   GfxGouraudTriangleShading *shading;
+   Function *funcsA[gfxColorMaxComps];
+   int nFuncsA;
+@@ -3337,7 +3339,7 @@ GfxGouraudTriangleShading *GfxGouraudTri
+   shading = new GfxGouraudTriangleShading(typeA, verticesA, nVerticesA,
+ 					  trianglesA, nTrianglesA,
+ 					  funcsA, nFuncsA);
+-  if (!shading->init(dict, gfx)) {
++  if (!shading->init(dict)) {
+     delete shading;
+     return NULL;
+   }
+@@ -3449,7 +3451,7 @@ GfxPatchMeshShading::~GfxPatchMeshShadin
+ }
+ 
+ GfxPatchMeshShading *GfxPatchMeshShading::parse(int typeA, Dict *dict,
+-						Stream *str, Gfx *gfx) {
++						Stream *str) {
+   GfxPatchMeshShading *shading;
+   Function *funcsA[gfxColorMaxComps];
+   int nFuncsA;
+@@ -3950,7 +3952,7 @@ GfxPatchMeshShading *GfxPatchMeshShading
+ 
+   shading = new GfxPatchMeshShading(typeA, patchesA, nPatchesA,
+ 				    funcsA, nFuncsA);
+-  if (!shading->init(dict, gfx)) {
++  if (!shading->init(dict)) {
+     delete shading;
+     return NULL;
+   }
+Index: poppler-0.12.2/poppler/GfxState.h
+===================================================================
+--- poppler-0.12.2.orig/poppler/GfxState.h	2009-11-30 16:46:21.550608742 +0100
++++ poppler-0.12.2/poppler/GfxState.h	2009-11-30 16:46:37.894603427 +0100
+@@ -36,7 +36,6 @@
+ #include "Function.h"
+ 
+ class Array;
+-class Gfx;
+ class GfxFont;
+ class PDFRectangle;
+ class GfxShading;
+@@ -179,7 +178,7 @@ public:
+   virtual GfxColorSpaceMode getMode() = 0;
+ 
+   // Construct a color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Object *csObj, Gfx *gfx);
++  static GfxColorSpace *parse(Object *csObj);
+ 
+   // Convert to gray, RGB, or CMYK.
+   virtual void getGray(GfxColor *color, GfxGray *gray) = 0;
+@@ -446,7 +445,7 @@ public:
+   virtual GfxColorSpaceMode getMode() { return csICCBased; }
+ 
+   // Construct an ICCBased color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Array *arr, Gfx *gfx);
++  static GfxColorSpace *parse(Array *arr);
+ 
+   virtual void getGray(GfxColor *color, GfxGray *gray);
+   virtual void getRGB(GfxColor *color, GfxRGB *rgb);
+@@ -474,6 +473,8 @@ private:
+ #ifdef USE_CMS
+   GfxColorTransform *transform;
+   GfxColorTransform *lineTransform; // color transform for line
++
++  static PopplerCache *cache;
+ #endif
+ };
+ //------------------------------------------------------------------------
+@@ -489,7 +490,7 @@ public:
+   virtual GfxColorSpaceMode getMode() { return csIndexed; }
+ 
+   // Construct a Lab color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Array *arr, Gfx *gfx);
++  static GfxColorSpace *parse(Array *arr);
+ 
+   virtual void getGray(GfxColor *color, GfxGray *gray);
+   virtual void getRGB(GfxColor *color, GfxRGB *rgb);
+@@ -531,7 +532,7 @@ public:
+   virtual GfxColorSpaceMode getMode() { return csSeparation; }
+ 
+   // Construct a Separation color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Array *arr, Gfx *gfx);
++  static GfxColorSpace *parse(Array *arr);
+ 
+   virtual void getGray(GfxColor *color, GfxGray *gray);
+   virtual void getRGB(GfxColor *color, GfxRGB *rgb);
+@@ -568,7 +569,7 @@ public:
+   virtual GfxColorSpaceMode getMode() { return csDeviceN; }
+ 
+   // Construct a DeviceN color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Array *arr, Gfx *gfx);
++  static GfxColorSpace *parse(Array *arr);
+ 
+   virtual void getGray(GfxColor *color, GfxGray *gray);
+   virtual void getRGB(GfxColor *color, GfxRGB *rgb);
+@@ -607,7 +608,7 @@ public:
+   virtual GfxColorSpaceMode getMode() { return csPattern; }
+ 
+   // Construct a Pattern color space.  Returns NULL if unsuccessful.
+-  static GfxColorSpace *parse(Array *arr, Gfx *gfx);
++  static GfxColorSpace *parse(Array *arr);
+ 
+   virtual void getGray(GfxColor *color, GfxGray *gray);
+   virtual void getRGB(GfxColor *color, GfxRGB *rgb);
+@@ -635,7 +636,7 @@ public:
+   GfxPattern(int typeA);
+   virtual ~GfxPattern();
+ 
+-  static GfxPattern *parse(Object *obj, Gfx *gfx);
++  static GfxPattern *parse(Object *obj);
+ 
+   virtual GfxPattern *copy() = 0;
+ 
+@@ -691,7 +692,7 @@ private:
+ class GfxShadingPattern: public GfxPattern {
+ public:
+ 
+-  static GfxShadingPattern *parse(Object *patObj, Gfx *gfx);
++  static GfxShadingPattern *parse(Object *patObj);
+   virtual ~GfxShadingPattern();
+ 
+   virtual GfxPattern *copy();
+@@ -718,7 +719,7 @@ public:
+   GfxShading(GfxShading *shading);
+   virtual ~GfxShading();
+ 
+-  static GfxShading *parse(Object *obj, Gfx *gfx);
++  static GfxShading *parse(Object *obj);
+ 
+   virtual GfxShading *copy() = 0;
+ 
+@@ -732,7 +733,7 @@ public:
+ 
+ protected:
+ 
+-  GBool init(Dict *dict, Gfx *gfx);
++  GBool init(Dict *dict);
+ 
+   int type;
+   GfxColorSpace *colorSpace;
+@@ -756,7 +757,7 @@ public:
+   GfxFunctionShading(GfxFunctionShading *shading);
+   virtual ~GfxFunctionShading();
+ 
+-  static GfxFunctionShading *parse(Dict *dict, Gfx *gfx);
++  static GfxFunctionShading *parse(Dict *dict);
+ 
+   virtual GfxShading *copy();
+ 
+@@ -790,7 +791,7 @@ public:
+   GfxAxialShading(GfxAxialShading *shading);
+   virtual ~GfxAxialShading();
+ 
+-  static GfxAxialShading *parse(Dict *dict, Gfx *gfx);
++  static GfxAxialShading *parse(Dict *dict);
+ 
+   virtual GfxShading *copy();
+ 
+@@ -828,7 +829,7 @@ public:
+   GfxRadialShading(GfxRadialShading *shading);
+   virtual ~GfxRadialShading();
+ 
+-  static GfxRadialShading *parse(Dict *dict, Gfx *gfx);
++  static GfxRadialShading *parse(Dict *dict);
+ 
+   virtual GfxShading *copy();
+ 
+@@ -871,7 +872,7 @@ public:
+   GfxGouraudTriangleShading(GfxGouraudTriangleShading *shading);
+   virtual ~GfxGouraudTriangleShading();
+ 
+-  static GfxGouraudTriangleShading *parse(int typeA, Dict *dict, Stream *str, Gfx *gfx);
++  static GfxGouraudTriangleShading *parse(int typeA, Dict *dict, Stream *str);
+ 
+   virtual GfxShading *copy();
+ 
+@@ -908,7 +909,7 @@ public:
+   GfxPatchMeshShading(GfxPatchMeshShading *shading);
+   virtual ~GfxPatchMeshShading();
+ 
+-  static GfxPatchMeshShading *parse(int typeA, Dict *dict, Stream *str, Gfx *gfx);
++  static GfxPatchMeshShading *parse(int typeA, Dict *dict, Stream *str);
+ 
+   virtual GfxShading *copy();
+ 
+Index: poppler-0.12.2/poppler/Page.cc
+===================================================================
+--- poppler-0.12.2.orig/poppler/Page.cc	2009-11-30 16:46:28.206103854 +0100
++++ poppler-0.12.2/poppler/Page.cc	2009-11-30 16:46:38.306603351 +0100
+@@ -15,7 +15,7 @@
+ //
+ // Copyright (C) 2005 Kristian Høgsberg <krh@redhat.com>
+ // Copyright (C) 2005 Jeff Muizelaar <jeff@infidigm.net>
+-// Copyright (C) 2005-2009 Albert Astals Cid <aacid@kde.org>
++// Copyright (C) 2005-2008 Albert Astals Cid <aacid@kde.org>
+ // Copyright (C) 2006-2008 Pino Toscano <pino@kde.org>
+ // Copyright (C) 2006 Nickolay V. Shmyrev <nshmyrev@yandex.ru>
+ // Copyright (C) 2006 Scott Turner <scotty1024@mac.com>
+@@ -554,7 +554,7 @@ GBool Page::loadThumb(unsigned char **da
+     obj1.free ();
+     dict->lookup ("CS", &obj1);
+   }
+-  colorSpace = GfxColorSpace::parse(&obj1, NULL);
++  colorSpace = GfxColorSpace::parse(&obj1);
+   obj1.free();
+   if (!colorSpace) {
+     fprintf (stderr, "Error: Cannot parse color space\n");
