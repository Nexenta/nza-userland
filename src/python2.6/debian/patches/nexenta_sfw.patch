Index: b/Modules/_multiprocessing/multiprocessing.h
===================================================================
--- a/Modules/_multiprocessing/multiprocessing.h	2011-08-25 20:59:09.245704943 +0400
+++ b/Modules/_multiprocessing/multiprocessing.h	2011-08-25 20:59:44.895722716 +0400
@@ -3,6 +3,10 @@
 
 #define PY_SSIZE_T_CLEAN
 
+/* needed on Solaris for the definition of CMSG_SPACE and friends */
+#define _XOPEN_SOURCE
+#define _XOPEN_SOURCE_EXTENDED 1
+
 #include "Python.h"
 #include "structmember.h"
 #include "pythread.h"
Index: b/setup.py
===================================================================
--- a/setup.py	2011-08-25 20:59:43.822775986 +0400
+++ b/setup.py	2011-08-25 20:59:44.897501852 +0400
@@ -359,6 +359,10 @@
         # On Debian /usr/local is always used, so we don't include it twice
         #add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
         #add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+        if sys.platform != 'sunos5':
+            # Ensure that /usr/local is always used
+            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -691,8 +695,19 @@
         exts.append( Extension('_csv', ['_csv.c']) )
 
         # socket(2)
+        socket_libs = []
+        if self.compiler.find_library_file(lib_dirs,
+                                           'socket'):
+            socket_libs.append('socket')
+        if self.compiler.find_library_file(lib_dirs,
+                                           'nsl'):
+            socket_libs.append('nsl')
+        if self.compiler.find_library_file(lib_dirs,
+                                           'resolv'):
+            socket_libs.append('resolv')
         exts.append( Extension('_socket', ['socketmodule.c'],
-                               depends = ['socketmodule.h']) )
+                               depends = ['socketmodule.h'],
+                               libraries = socket_libs) )
         # Detect SSL support for the socket module (via _ssl)
         search_for_ssl_incs_in = [
                               '/usr/local/ssl/include',
@@ -716,6 +731,7 @@
             exts.append( Extension('_ssl', ['_ssl.c'],
                                    include_dirs = ssl_incs,
                                    library_dirs = ssl_libs,
+                                   runtime_library_dirs = ssl_libs,
                                    libraries = ['ssl', 'crypto'],
                                    depends = ['socketmodule.h']), )
         else:
@@ -1201,6 +1217,14 @@
 
         # Curses support, requiring the System V version of curses, often
         # provided by the ncurses library.
+        curses_lib_dirs = []
+        curses_inc_dirs = []
+        if platform == 'sunos5':
+            # look for ncurses in /usr/gnu on Solaris
+            curses_inc_dirs.append('/usr/include/ncurses')
+            curses_lib_dirs.append('/usr/gnu/lib')
+            curses_lib_dirs.append('/usr/gnu/lib/amd64')
+            curses_lib_dirs.append('/usr/gnu/lib/sparcv9')
         panel_library = 'panel'
         if curses_library.startswith('ncurses'):
             if curses_library == 'ncursesw':
@@ -1209,7 +1233,10 @@
                 panel_library = 'panelw'
             curses_libs = [curses_library]
             exts.append( Extension('_curses', ['_cursesmodule.c'],
-                                   libraries = curses_libs) )
+                                   libraries = curses_libs,
+                                   library_dirs = curses_lib_dirs,
+                                   runtime_library_dirs = curses_lib_dirs,
+                                   include_dirs = curses_inc_dirs ) )
         elif curses_library == 'curses' and platform != 'darwin':
                 # OSX has an old Berkeley curses, not good enough for
                 # the _curses module.
@@ -1227,9 +1254,12 @@
 
         # If the curses module is enabled, check for the panel module
         if (module_enabled(exts, '_curses') and
-            self.compiler.find_library_file(lib_dirs, panel_library)):
+            self.compiler.find_library_file(lib_dirs + curses_lib_dirs, panel_library)):
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
-                                   libraries = [panel_library] + curses_libs) )
+                                   libraries = [panel_library] + curses_libs,
+                                   include_dirs = curses_inc_dirs,
+                                   library_dirs = curses_lib_dirs,
+                                   runtime_library_dirs = curses_lib_dirs ) )
         else:
             missing.append('_curses_panel')
 
@@ -1453,9 +1483,14 @@
             if macros.get('HAVE_SEM_OPEN', False):
                 multiprocessing_srcs.append('_multiprocessing/semaphore.c')
 
+        multiproc_libs = []
+        if platform == 'sunos5':
+            multiproc_libs = [ "xnet" ]
+
         if sysconfig.get_config_var('WITH_THREAD'):
             exts.append ( Extension('_multiprocessing', multiprocessing_srcs,
                                     define_macros=macros.items(),
+                        	    libraries=multiproc_libs,
                                     include_dirs=["Modules/_multiprocessing"]))
         else:
             missing.append('_multiprocessing')
Index: b/Include/pymacconfig.h
===================================================================
--- a/Include/pymacconfig.h	2011-08-25 20:59:09.332261747 +0400
+++ b/Include/pymacconfig.h	2011-08-25 20:59:44.898014116 +0400
@@ -8,7 +8,7 @@
       * only compile-time constant in these scenarios.
       */
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) || defined(__sun)
 
 # undef SIZEOF_LONG
 # undef SIZEOF_PTHREAD_T
