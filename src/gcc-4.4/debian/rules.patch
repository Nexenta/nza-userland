# -*- makefile -*-
# rules to patch the unpacked files in the source directory
# ---------------------------------------------------------------------------
# various rules to unpack addons and (un)apply patches.
# 	- patch / apply-patches
#	- unpatch / reverse-patches

.NOTPARALLEL:

patchdir	?= debian/patches
series_file	?= $(patchdir)/series

# which patches should be applied?

debian_patches = \
	svn-updates \
	$(if $(with_linaro_branch),gcc-linaro) \

ifeq ($(with_java),yes)
#  debian_patches += \
#	svn-class-updates
endif

ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	rename-info-files \
	pr25509-doc \
	$(if $(with_linaro_branch),gcc-linaro-doc) \

#	$(if $(with_linaro_branch),,svn-doc-updates) \

endif

#	boehm-gc-nocheck: seems to work on the buildds \

debian_patches += \
	gcc-textdomain \
	gcc-driver-extra-langs

ifeq ($(distribution),Ubuntu)
  ifneq (,$(filter $(distrelease),dapper hardy intrepid jaunty karmic lucid))
    debian_patches += gcc-hash-style-both
  else
    debian_patches += gcc-hash-style-gnu
  endif
  ifeq (,$(filter $(distrelease),dapper hardy intrepid jaunty karmic lucid maverick))
    debian-patches += gcc-no-add-needed
  endif
else
  debian_patches += gcc-hash-style-both
  ifeq (,$(filter $(distrelease),etch lenny squeeze))
    debian_patches += gcc-no-add-needed
  endif
endif

debian_patches += \
	$(if $(with_linaro_branch),,gcc-build-id) \
	libstdc++-pic \
	libstdc++-doclink \
	libstdc++-man-3cxx \
	libjava-stacktrace \
	libjava-subdir \
	libjava-jnipath \
	libjava-sjlj \
	libjava-disable-plugin \
	alpha-no-ev4-directive \
	boehm-gc-getnprocs \
	note-gnu-stack \
	pr25509 \
	pr38333 \
	gcc-cloog-dl \
	libgomp-omp_h-multilib \
	sparc-force-cpu \
	gcc-stack_chk_fail-check \
	sh4_atomic_update \
	libstdc++-arm-wno-abi \
	gold-and-ld \
	libstdc++-test-installed \
	pr40816 \
	gnat-snapshot-build-fix \
	gcc-java-align-data \
	linux-atomic-builtin-expect \
	mips-fix-loongson2f-nop$(if $(with_linaro_branch),-linaro) \
	gcc-system-root \

ifneq ($(with_linaro_branch),yes)
  debian_patches += \
	libjava-atomic-builtins-eabi \
	pr39429 \
	rev146451 \
	gcc-unwind-debug-hook \
	pr40521-revert-workaround \
	pr41848 \
	gcc-arm-thumb2-sched \
	arm-boehm-gc-locks \
	gcj-use-atomic-builtins \
	sh4-scheduling \
	pr42748 \
	pr43323 \
	pr42321 \
	libsupc++-vmi_class_type_info \
	gcc-m68k-support-for-tls-backport \
	pr44626 \
	arm-thumb2-speedup-division \
	gcc-arm-implicit-it \

else
  debian_patches += \
	pr45112
endif

# TODO: update ...
#	libjava-rpath \

ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	$(if $(with_linaro_branch),,gcj-use-atomic-builtins-doc) \
	gold-and-ld-doc
endif

hardening_patches =
ifneq ($(distribution),Debian)
  ifneq (,$(findstring gcc-4, $(PKGSOURCE)))
    hardening_patches += gcc-default-format-security \
	gcc-default-fortify-source gcc-default-relro \
	testsuite-hardening-format \
	testsuite-hardening-fortify \
	testsuite-hardening-printf-types
  endif
endif
ifeq ($(with_ssp)-$(with_ssp_default),yes-yes)
  hardening_patches += gcc-default-ssp
endif

# FIXME 4.5: Drop and adjust symbols files
ifneq (,$(findstring 4.4, $(PKGSOURCE)))
  debian_patches += pr39491
endif

ifeq ($(with_proto),yes)
  debian_patches += deb-protoize
endif

ifeq ($(with_ada),yes)
  debian_patches += \
	ada-driver-check \
	ada-gcc-name \
	ada-default-project-path \
	ada-symbolic-tracebacks \
	ada-library-project-files-soname \
	ada-polyorb-dsa \
	ada-bug589164

  ifeq ($(biarch64),yes)
    debian_patches += \
	ada-nobiarch-check
  endif

  ifeq ($(with_libgnat),yes)
    debian_patches += \
	ada-gnatvsn \
	ada-link-lib \
	ada-libgnatvsn \
	ada-libgnatprj \
	ada-acats
    ifeq ($(with_gnat_zcx)-$(with_gnat_sjlj),yes-yes)
      debian_patches += \
	ada-sjlj
    endif
  endif

  ifeq ($(DEB_TARGET_ARCH_OS),kfreebsd)
    debian_patches += ada-bug564232
  endif

endif

# gcc-4.4 is not yet supported by gpc
ifeq ($(with_pascal),yes)
#
else
#  debian_patches += gcc-pascal-lang
endif

ifeq ($(with_d),yes)
  debian_patches += \
       gdc-4.4 \
       gdc-hg-updates \
       gdc-hg-doc-updates \
       gdc-ice-valist \
       gdc-stubs \
       gdc-fix-build-kbsd \
       gdc-fix-build-arm \
       gdc-pr26885 \
       gdc-driver-zlib \
       gdc-libphobos-math \
       gdc-libphobos-std-format
  ifeq ($(with_libphobos),yes)
    debian_patches += gdc-libphobos-build
  else
    debian_patches += gdc-driver-nophobos
  endif
else
  debian_patches += gcc-d-lang
endif

ifeq ($(DEB_TARGET_ARCH_OS),hurd)
  debian_patches += hurd-changes hurd-pthread
endif

ifeq ($(DEB_TARGET_ARCH),alpha)
  debian_patches += alpha-ieee mudflap-nocheck
  ifneq ($(GFDL_INVARIANT_FREE),yes)
    debian_patches += alpha-ieee-doc
  endif
endif

ifneq (,$(findstring $(DEB_TARGET_ARCH),arm armel armhf))
  debian_patches += libjava-armel-unwind
  debian_patches += $(if $(with_linaro_branch),,arm-gcc-gcse)
endif
ifeq ($(distribution),Ubuntu)
  # times out on the buildd
  debian_patches += libstdc++-arm-no-check
endif
debian_patches += gcc-arm-earlyclobbers

debian_patches += \
	$(if $(with_linaro_branch),,pr40133) \
	$(if $(with_linaro_branch),,pr40134) \

#ifeq ($(DEB_TARGET_ARCH),lpia)
#  debian_patches += gcc-atom gcc-atom-doc
#endif

ifeq ($(DEB_TARGET_ARCH),m68k)
  debian_patches += m68k-multilib
  debian_patches += pr41302
  debian_patches += pr43804
  debian_patches += pr37053
  debian_patches += pr46179
  debian_patches += pr39531
  debian_patches += pr41064
endif

ifeq ($(DEB_TARGET_ARCH_OS),kfreebsd)
  debian_patches += kbsd-gnu
  debian_patches += kbsd-gnu-ada
endif

ifneq (,$(findstring sh4,$(DEB_TARGET_ARCH)))
  debian_patches += sh4-mode-switching
endif

ifeq ($(DEB_CROSS),yes)
  debian_patches += cross-include cross-fixes
endif

spu_patches = cell-branch$(if $(with_linaro_branch),-linaro)
ifneq ($(GFDL_INVARIANT_FREE),yes)
  spu_patches += cell-branch-doc
endif

#debian_patches += link-libs

# all patches below this line are applied for gcc-snapshot builds as well

ifeq ($(PKGSOURCE),gcc-snapshot)
  spu_patches =
  debian_patches =
  debian_patches += pr40521-revert-workaround
endif

debian_patches += gcc-ice-hack gcc-ice-apport
debian_patches += libjava-disable-static libjava-fixed-symlinks

debian_patches += \
	$(if $(with_linaro_branch),,ada-arm-eabi) \
	ada-mips

ifeq ($(distribution),Debian)
  debian_patches += arm-unbreak-eabi-armv4t
endif

ifeq ($(biarch_cpu),i686)
  debian_patches += gcc-multiarch-i686$(if $(with_linaro_branch),-linaro)
else
  debian_patches += gcc-multiarch$(if $(with_linaro_branch),-linaro)
endif

ifeq ($(biarch64),yes)
  ifeq (,$(findstring libjava, $(biarch_multidir_names)))
    debian_patches += libjava-nobiarch-check
  endif
  debian_patches += config-ml

  ifeq ($(DEB_CROSS),yes)
    debian_patches += cross-biarch
  endif
  ifeq ($(DEB_TARGET_ARCH),powerpc)
    debian_patches += powerpc-biarch
  endif
  debian_patches += s390-biarch
endif

ifeq ($(biarch32),yes)
  ifeq (,$(findstring libjava, $(biarch_multidir_names)))
    debian_patches += libjava-nobiarch-check
  endif
  debian_patches += config-ml gcc-multilib64dir
endif

ifneq (,$(findstring sparc64,$(DEB_TARGET_ARCH)))
  debian_patches += gcc-multilib64dir
endif

ifeq ($(biarchn32)-$(biarch64),yes-yes)
  ifneq (,$(findstring $(DEB_TARGET_ARCH),mips mipsel))
    debian_patches += mips-triarch
  endif
endif


series_stamp = $(stampdir)/02-series-stamp
series: $(series_stamp)
$(series_stamp):
	echo $(strip $(addsuffix .diff,$(debian_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" > $(series_file)
ifneq (,$(strip $(hardening_patches)))
  ifneq ($(DEB_CROSS),yes)
    ifneq ($(PKGSOURCE),gcc-snapshot)
	echo $(strip $(addsuffix .diff,$(hardening_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" >> $(series_file)
    endif
  endif
endif
	sed -r 's/(.)$$/\1 -p1/' -i $(series_file)
	touch $@

autotools_files := $(addprefix ./,$(foreach file,$(shell lsdiff --no-filename \
	$(foreach patch,$(debian_patches),$(patchdir)/$(patch).diff) \
	| sed -r 's/[ab]\/src\//src\//' | sort | uniq),$(shell echo $(file) \
	| egrep 'configure\.(ac|in)|Makefile\.(am|in)|acinclude.m4')))

autoconf_version = 2.59
ifeq ($(PKGSOURCE),gcc-snapshot)
  # The actual version depends on the build-dependencies set by
  # variable AUTO_BUILD_DEP in rules.conf.  Here, we assume the
  # correct version is installed.
  autoconf_version =
endif

# FIXME: the auto* stuff is done every time for every subdir, which
# leads to build errors. Idea: record the auto* calls in the patch
# files (AUTO <dir> <auto-command with options>) and run them separately,
# maybe only once per directory).
$(patch_stamp): $(unpack_stamp) $(series_stamp)
	QUILT_PATCHES=$(patchdir) \
	  quilt --quiltrc /dev/null push -a || test $$? = 2

ifneq (,$(filter svn-updates, $(debian_patches)))
	awk '/^EOF/ {exit} p==1 {print} /EOF$$/ {p=1}' \
	  $(patchdir)/svn-updates.diff > src/LAST_UPDATED
endif

	if ! test -f ./autotools_files ; then touch ./autotools_files ; fi

	cd $(srcdir)/fixincludes && ./genfixes

	for f in $(autotools_files) ; \
	  do case $$f in \
	    */classpath/m4/acinclude.m4) \
		: ;; \
	    */configure.*|*/acinclude.m4) \
		if grep ^"$$(md5sum $$f)"$$ ./autotools_files >/dev/null ; \
		  then echo "Skipping already regenerated file $$f." ; \
		else \
		  echo "Running autoconf$(autoconf_version) in $$(dirname $$f)..." ; \
		  dir="$(CURDIR)"; cd $(CURDIR)/$$(dirname $$f) \
		    && AUTOM4TE=/usr/bin/autom4te$(autoconf_version) autoconf$(autoconf_version) \
		    && cd $$dir \
		    && echo "$$(md5sum $$f)" >> ./autotools_files ; \
		fi ;; \
	    */Makefile.*) ;; \
	    *) echo "Unknown file: $$f"; false; \
	  esac; \
	done

	for i in $(debian_patches); do \
	  echo -e "\n$$i:" >> pxxx; \
	  sed -n 's/^# *DP: */  /p' $(patchdir)/$$i.diff >> pxxx; \
	done
#	-$(srcdir)/move-if-change pxxx $@
	mv pxxx $@

unpatch:
	QUILT_PATCHES=$(patchdir) \
	  quilt --quiltrc /dev/null pop -a -R || test $$? = 2
	rm -rf .pc
	for f in $(autotools_files); do \
	  rm -f $$(echo $$f | sed -r 's/\.(ac|am|in)$$//'); \
	done

no_spu_patches = $(hardening_patches)

$(src_spu_stamp): $(patch_stamp)
	rm -rf src-spu
ifeq (,$(strip $(no_spu_patches)))
	ln -s src src-spu
else
	cp -a src src-spu
	set -e; \
	for p in $(no_spu_patches); do \
	  list="$$p $$list"; \
	done; \
	for p in $$list; do \
	  echo "Revert for spu build: $$p"; \
	  patch -d src-spu -p2 -R < debian/patches/$$p.diff; \
	done
endif
	set -e; \
	for p in $(spu_patches); do \
	  echo "Apply for spu build: $$p"; \
	  patch -d src-spu -p2 < debian/patches/$$p.diff; \
	done
ifneq (,$(strip $(no_spu_patches)))
	cd src-spu/libgfortran \
	  && AUTOM4TE=/usr/bin/autom4te$(autoconf_version) autoconf$(autoconf_version)
endif
	touch $@

patch: $(patch_stamp)
.PHONY: patch series quilt autotools
