#!/usr/bin/make -f
# This file is public domain software, originally written by Joey Hess.

# Uncomment this to turn on verbose mode. 
export DH_VERBOSE=1

# work around dpkg changes
DEB_HOST_ARCH_CPU := $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU 2>/dev/null)
DEB_HOST_ARCH_OS := $(shell dpkg-architecture -qDEB_HOST_ARCH_OS 2>/dev/null)
#ifeq ($(DEB_HOST_ARCH_CPU),)
#  DEB_HOST_ARCH_CPU := $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
#  ifeq ($(DEB_HOST_ARCH_CPU),x86_64)
#    DEB_HOST_ARCH_CPU := amd64
#  endif
#endif
#ifeq ($(DEB_HOST_ARCH_OS),)
#  DEB_HOST_ARCH_OS := $(subst -gnu,,$(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM))
#  ifeq ($(DEB_HOST_ARCH_OS),gnu)
#    DEB_HOST_ARCH_OS := hurd
#  endif
#endif

# implement no optimization build option
#ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
#CFLAGS = -g -DSYSLOG_SUCCESS -DSYSLOG_FAILURE -DSYSLOG_NON_ROOT -O0
#else
#CFLAGS = -g -DSYSLOG_SUCCESS -DSYSLOG_FAILURE -DSYSLOG_NON_ROOT -O2
#endif
#LDFLAGS =

# Renesas SH(sh4) need -mieee option.
#ifeq ($(DEB_HOST_ARCH_CPU),sh4)
#  CFLAGS += -mieee
#endif

# programs to include/not include
#ifeq ($(DEB_HOST_ARCH_OS),hurd)
#  BUILDPROG_OPTS := --enable-install-program=su,arch
#else
#  BUILDPROG_OPTS := --enable-install-program=arch
#endif

#BIN_PROGS = cat chgrp chmod chown cp date dd df dir echo false ln ls mkdir \
#	mknod mv pwd readlink rm rmdir vdir sleep stty sync touch true uname \
#	mktemp

CMDS_NONCONFLICTING=[ base64 dir dircolors ginstall md5sum nproc pinky \
printenv ptx readlink seq sha1sum sha224sum sha256sum sha384sum sha512sum \
shred shuf stat stdbuf tac timeout truncate users vdir whoami

CMDS_CONFLICTING_ELF = basename cat chgrp chmod chown chroot cksum comm \
cp csplit cut date dd df dirname du echo env expand expr factor false \
fmt fold head hostid id join kill link ln logname ls mkdir \
mkfifo mknod mktemp mv nice nl nohup od paste pathchk pr printf pwd rm rmdir \
sleep sort split stty sum sync tail tee test touch tr true tsort tty \
uname unexpand uniq unlink uptime wc who whoami yes groups


d=debian/coreutils

default: binary

configure: patch configure-stamp 
configure-stamp: 
	dh_testdir

	CFLAGS="$(CFLAGS)" \
		LDFLAGS=$(LDFLAGS) ./configure \
		--prefix=/usr/gnu \
		--infodir=/usr/share/info --mandir=/usr/share/man

#		$(BUILDPROG_OPTS)

	echo configured > configure-stamp

build: patch configure build-stamp
build-stamp: 
	dh_testdir
	$(MAKE)
#ifeq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
#  ifeq (,$(findstring mips,$(DEB_BUILD_ARCH)))
#	$(MAKE) check VERBOSE=yes 
#  endif
#endif
	echo built > build-stamp

clean: unpatch clean1
clean1: 
	dh_testdir
	-rm -f build-stamp configure-stamp
	-rm -rf debian/buildinfo $(d)
	make distclean || true
	-rm -f man/*.1
	-rm -rf .pc
	-rm -f config.log
	-rm -f config.status
	dh_clean

patch: patch-stamp
patch-stamp: 
	QUILT_PATCHES=debian/patches quilt push -a || test $$? = 2
	touch patch-stamp

unpatch: 
	QUILT_PATCHES=debian/patches quilt pop -a || test $$? = 2
	rm -rf patch-stamp debian-patched

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

#	$(MAKE) install DESTDIR=$(CURDIR)/$(d)
	$(MAKE) install DESTDIR=$(CURDIR)/debian/tmp
	mv $(CURDIR)/debian/tmp/usr/gnu/bin/install $(CURDIR)/debian/tmp/usr/gnu/bin/ginstall
	mv $(CURDIR)/debian/tmp/usr/share/man/man1/install.1 $(CURDIR)/debian/tmp/usr/share/man/man1/ginstall.1

#	mv $(d)/usr/gnu/bin $(d)/usr/oldbin
#	mv $(d)/usr/gnu/lib/coreutils/*.so $(d)/usr/lib
#	rm -rf $(d)/usr/gnu/bin
#	rm -rf $(d)/usr/gnu/lib
#	mv $(d)/usr/gnu/share $(d)/usr/
#	mkdir -p $(d)/usr/gnu/bin
#	mkdir -p $(d)/usr/gnu/share/man/man1

	# some things go in root rather than usr
#	for f in $(CMDS_NONCONFLICTING); do \
#	    cp -f src/$$f $(d)/usr/bin/; \
#	    if [ "${cmd}" = "[" ]; then \
#		man=test.1 \
#		dman=${man} \
#		tgtdir=${ROOTGNUMAN1DIR} \
#	    elif [ "${cmd}" = "ginstall" ]; then \
#		man=install.1 \
#		dman=ginstall.1 \
#		tgtdir=${ROOTMAN1DIR} \
#	    else
#		man=${cmd}.1 \
#		dman=${man} \
#		tgtdir=${ROOTMAN1DIR} \
#	    fi \
#	    _install M ../man/${man} ${tgtdir}/${dman} 444 \
#	done

#	for f in $(CMDS_CONFLICTING_ELF); do \
#	    cp -f src/$$f $(d)/usr/gnu/bin/; \
#	    mv $(d)/usr/share/man/man1/$$f".1" $(d)/usr/gnu/share/man/man1/; \
#	done

	dh_install

	# some build environments will leave a dangling info dir
	rm -f $(d)/usr/share/info/dir

	cp AUTHORS \
		NEWS README \
		THANKS \
		TODO \
		$(d)/usr/share/doc/coreutils


# Build architecture-independent files here.
binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs -i
	dh_installdocs -i
#	dh_buildinfo
	dh_installexamples -i
	dh_installinfo -i
	dh_installman -i
	dh_link -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir -a
	dh_testroot -a
	dh_installchangelogs -a ChangeLog 
	dh_installdocs -a
#	dh_buildinfo -a
	dh_installexamples -a
	dh_installinfo -a doc/coreutils.info
#	dh_installman -a
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	dh_strip -a
endif
	dh_link -a
	dh_compress -a
	dh_fixperms -a
ifeq ($(DEB_HOST_ARCH_OS),hurd)
	chmod u+s $(d)/usr/bin/su
endif
	dh_installdeb -a
	dh_shlibdeps -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-indep binary-arch 
.PHONY: build clean binary-indep binary-arch binary install patch unpatch clean1
