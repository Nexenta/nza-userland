#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: Restore bsddb module tests compatibility with python2.5

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        ;;
    *)
	echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
        exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
From 4bec8f6c5160dadb5a0034ff712706cf55dd4bb5 Mon Sep 17 00:00:00 2001
From: Julien Cristau <jcristau@debian.org>
Date: Mon, 27 Sep 2010 10:50:01 +0200
Subject: [PATCH 6/9] bsddb: fixup tests to work with python2.5

---
 Lib/bsddb/test/test_all.py                      |    5 +++--
 Lib/bsddb/test/test_associate.py                |    5 +++--
 Lib/bsddb/test/test_basics.py                   |    5 +++--
 Lib/bsddb/test/test_compare.py                  |    3 ++-
 Lib/bsddb/test/test_cursor_pget_bug.py          |    3 ++-
 Lib/bsddb/test/test_dbobj.py                    |    3 ++-
 Lib/bsddb/test/test_dbshelve.py                 |   13 ++++++-------
 Lib/bsddb/test/test_dbtables.py                 |    3 ++-
 Lib/bsddb/test/test_distributed_transactions.py |    3 ++-
 Lib/bsddb/test/test_early_close.py              |    9 +++++----
 Lib/bsddb/test/test_join.py                     |    3 ++-
 Lib/bsddb/test/test_lock.py                     |    3 ++-
 Lib/bsddb/test/test_misc.py                     |    3 ++-
 Lib/bsddb/test/test_pickle.py                   |    3 ++-
 Lib/bsddb/test/test_recno.py                    |    3 ++-
 Lib/bsddb/test/test_replication.py              |    9 +++++----
 Lib/bsddb/test/test_sequence.py                 |    3 ++-
 Lib/bsddb/test/test_thread.py                   |    3 ++-
 18 files changed, 49 insertions(+), 33 deletions(-)

diff --git a/Lib/bsddb/test/test_all.py b/Lib/bsddb/test/test_all.py
index 39231c6..d882c9b 100644
--- a/Lib/bsddb/test/test_all.py
+++ b/Lib/bsddb/test/test_all.py
@@ -4,6 +4,7 @@
 import sys
 import os
 import unittest
+import shutil
 try:
     # For Pythons w/distutils pybsddb
     import bsddb3 as bsddb
@@ -420,7 +421,7 @@ def get_new_environment_path() :
     try:
         os.makedirs(path,mode=0700)
     except os.error:
-        test_support.rmtree(path)
+        shutil.rmtree(path)
         os.makedirs(path)
     return path
 
@@ -444,7 +445,7 @@ def set_test_path_prefix(path) :
     get_new_path.prefix=path
 
 def remove_test_path_directory() :
-    test_support.rmtree(get_new_path.prefix)
+    shutil.rmtree(get_new_path.prefix)
 
 if have_threads :
     import threading
diff --git a/Lib/bsddb/test/test_associate.py b/Lib/bsddb/test/test_associate.py
index c0da3e8..c5bd83f 100644
--- a/Lib/bsddb/test/test_associate.py
+++ b/Lib/bsddb/test/test_associate.py
@@ -7,6 +7,7 @@ import time
 from pprint import pprint
 
 import unittest
+import shutil
 from test_all import db, dbshelve, test_support, verbose, have_threads, \
         get_new_environment_path
 
@@ -85,7 +86,7 @@ class AssociateErrorTestCase(unittest.TestCase):
     def tearDown(self):
         self.env.close()
         self.env = None
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test00_associateDBError(self):
         if verbose:
@@ -135,7 +136,7 @@ class AssociateTestCase(unittest.TestCase):
         self.closeDB()
         self.env.close()
         self.env = None
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def addDataToDB(self, d, txn=None):
         for key, value in musicdata.items():
diff --git a/Lib/bsddb/test/test_basics.py b/Lib/bsddb/test/test_basics.py
index 21b1f8f..d61e227 100644
--- a/Lib/bsddb/test/test_basics.py
+++ b/Lib/bsddb/test/test_basics.py
@@ -8,6 +8,7 @@ import errno
 import string
 from pprint import pprint
 import unittest
+import shutil
 import time
 
 from test_all import db, test_support, verbose, get_new_environment_path, \
@@ -56,7 +57,7 @@ class BasicTestCase(unittest.TestCase):
                 self.filename = "test"
             # Yes, a bare except is intended, since we're re-raising the exc.
             except:
-                test_support.rmtree(self.homeDir)
+                shutil.rmtree(self.homeDir)
                 raise
         else:
             self.env = None
@@ -81,7 +82,7 @@ class BasicTestCase(unittest.TestCase):
         self.d.close()
         if self.env is not None:
             self.env.close()
-            test_support.rmtree(self.homeDir)
+            shutil.rmtree(self.homeDir)
         else:
             os.remove(self.filename)
 
diff --git a/Lib/bsddb/test/test_compare.py b/Lib/bsddb/test/test_compare.py
index ce3728a..d020530 100644
--- a/Lib/bsddb/test/test_compare.py
+++ b/Lib/bsddb/test/test_compare.py
@@ -7,6 +7,7 @@ import test_all
 from cStringIO import StringIO
 
 import unittest
+import shutil
 
 from test_all import db, dbshelve, test_support, \
         get_new_environment_path, get_new_database_path
@@ -79,7 +80,7 @@ class AbstractBtreeKeyCompareTestCase (unittest.TestCase):
         if self.env is not None:
             self.env.close()
             self.env = None
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def addDataToDB (self, data):
         i = 0
diff --git a/Lib/bsddb/test/test_cursor_pget_bug.py b/Lib/bsddb/test/test_cursor_pget_bug.py
index 68b6a87..914b030 100644
--- a/Lib/bsddb/test/test_cursor_pget_bug.py
+++ b/Lib/bsddb/test/test_cursor_pget_bug.py
@@ -1,5 +1,6 @@
 import unittest
 import os, glob
+import shutil
 
 from test_all import db, test_support, get_new_environment_path, \
         get_new_database_path
@@ -32,7 +33,7 @@ class pget_bugTestCase(unittest.TestCase):
         del self.secondary_db
         del self.primary_db
         del self.env
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test_pget(self):
         cursor = self.secondary_db.cursor()
diff --git a/Lib/bsddb/test/test_dbobj.py b/Lib/bsddb/test/test_dbobj.py
index e301a5a..8baa1dc 100644
--- a/Lib/bsddb/test/test_dbobj.py
+++ b/Lib/bsddb/test/test_dbobj.py
@@ -1,6 +1,7 @@
 
 import os, string
 import unittest
+import shutil
 
 from test_all import db, dbobj, test_support, get_new_environment_path, \
         get_new_database_path
@@ -19,7 +20,7 @@ class dbobjTestCase(unittest.TestCase):
             del self.db
         if hasattr(self, 'env'):
             del self.env
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test01_both(self):
         class TestDBEnv(dbobj.DBEnv): pass
diff --git a/Lib/bsddb/test/test_dbshelve.py b/Lib/bsddb/test/test_dbshelve.py
index 13f9cd2..d593c8a 100644
--- a/Lib/bsddb/test/test_dbshelve.py
+++ b/Lib/bsddb/test/test_dbshelve.py
@@ -5,6 +5,7 @@ TestCases for checking dbShelve objects.
 import os, string
 import random
 import unittest
+import shutil
 import warnings
 
 
@@ -117,12 +118,10 @@ class DBShelveTestCase(unittest.TestCase):
             self.checkrec(key, value)
 
         dbvalues = d.values()
-        self.assertEqual(len(dbvalues), len(d.keys()))
-        with warnings.catch_warnings():
-            warnings.filterwarnings('ignore',
-                                    'comparing unequal types not supported',
-                                    DeprecationWarning)
-            self.assertEqual(sorted(values), sorted(dbvalues))
+        assert len(dbvalues) == len(d.keys())
+        values.sort()
+        dbvalues.sort()
+        assert values == dbvalues
 
         items = d.items()
         self.assertEqual(len(items), len(values))
@@ -292,7 +291,7 @@ class BasicEnvShelveTestCase(DBShelveTestCase):
             from test_all import do_proxy_db_py3k
             do_proxy_db_py3k(self._flag_proxy_db_py3k)
         self.do_close()
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
 
 class EnvBTreeShelveTestCase(BasicEnvShelveTestCase):
diff --git a/Lib/bsddb/test/test_dbtables.py b/Lib/bsddb/test/test_dbtables.py
index 1d0489d..a2d3a8a 100644
--- a/Lib/bsddb/test/test_dbtables.py
+++ b/Lib/bsddb/test/test_dbtables.py
@@ -28,6 +28,7 @@ except ImportError:
     import pickle
 
 import unittest
+import shutil
 from test_all import db, dbtables, test_support, verbose, \
         get_new_environment_path, get_new_database_path
 
@@ -52,7 +53,7 @@ class TableDBTestCase(unittest.TestCase):
         if sys.version_info[0] >= 3 :
             from test_all import do_proxy_db_py3k
             do_proxy_db_py3k(self._flag_proxy_db_py3k)
-        test_support.rmtree(self.testHomeDir)
+        shutil.rmtree(self.testHomeDir)
 
     def test01(self):
         tabname = "test01"
diff --git a/Lib/bsddb/test/test_distributed_transactions.py b/Lib/bsddb/test/test_distributed_transactions.py
index f864b88..7bc1f3c 100644
--- a/Lib/bsddb/test/test_distributed_transactions.py
+++ b/Lib/bsddb/test/test_distributed_transactions.py
@@ -3,6 +3,7 @@
 
 import os
 import unittest
+import shutil
 
 from test_all import db, test_support, get_new_environment_path, \
         get_new_database_path
@@ -60,7 +61,7 @@ class DBTxn_distributed(unittest.TestCase):
 
     def tearDown(self):
         self._destroy_env()
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def _recreate_env(self,must_open_db) :
         self._destroy_env()
diff --git a/Lib/bsddb/test/test_early_close.py b/Lib/bsddb/test/test_early_close.py
index cc69e47..8a72ea6 100644
--- a/Lib/bsddb/test/test_early_close.py
+++ b/Lib/bsddb/test/test_early_close.py
@@ -4,6 +4,7 @@ is closed before its DB objects.
 
 import os
 import unittest
+import shutil
 
 from test_all import db, test_support, verbose, get_new_environment_path, get_new_database_path
 
@@ -27,7 +28,7 @@ class DBEnvClosedEarlyCrash(unittest.TestCase):
         self.filename = "test"
 
     def tearDown(self):
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test01_close_dbenv_before_db(self):
         dbenv = db.DBEnv()
@@ -168,9 +169,9 @@ class DBEnvClosedEarlyCrash(unittest.TestCase):
         self.assertEquals(("XXX", "yyy"), c1.first())
         import warnings
         # Not interested in warnings about implicit close.
-        with warnings.catch_warnings():
-            warnings.simplefilter("ignore")
-            txn.commit()
+        warnings.simplefilter("ignore")
+        txn.commit()
+        warnings.resetwarnings()
         self.assertRaises(db.DBCursorClosedError, c2.first)
 
     if db.version() > (4,3,0) :
diff --git a/Lib/bsddb/test/test_join.py b/Lib/bsddb/test/test_join.py
index 9b45df8..c979a34 100644
--- a/Lib/bsddb/test/test_join.py
+++ b/Lib/bsddb/test/test_join.py
@@ -4,6 +4,7 @@
 import os
 
 import unittest
+import shutil
 
 from test_all import db, dbshelve, test_support, verbose, \
         get_new_environment_path, get_new_database_path
@@ -40,7 +41,7 @@ class JoinTestCase(unittest.TestCase):
 
     def tearDown(self):
         self.env.close()
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test01_join(self):
         if verbose:
diff --git a/Lib/bsddb/test/test_lock.py b/Lib/bsddb/test/test_lock.py
index 47da392..13a0063 100644
--- a/Lib/bsddb/test/test_lock.py
+++ b/Lib/bsddb/test/test_lock.py
@@ -5,6 +5,7 @@ TestCases for testing the locking sub-system.
 import time
 
 import unittest
+import shutil
 from test_all import db, test_support, verbose, have_threads, \
         get_new_environment_path, get_new_database_path
 
@@ -34,7 +35,7 @@ class LockingTestCase(unittest.TestCase):
 
     def tearDown(self):
         self.env.close()
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
 
     def test01_simple(self):
diff --git a/Lib/bsddb/test/test_misc.py b/Lib/bsddb/test/test_misc.py
index 0cf75e9..e2ac27b 100644
--- a/Lib/bsddb/test/test_misc.py
+++ b/Lib/bsddb/test/test_misc.py
@@ -3,6 +3,7 @@
 
 import os
 import unittest
+import shutil
 
 from test_all import db, dbshelve, hashopen, test_support, get_new_environment_path, get_new_database_path
 
@@ -15,7 +16,7 @@ class MiscTestCase(unittest.TestCase):
 
     def tearDown(self):
         test_support.unlink(self.filename)
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test01_badpointer(self):
         dbs = dbshelve.open(self.filename)
diff --git a/Lib/bsddb/test/test_pickle.py b/Lib/bsddb/test/test_pickle.py
index 489c093..faba35c 100644
--- a/Lib/bsddb/test/test_pickle.py
+++ b/Lib/bsddb/test/test_pickle.py
@@ -6,6 +6,7 @@ try:
 except ImportError:
     cPickle = None
 import unittest
+import shutil
 
 from test_all import db, test_support, get_new_environment_path, get_new_database_path
 
@@ -23,7 +24,7 @@ class pickleTestCase(unittest.TestCase):
             del self.db
         if hasattr(self, 'env'):
             del self.env
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def _base_test_pickle_DBError(self, pickle):
         self.env = db.DBEnv()
diff --git a/Lib/bsddb/test/test_recno.py b/Lib/bsddb/test/test_recno.py
index d332497..def780a 100644
--- a/Lib/bsddb/test/test_recno.py
+++ b/Lib/bsddb/test/test_recno.py
@@ -5,6 +5,7 @@ import os
 import errno
 from pprint import pprint
 import unittest
+import shutil
 
 from test_all import db, test_support, verbose, get_new_environment_path, get_new_database_path
 
@@ -26,7 +27,7 @@ class SimpleRecnoTestCase(unittest.TestCase):
     def tearDown(self):
         test_support.unlink(self.filename)
         if self.homeDir:
-            test_support.rmtree(self.homeDir)
+            shutil.rmtree(self.homeDir)
 
     def test01_basic(self):
         d = db.DB()
diff --git a/Lib/bsddb/test/test_replication.py b/Lib/bsddb/test/test_replication.py
index fabc165..e60e9ae 100644
--- a/Lib/bsddb/test/test_replication.py
+++ b/Lib/bsddb/test/test_replication.py
@@ -4,6 +4,7 @@
 import os
 import time
 import unittest
+import shutil
 import weakref
 
 from test_all import db, test_support, have_threads, verbose, \
@@ -65,8 +66,8 @@ class DBReplicationManager(unittest.TestCase):
             self.dbMaster.close()
         self.dbenvClient.close()
         self.dbenvMaster.close()
-        test_support.rmtree(self.homeDirClient)
-        test_support.rmtree(self.homeDirMaster)
+        shutil.rmtree(self.homeDirClient)
+        shutil.rmtree(self.homeDirMaster)
 
     def test01_basic_replication(self) :
         master_port = test_support.find_unused_port()
@@ -301,8 +302,8 @@ class DBBaseReplication(DBReplicationManager):
         self.t_c.join()
         self.dbenvClient.close()
         self.dbenvMaster.close()
-        test_support.rmtree(self.homeDirClient)
-        test_support.rmtree(self.homeDirMaster)
+        shutil.rmtree(self.homeDirClient)
+        shutil.rmtree(self.homeDirMaster)
 
     def basic_rep_threading(self) :
         self.dbenvMaster.rep_start(flags=db.DB_REP_MASTER)
diff --git a/Lib/bsddb/test/test_sequence.py b/Lib/bsddb/test/test_sequence.py
index b61ead4..2c8e72f 100644
--- a/Lib/bsddb/test/test_sequence.py
+++ b/Lib/bsddb/test/test_sequence.py
@@ -1,5 +1,6 @@
 import unittest
 import os
+import shutil
 
 from test_all import db, test_support, get_new_environment_path, get_new_database_path
 
@@ -31,7 +32,7 @@ class DBSequenceTest(unittest.TestCase):
             self.dbenv.close()
             del self.dbenv
 
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def test_get(self):
         self.seq = db.DBSequence(self.d, flags=0)
diff --git a/Lib/bsddb/test/test_thread.py b/Lib/bsddb/test/test_thread.py
index 28a2555..99b4efb 100644
--- a/Lib/bsddb/test/test_thread.py
+++ b/Lib/bsddb/test/test_thread.py
@@ -15,6 +15,7 @@ except NameError:
     class WindowsError(Exception):
         pass
 
+import shutil
 import unittest
 from test_all import db, dbutils, test_support, verbose, have_threads, \
         get_new_environment_path, get_new_database_path
@@ -59,7 +60,7 @@ class BaseThreadedTestCase(unittest.TestCase):
     def tearDown(self):
         self.d.close()
         self.env.close()
-        test_support.rmtree(self.homeDir)
+        shutil.rmtree(self.homeDir)
 
     def setEnvOpts(self):
         pass
diff --git a/Lib/bsddb/test/test_replication.py b/Lib/bsddb/test/test_replication.py
index e60e9ae..7cd2f1a 100644
--- a/Lib/bsddb/test/test_replication.py
+++ b/Lib/bsddb/test/test_replication.py
@@ -70,6 +70,10 @@ class DBReplicationManager(unittest.TestCase):
         shutil.rmtree(self.homeDirMaster)
 
     def test01_basic_replication(self) :
+        # for python2.5
+        if not hasattr(test_support, "find_unused_port"):
+            return
+
         master_port = test_support.find_unused_port()
         self.dbenvMaster.repmgr_set_local_site("127.0.0.1", master_port)
         client_port = test_support.find_unused_port()
-- 
1.7.1

