#!/usr/bin/perl -w

=head1 NAME

dh_sunstrip - strip executables, shared libraries, and some static libraries (Sun Solaris)

=cut

use strict;
use File::Find;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_sunstrip> [S<I<debhelper options>>] [B<-X>I<item>] [--dbg-package=package] [--keep-debug]

=head1 DESCRIPTION

dh_sunstrip is a debhelper program that is responsible for stripping
executables, shared libraries, and static libraries that are not used for
debugging.

This program examines your package build directories and works out what
to strip on its own. It uses L<file(1)> and file permissions and filenames
to figure out what files are shared libraries (*.so), executable binaries,
and static (lib*.a) and debugging libraries (lib*_g.a, debug/*.so), and
strips each as much as is possible. (Which is not at all for debugging
libraries.) In general it seems to make very good guesses, and will do the
right thing in almost all cases.

Since it is very hard to automatically guess if a file is a
module, and hard to determine how to strip a module, dh_sunstrip does not
currently deal with stripping binary modules such as .o files.

=head1 OPTIONS

=over 4

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain "item" anywhere in their filename from being
stripped. You may use this option multiple times to build up a list of
things to exclude.

=item B<--dbg-package=>I<package>

Causes dh_sunstrip to save debug symbols stripped from the packages it acts on
as independent files in the package build directory of the specified debugging
package.

For example, if your packages are lifoo and foo and you want to include a
foo-dbg package with debugging symbols, use dh_sunstrip --dbg-to=foo-dbg.

Note that this option behaves significantly different in debhelper
compatibility levels 4 and below. Instead of specifying the name of a debug
package to put symbols in, it specifies a package (or packages) which
should have separated debug symbols, and the separated symbols are placed
in packages with "-dbg" added to their name.

Note that if you use this option, your package should build-depend on
binutils (>= 2.14.90.0.7).

=item B<-k>, B<--keep-debug>

Debug symbols will be retained, but split into an independent
file in usr/lib/debug/ in the package build directory. --dbg-package
is easier to use than this option, but this option is more flexible.

Note that if you use this option, your package should build-depend on
binutils (>= 2.12.90.0.9).

=back

=head1 NOTES

If the DEB_BUILD_OPTIONS environment variable contains "nostrip", nothing
will be stripped, in accordance with Debian policy.

=head1 CONFORMS TO

Debian policy, version 3.0.1

=cut

init();

# This variable can be used to turn off stripping (see Policy).
if (defined $ENV{DEB_BUILD_OPTIONS} && $ENV{DEB_BUILD_OPTIONS} =~ /nostrip/) {
	exit;
}

# I could just use `file $_[0]`, but this is safer
sub get_file_type {
	my $file=shift;
	open (FILE, '-|') # handle all filenames safely
		|| exec('file', $file)
		|| die "can't exec file: $!";
	my $type=<FILE>;
	close FILE;
	return $type;
}

# Check if a file is an elf binary, shared library, or static library,
# for use by File::Find. It'll fill the following 3 arrays with anything
# it finds:
my (@shared_libs, @executables, @static_libs);
sub testfile {
	return if -l $_ or -d $_; # Skip directories and symlinks always.
	
	# See if we were asked to exclude this file.
	# Note that we have to test on the full filename, including directory.
	my $fn="$File::Find::dir/$_";
	foreach my $f (@{$dh{EXCLUDE}}) {
		return if ($fn=~m/\Q$f\E/);
	}

	# Is it a debug library in a debug subdir?
	return if $fn=~m/debug\/.*\.so/;

	# Does its filename look like a shared library?
	if (m/.*\.so.*?/) {
		# Ok, do the expensive test.
		my $type=get_file_type($_);
		if ($type=~m/.*ELF.*shared.*/) {
			push @shared_libs, $fn;
			return;
		}
	}
	
	# Is it executable? -x isn't good enough, so we need to use stat.
	my (undef,undef,$mode,undef)=stat(_);
	if ($mode & 0111) {
		# Ok, expensive test.
		my $type=get_file_type($_);
		if ($type=~m/.*ELF.*(executable|shared|relocatable).*/) {
			push @executables, $fn;
			return;
		}
	}
	
	# Is it a static library, and not a debug library?
	if (m/lib.*\.a$/ && ! m/.*_g\.a$/) {
		# Is it a binary file, or something else (maybe a liner
		# script on Hurd, for example? I don't use file, because
		# file returns a varity of things on static libraries.
		if (-B $_) {
			push @static_libs, $fn;
			return;
		}
	}
}

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	# Support for keeping the debugging symbols in a detached file.
	my $keep_debug=$dh{KEEP_DEBUG};
	my $debugtmp=$tmp;
	if (! compat(4)) {
		if (ref $dh{DEBUGPACKAGES}) {
			$keep_debug=1;
			# Note that it's only an array for the v4 stuff;
			# for v5 only one value is used.
			$debugtmp=tmpdir(@{$dh{DEBUGPACKAGES}}[0]);
		}
	}
	else {
		if (ref $dh{DEBUGPACKAGES} && grep { $_ eq $package } @{$dh{DEBUGPACKAGES}}) {
			$keep_debug=1;
			$debugtmp=tmpdir($package."-dbg");
		}
	}
	
	@shared_libs=@executables=@static_libs=();
	find(\&testfile,$tmp);

	foreach (@shared_libs) {
		doit("/usr/ccs/bin/strip", "-x", $_);
	}
	
	foreach (@executables) {
		doit("/usr/ccs/bin/strip", "-x", $_);
	}

	foreach (@static_libs) {
		doit("/usr/ccs/bin/strip", "-x", $_);
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
