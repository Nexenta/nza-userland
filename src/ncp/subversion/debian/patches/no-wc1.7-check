Remove the check for being inside a svn 1.7 working copy.
This check was added in 1.6.6 and removed again in 1.6.15.

It was intended as future-proofing, but we've since concluded that it's
not actually that useful.  Especially given how expensive it is: it is
called potentially a great many times for a single svn operation, and
each time, calls stat() and recurses up the filesystem to "/".


--- a/subversion/tests/cmdline/svntest/actions.py
+++ b/subversion/tests/cmdline/svntest/actions.py
@@ -29,12 +29,6 @@ def no_sleep_for_timestamps():
 def do_sleep_for_timestamps():
   os.environ['SVN_I_LOVE_CORRUPTED_WORKING_COPIES_SO_DISABLE_SLEEP_FOR_TIMESTAMPS'] = 'no'
 
-def no_check_for_wc_ng():
-  os.environ['SVN_I_LOVE_CORRUPTED_WORKING_COPIES_SO_DISABLE_CHECK_FOR_WC_NG'] = 'yes'
-
-def do_check_for_wc_ng():
-  os.environ['SVN_I_LOVE_CORRUPTED_WORKING_COPIES_SO_DISABLE_CHECK_FOR_WC_NG'] = 'no'
-
 def setup_pristine_repository():
   """Create the pristine repository and 'svn import' the greek tree"""
 
--- a/subversion/tests/cmdline/svntest/main.py
+++ b/subversion/tests/cmdline/svntest/main.py
@@ -1218,7 +1218,6 @@ class TestRunner:
                                       str(self.index)
 
     actions.no_sleep_for_timestamps()
-    actions.no_check_for_wc_ng()
 
     saved_dir = os.getcwd()
     try:
--- a/subversion/libsvn_wc/questions.c
+++ b/subversion/libsvn_wc/questions.c
@@ -43,56 +43,6 @@
 #include "private/svn_wc_private.h"
 #include "private/svn_sqlite.h"
 
-#define SVN_WC_NG_CHECK_ENV_VAR "SVN_I_LOVE_CORRUPTED_WORKING_COPIES_SO_DISABLE_CHECK_FOR_WC_NG"
-
-static svn_error_t *
-is_inside_wc_ng(const char *abspath,
-                const char *target_path,
-                int *wc_format,
-                apr_pool_t *pool)
-{
-  svn_node_kind_t kind;
-  const char *wc_db_path;
-  char *wc_ng_check_env_var;
-  svn_error_t *err;
-
-  wc_ng_check_env_var = getenv(SVN_WC_NG_CHECK_ENV_VAR);
-  if (wc_ng_check_env_var &&
-      apr_strnatcasecmp(wc_ng_check_env_var, "yes") == 0)
-    return SVN_NO_ERROR; /* Allow skipping for testing */
-
-  wc_db_path = svn_path_join_many(pool, abspath, SVN_WC_ADM_DIR_NAME,
-                                  "wc.db", NULL);
-  err = svn_io_check_path(wc_db_path, &kind, pool);
-  if (err)
-    {
-      svn_error_clear(err);
-      return SVN_NO_ERROR;
-    }
-
-  if (kind == svn_node_file)
-    {
-      /* This value is completely bogus, but it is much higher than 1.6 will
-         have any prayer of reading. */
-      *wc_format = 9999;
-
-      return svn_error_createf(SVN_ERR_WC_UNSUPPORTED_FORMAT, NULL,
-         _("The path '%s' appears to be part of a Subversion 1.7 or greater\n"
-           "working copy rooted at '%s'.\n"
-           "Please upgrade your Subversion client to use this working copy."
-           ),
-         svn_path_local_style(target_path, pool),
-         svn_path_local_style(abspath, pool));
-    }
-
-  if (svn_dirent_is_root(abspath, strlen(abspath)))
-    return SVN_NO_ERROR;
-  else
-    return is_inside_wc_ng(svn_path_dirname(abspath, pool), target_path,
-                           wc_format, pool);
-}
-
-
 /* ### todo: make this compare repository too?  Or do so in parallel
    code.  */
 svn_error_t *
@@ -146,15 +96,6 @@ svn_wc_check_wc(const char *path,
   else if (err)
     return err;
 
-  /* Let's check for the future. */
-  if (*wc_format == 0)
-    {
-      const char *abspath;
-
-      SVN_ERR(svn_path_get_absolute(&abspath, path, pool));
-      SVN_ERR(is_inside_wc_ng(abspath, path, wc_format, pool));
-    }
-
   if (*wc_format > 0)
     {
       /* If we managed to read the format file we assume that we
