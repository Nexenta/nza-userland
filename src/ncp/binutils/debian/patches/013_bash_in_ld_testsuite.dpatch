#!/bin/sh -e
## 013_bash_in_ld_testsuite.dpatch.dpatch by Matthias Klose <doko@ubuntu.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Explicitely use bash for the ld testsuite.

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch}"

case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0

@DPATCH@
--- ./ld/testsuite/config/default.exp.orig	2009-04-19 21:52:33.000000000 +0200
+++ ./ld/testsuite/config/default.exp	2009-04-19 21:54:01.000000000 +0200
@@ -119,10 +119,10 @@
 	#makefile rules, with embedded shell variable expansions.
 	#make wants $$shell_var, we want $shell_var ...
 	set cmd "host='$target_triplet' && . $srcdir/../configure.host && sed -e 's,\\\$\\\$,\$,g' <<EOF\n\$$varname\nEOF"
-	set status [catch "exec sh -c [list $cmd]" result]
+	set status [catch "exec bash -c [list $cmd]" result]
 	if $status { error "Error getting native link files: $result" }
 	set cmd "CC='$CC' && eval echo \"$result\""
-	set status [catch "exec sh -c [list $cmd]" result]
+	set status [catch "exec bash -c [list $cmd]" result]
 	if $status { error "Error getting native link files: $result" }
 	set $varname $result
 	send_log "$varname = $result\n"
@@ -132,7 +132,7 @@
 proc get_target_emul {} {
     global target_triplet
     global srcdir
-    set status [catch "exec sh -c \"targ='$target_triplet' && . $srcdir/../configure.tgt && echo \\\$targ_emul\"" result]
+    set status [catch "exec bash -c \"targ='$target_triplet' && . $srcdir/../configure.tgt && echo \\\$targ_emul\"" result]
     if $status { error "Error getting emulation name: $result" }
     return $result
 }
