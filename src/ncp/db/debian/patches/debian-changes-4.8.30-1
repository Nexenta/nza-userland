Description: Upstream changes introduced in version 4.8.30-1
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 db4.8 (4.8.30-1) unstable; urgency=low
 .
   * New upstream version.
 .
 The person named in the Author field signed this changelog entry.
Author: Clint Adams <schizo@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- db4.8-4.8.30.orig/test/env012.tcl
+++ db4.8-4.8.30/test/env012.tcl
@@ -75,7 +75,7 @@ proc env012 { } {
 	    $testdir $testfile PUT $key $data RECOVER 0 10 &]
 
 	# Wait a while so process 1 has a chance to get going.
-	tclsleep 2
+	tclsleep 4
 
 	puts "\t\tEnv$tnum.b2: Start process 2."
 	set p2 [exec $tclsh_path $test_path/wrap.tcl envscript.tcl \
--- db4.8-4.8.30.orig/docs/api_reference/CXX/dbcursor.html
+++ db4.8-4.8.30/docs/api_reference/CXX/dbcursor.html
@@ -94,7 +94,7 @@ Db::cursor(DbTxn *txnid, Dbc **cursorp,
             <ul type="disc">
               <li>
                 <p><a id="cursor_DB_BULK"></a>
-                  <code class="literal">DB_BULK</code>
+                  <code class="literal">DB_CURSOR_BULK</code>
             </p>
                 <p>
 		 Configure a cursor to optimize for bulk operations.  Each
--- db4.8-4.8.30.orig/docs/api_reference/C/dbcursor.html
+++ db4.8-4.8.30/docs/api_reference/C/dbcursor.html
@@ -92,7 +92,7 @@ DB-&gt;cursor(DB *db, DB_TXN *txnid, DBC
             <ul type="disc">
               <li>
                 <p><a id="cursor_DB_BULK"></a>
-                  <code class="literal">DB_BULK</code>
+                  <code class="literal">DB_CURSOR_BULK</code>
             </p>
                 <p>
 		 Configure a cursor to optimize for bulk operations.  Each
--- db4.8-4.8.30.orig/dbinc/mutex_int.h
+++ db4.8-4.8.30/dbinc/mutex_int.h
@@ -850,7 +850,11 @@ typedef volatile unsigned char tsl_t;
  * alignment locally.
  */
 #ifndef	MUTEX_ALIGN
-#define	MUTEX_ALIGN	sizeof(unsigned int)
+# if defined(__linux__) && defined(__sparc__)
+# define	MUTEX_ALIGN	8
+# else
+# define	MUTEX_ALIGN	sizeof(unsigned int)
+# endif
 #endif
 
 /*
--- db4.8-4.8.30.orig/dbinc/db_page.h
+++ db4.8-4.8.30/dbinc/db_page.h
@@ -226,6 +226,17 @@ typedef struct __pg_crypto {
 	 */
 } PG_CRYPTO;
 
+/*
+ * With most compilers sizeof(PG_CRYPTO) == 38.  However some ABIs
+ * require it to be padded to 40 bytes.  The padding must be excluded
+ * from our size calculations due to the 16-byte alignment requirement
+ * for crypto.
+ *
+ * A similar problem applies to PG_CHKSUM, but it's too late to change
+ * that.
+ */
+#define SIZEOF_PG_CRYPTO 38
+
 typedef struct _db_page {
 	DB_LSN	  lsn;		/* 00-07: Log sequence number. */
 	db_pgno_t pgno;		/* 08-11: Current page number. */
@@ -261,7 +272,7 @@ typedef struct _db_page {
  */
 #define	P_INP(dbp, pg)							\
 	((db_indx_t *)((u_int8_t *)(pg) + SIZEOF_PAGE +			\
-	(F_ISSET((dbp), DB_AM_ENCRYPT) ? sizeof(PG_CRYPTO) :		\
+	(F_ISSET((dbp), DB_AM_ENCRYPT) ? SIZEOF_PG_CRYPTO :		\
 	(F_ISSET((dbp), DB_AM_CHKSUM) ? sizeof(PG_CHKSUM) : 0))))
 
 #define	P_IV(dbp, pg)							\
--- db4.8-4.8.30.orig/dist/Makefile.in
+++ db4.8-4.8.30/dist/Makefile.in
@@ -766,9 +766,15 @@ $(libdb_version): $(C_OBJS)
 	$(RM) $(libdb)
 	$(LN) -s $(libdb_version) $(libdb)
 
+Versions: $(C_OBJS)
+	rm -f $@
+	printf "DB4_8 {\n  global:\n" > $@
+	nm `sed -n "/^pic_object='\(.*\)'$$/ { s//\1/;p;}" $(C_OBJS)` | grep " [TR] " | cut -d" " -f3 | sed -e 's/$$/;/' >> $@
+	printf "local: *; };\n" >> $@
+
 # Shared C library.
-$(libso_target): $(C_OBJS)
-	$(SOLINK) $(SOFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) $(LIBCSO_LIBS)
+$(libso_target): $(C_OBJS) Versions
+	$(SOLINK) $(SOFLAGS) -Wl,--version-script=Versions $(LDFLAGS) -o $@ $(C_OBJS) $(LIBCSO_LIBS)
 	$(RM) $(libdb)
 	$(LN) -s .libs/$(libdb_version) $(libdb)
 
