# Harden write and chdir because of ignored return value
--- a/tty.c
+++ b/tty.c
@@ -321,7 +321,8 @@
 void
 tty_raw(struct tty *tty, const char *s)
 {
-	write(tty->fd, s, strlen(s));
+	if (write(tty->fd, s, strlen(s)) == -1)
+		fatal("write failed");
 }
 
 void
@@ -354,7 +355,8 @@
 	bufferevent_write(tty->event, s, strlen(s));
 
 	if (tty->log_fd != -1)
-		write(tty->log_fd, s, strlen(s));
+		if (write(tty->log_fd, s, strlen(s)) == -1)
+			fatal("write failed");
 }
 
 void
@@ -380,7 +382,8 @@
 	}
 
 	if (tty->log_fd != -1)
-		write(tty->log_fd, &ch, 1);
+		if (write(tty->log_fd, &ch, 1) == -1)
+			fatal("write failed");
 }
 
 void
@@ -391,7 +394,8 @@
 	size = grid_utf8_size(gu);
 	bufferevent_write(tty->event, gu->data, size);
 	if (tty->log_fd != -1)
-		write(tty->log_fd, gu->data, size);
+		if(write(tty->log_fd, gu->data, size) == -1)
+			fatal("write failed");
 	tty->cx += gu->width;
 }
 
--- a/window.c
+++ b/window.c
@@ -560,7 +560,9 @@
 		return (-1);
 	case 0:
 		if (chdir(wp->cwd) != 0)
-			chdir("/");
+			if (chdir("/") <0 )
+				fatal("chdir failed");
+
 
 		if (tcgetattr(STDIN_FILENO, &tio2) != 0)
 			fatal("tcgetattr failed");
--- a/client.c
+++ b/client.c
@@ -292,6 +292,7 @@
 		datalen = imsg.hdr.len - IMSG_HEADER_SIZE;
 
 		log_debug("client got %d", imsg.hdr.type);
+		int rc = 0;
 		switch (imsg.hdr.type) {
 		case MSG_DETACH:
 			if (datalen != 0)
@@ -339,7 +340,11 @@
 			memcpy(&lockdata, imsg.data, sizeof lockdata);
 
 			lockdata.cmd[(sizeof lockdata.cmd) - 1] = '\0';
-			system(lockdata.cmd);
+			rc = system(lockdata.cmd);
+			if(rc == 127)
+				fatal("lock command could not be executed!");
+			if(rc == -1)
+				fatal("lock command process could not be created!");
 			client_write_server(MSG_UNLOCK, NULL, 0);
 			break;
 		default:
--- a/input.c
+++ b/input.c
@@ -793,7 +793,8 @@
 	char   *reply;
 
 	va_start(ap, fmt);
-	vasprintf(&reply, fmt, ap);
+	if (vasprintf(&reply, fmt, ap) == -1)
+		fatal("unable to allocate string!");
 	va_end(ap);
 
 	bufferevent_write(ictx->wp->event, reply, strlen(reply));
