# DP: hg updates of the 2.7 release branch (until 2011-07-09).

# hg diff -r v2.7.2 | filterdiff --exclude=Lib/pstats.py --exclude=Lib/profile.py --exclude=.*ignore --exclude=.hg* --remove-timestamps

Index: b/Doc/ACKS.txt
===================================================================
--- a/Doc/ACKS.txt	2011-07-26 15:35:35.778888775 +0400
+++ b/Doc/ACKS.txt	2011-07-26 15:35:56.014193914 +0400
@@ -103,6 +103,7 @@
    * Robert Kern
    * Jim Kerr
    * Jan Kim
+   * Kamil Kisiel
    * Greg Kochanski
    * Guido Kollerie
    * Peter A. Koren
@@ -139,7 +140,7 @@
    * Ross Moore
    * Sjoerd Mullender
    * Dale Nagata
-   * Michal Nowikowski 
+   * Michal Nowikowski
    * Ng Pheng Siong
    * Koray Oner
    * Tomas Oppelstrup
Index: b/Doc/c-api/intro.rst
===================================================================
--- a/Doc/c-api/intro.rst	2011-07-26 15:35:35.935395232 +0400
+++ b/Doc/c-api/intro.rst	2011-07-26 15:35:56.019147816 +0400
@@ -594,8 +594,8 @@
 
 Compiling the interpreter with the :cmacro:`Py_DEBUG` macro defined produces
 what is generally meant by "a debug build" of Python. :cmacro:`Py_DEBUG` is
-enabled in the Unix build by adding :option:`--with-pydebug` to the
-:file:`configure` command.  It is also implied by the presence of the
+enabled in the Unix build by adding ``--with-pydebug`` to the
+:file:`./configure` command.  It is also implied by the presence of the
 not-Python-specific :cmacro:`_DEBUG` macro.  When :cmacro:`Py_DEBUG` is enabled
 in the Unix build, compiler optimization is disabled.
 
Index: b/Doc/distutils/apiref.rst
===================================================================
--- a/Doc/distutils/apiref.rst	2011-07-26 15:35:37.141632690 +0400
+++ b/Doc/distutils/apiref.rst	2011-07-26 15:35:56.027983588 +0400
@@ -1815,7 +1815,7 @@
 .. module:: distutils.command.bdist_msi
    :synopsis: Build a binary distribution as a Windows MSI file
 
-.. class:: bdist_msi(Command)
+.. class:: bdist_msi
 
    Builds a `Windows Installer`_ (.msi) binary package.
 
Index: b/Doc/distutils/introduction.rst
===================================================================
--- a/Doc/distutils/introduction.rst	2011-07-26 15:35:36.989909452 +0400
+++ b/Doc/distutils/introduction.rst	2011-07-26 15:35:56.033359932 +0400
@@ -79,11 +79,17 @@
   for an example)
 
 To create a source distribution for this module, you would create a setup
-script, :file:`setup.py`, containing the above code, and run::
+script, :file:`setup.py`, containing the above code, and run this command from a
+terminal::
 
    python setup.py sdist
 
-which will create an archive file (e.g., tarball on Unix, ZIP file on Windows)
+For Windows, open a command prompt windows ("DOS box") and change the command
+to::
+
+   setup.py sdist
+
+:command:`sdist` will create an archive file (e.g., tarball on Unix, ZIP file on Windows)
 containing your setup script :file:`setup.py`, and your module :file:`foo.py`.
 The archive file will be named :file:`foo-1.0.tar.gz` (or :file:`.zip`), and
 will unpack into a directory :file:`foo-1.0`.
Index: b/Doc/documenting/building.rst
===================================================================
--- a/Doc/documenting/building.rst	2011-07-26 15:35:36.070009095 +0400
+++ b/Doc/documenting/building.rst	2011-07-26 15:35:56.036997140 +0400
@@ -14,6 +14,7 @@
 Luckily, a Makefile has been prepared so that on Unix, provided you have
 installed Python and Subversion, you can just run ::
 
+   cd Doc
    make html
 
 to check out the necessary toolset in the `tools/` subdirectory and build the
Index: b/Doc/documenting/markup.rst
===================================================================
--- a/Doc/documenting/markup.rst	2011-07-26 15:35:36.510648314 +0400
+++ b/Doc/documenting/markup.rst	2011-07-26 15:35:56.041764656 +0400
@@ -98,11 +98,12 @@
 
        Spam or ham the foo.
 
-The signatures of object methods or data attributes should always include the
-type name (``.. method:: FileInput.input(...)``), even if it is obvious from the
-context which type they belong to; this is to enable consistent
-cross-references.  If you describe methods belonging to an abstract protocol,
-such as "context managers", include a (pseudo-)type name too to make the
+The signatures of object methods or data attributes should not include the
+class name, but be nested in a class directive.  The generated files will
+reflect this nesting, and the target identifiers (for HTML output) will use
+both the class and method name, to enable consistent cross-references.  If you
+describe methods belonging to an abstract protocol such as context managers,
+use a class directive with a (pseudo-)type name too to make the
 index entries more informative.
 
 The directives are:
Index: b/Doc/install/index.rst
===================================================================
--- a/Doc/install/index.rst	2011-07-26 15:35:42.042006699 +0400
+++ b/Doc/install/index.rst	2011-07-26 15:35:56.047323228 +0400
@@ -96,10 +96,16 @@
 directory: :file:`foo-1.0` or :file:`widget-0.9.7`.  Additionally, the
 distribution will contain a setup script :file:`setup.py`, and a file named
 :file:`README.txt` or possibly just :file:`README`, which should explain that
-building and installing the module distribution is a simple matter of running ::
+building and installing the module distribution is a simple matter of running
+one command from a terminal::
 
    python setup.py install
 
+For Windows, this command should be run from a command prompt windows ("DOS
+box")::
+
+   setup.py install
+
 If all these things are true, then you already know how to build and install the
 modules you've just downloaded:  Run the command above. Unless you need to
 install things in a non-standard way or customize the build process, you don't
@@ -113,14 +119,11 @@
 ==========================
 
 As described in section :ref:`inst-new-standard`, building and installing a module
-distribution using the Distutils is usually one simple command::
+distribution using the Distutils is usually one simple command to run from a
+terminal::
 
    python setup.py install
 
-On Unix, you'd run this command from a shell prompt; on Windows, you have to
-open a command prompt window ("DOS box") and do it there; on Mac OS X, you open
-a :command:`Terminal` window to get a shell prompt.
-
 
 .. _inst-platform-variations:
 
Index: b/Doc/library/cmd.rst
===================================================================
--- a/Doc/library/cmd.rst	2011-07-26 15:35:40.572372073 +0400
+++ b/Doc/library/cmd.rst	2011-07-26 15:35:56.051830053 +0400
@@ -56,7 +56,7 @@
    the line as argument.
 
    The optional argument is a banner or intro string to be issued before the first
-   prompt (this overrides the :attr:`intro` class member).
+   prompt (this overrides the :attr:`intro` class attribute).
 
    If the :mod:`readline` module is loaded, input will automatically inherit
    :program:`bash`\ -like history-list editing (e.g. :kbd:`Control-P` scrolls back
Index: b/Doc/library/collections.rst
===================================================================
--- a/Doc/library/collections.rst	2011-07-26 15:35:37.416081884 +0400
+++ b/Doc/library/collections.rst	2011-07-26 15:35:56.056158201 +0400
@@ -623,7 +623,9 @@
                'Return a new OrderedDict which maps field names to their values'
                return OrderedDict(zip(self._fields, self))
    <BLANKLINE>
-           def _replace(_self, **kwds):
+          __dict__ = property(_asdict)
+   <BLANKLINE>
+          def _replace(_self, **kwds):
                'Return a new Point object replacing specified fields with new values'
                result = _self._make(map(kwds.pop, ('x', 'y'), _self))
                if kwds:
Index: b/Doc/library/cookie.rst
===================================================================
--- a/Doc/library/cookie.rst	2011-07-26 15:35:40.850291581 +0400
+++ b/Doc/library/cookie.rst	2011-07-26 15:35:56.059802460 +0400
@@ -191,7 +191,7 @@
 
 .. method:: Morsel.set(key, value, coded_value)
 
-   Set the *key*, *value* and *coded_value* members.
+   Set the *key*, *value* and *coded_value* attributes.
 
 
 .. method:: Morsel.isReservedKey(K)
Index: b/Doc/library/crypto.rst
===================================================================
--- a/Doc/library/crypto.rst	2011-07-26 15:35:40.297177681 +0400
+++ b/Doc/library/crypto.rst	2011-07-26 15:35:56.153083481 +0400
@@ -27,5 +27,5 @@
 A.M. Kuchling of further interest; the package contains modules for various
 encryption algorithms, most notably AES.  These modules are not distributed with
 Python but available separately.  See the URL
-http://www.amk.ca/python/code/crypto.html  for more information.
+http://www.pycrypto.org  for more information.
 
Index: b/Doc/library/curses.rst
===================================================================
--- a/Doc/library/curses.rst	2011-07-26 15:35:38.510956255 +0400
+++ b/Doc/library/curses.rst	2011-07-26 15:35:56.317920589 +0400
@@ -44,10 +44,6 @@
    Module :mod:`curses.textpad`
       Editable text widget for curses supporting  :program:`Emacs`\ -like bindings.
 
-   Module :mod:`curses.wrapper`
-      Convenience function to ensure proper terminal setup and resetting on
-      application entry and exit.
-
    :ref:`curses-howto`
       Tutorial material on using curses with Python, by Andrew Kuchling and Eric
       Raymond.
@@ -79,7 +75,7 @@
 
 .. function:: baudrate()
 
-   Returns the output speed of the terminal in bits per second.  On software
+   Return the output speed of the terminal in bits per second.  On software
    terminal emulators it will have a fixed high value. Included for historical
    reasons; in former times, it was used to  write output loops for time delays and
    occasionally to change interfaces depending on the line speed.
@@ -92,7 +88,7 @@
 
 .. function:: can_change_color()
 
-   Returns true or false, depending on whether the programmer can change the colors
+   Return ``True`` or ``False``, depending on whether the programmer can change the colors
    displayed by the terminal.
 
 
@@ -107,7 +103,7 @@
 
 .. function:: color_content(color_number)
 
-   Returns the intensity of the red, green, and blue (RGB) components in the color
+   Return the intensity of the red, green, and blue (RGB) components in the color
    *color_number*, which must be between ``0`` and :const:`COLORS`.  A 3-tuple is
    returned, containing the R,G,B values for the given color, which will be between
    ``0`` (no component) and ``1000`` (maximum amount of component).
@@ -115,7 +111,7 @@
 
 .. function:: color_pair(color_number)
 
-   Returns the attribute value for displaying text in the specified color.  This
+   Return the attribute value for displaying text in the specified color.  This
    attribute value can be combined with :const:`A_STANDOUT`, :const:`A_REVERSE`,
    and the other :const:`A_\*` attributes.  :func:`pair_number` is the counterpart
    to this function.
@@ -123,7 +119,7 @@
 
 .. function:: curs_set(visibility)
 
-   Sets the cursor state.  *visibility* can be set to 0, 1, or 2, for invisible,
+   Set the cursor state.  *visibility* can be set to 0, 1, or 2, for invisible,
    normal, or very visible.  If the terminal supports the visibility requested, the
    previous cursor state is returned; otherwise, an exception is raised.  On many
    terminals, the "visible" mode is an underline cursor and the "very visible" mode
@@ -132,7 +128,7 @@
 
 .. function:: def_prog_mode()
 
-   Saves the current terminal mode as the "program" mode, the mode when the running
+   Save the current terminal mode as the "program" mode, the mode when the running
    program is using curses.  (Its counterpart is the "shell" mode, for when the
    program is not in curses.)  Subsequent calls to :func:`reset_prog_mode` will
    restore this mode.
@@ -140,7 +136,7 @@
 
 .. function:: def_shell_mode()
 
-   Saves the current terminal mode as the "shell" mode, the mode when the running
+   Save the current terminal mode as the "shell" mode, the mode when the running
    program is not using curses.  (Its counterpart is the "program" mode, when the
    program is using curses capabilities.) Subsequent calls to
    :func:`reset_shell_mode` will restore this mode.
@@ -148,7 +144,7 @@
 
 .. function:: delay_output(ms)
 
-   Inserts an *ms* millisecond pause in output.
+   Insert an *ms* millisecond pause in output.
 
 
 .. function:: doupdate()
@@ -179,7 +175,7 @@
 
 .. function:: erasechar()
 
-   Returns the user's current erase character.  Under Unix operating systems this
+   Return the user's current erase character.  Under Unix operating systems this
    is a property of the controlling tty of the curses program, and is not set by
    the curses library itself.
 
@@ -187,7 +183,7 @@
 .. function:: filter()
 
    The :func:`.filter` routine, if used, must be called before :func:`initscr` is
-   called.  The effect is that, during those calls, LINES is set to 1; the
+   called.  The effect is that, during those calls, :envvar:`LINES` is set to 1; the
    capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home
    string is set to the value of cr. The effect is that the cursor is confined to
    the current line, and so are screen updates.  This may be used for enabling
@@ -213,7 +209,7 @@
    method should be call to retrieve the queued mouse event, represented as a
    5-tuple ``(id, x, y, z, bstate)``. *id* is an ID value used to distinguish
    multiple devices, and *x*, *y*, *z* are the event's coordinates.  (*z* is
-   currently unused.).  *bstate* is an integer value whose bits will be set to
+   currently unused.)  *bstate* is an integer value whose bits will be set to
    indicate the type of event, and will be the bitwise OR of one or more of the
    following constants, where *n* is the button number from 1 to 4:
    :const:`BUTTONn_PRESSED`, :const:`BUTTONn_RELEASED`, :const:`BUTTONn_CLICKED`,
@@ -223,32 +219,32 @@
 
 .. function:: getsyx()
 
-   Returns the current coordinates of the virtual screen cursor in y and x.  If
+   Return the current coordinates of the virtual screen cursor in y and x.  If
    leaveok is currently true, then -1,-1 is returned.
 
 
 .. function:: getwin(file)
 
-   Reads window related data stored in the file by an earlier :func:`putwin` call.
+   Read window related data stored in the file by an earlier :func:`putwin` call.
    The routine then creates and initializes a new window using that data, returning
    the new window object.
 
 
 .. function:: has_colors()
 
-   Returns true if the terminal can display colors; otherwise, it returns false.
+   Return ``True`` if the terminal can display colors; otherwise, return ``False``.
 
 
 .. function:: has_ic()
 
-   Returns true if the terminal has insert- and delete- character capabilities.
+   Return ``True`` if the terminal has insert- and delete-character capabilities.
    This function is included for historical reasons only, as all modern software
    terminal emulators have such capabilities.
 
 
 .. function:: has_il()
 
-   Returns true if the terminal has insert- and delete-line  capabilities,  or  can
+   Return ``True`` if the terminal has insert- and delete-line capabilities, or can
    simulate  them  using scrolling regions. This function is included for
    historical reasons only, as all modern software terminal emulators have such
    capabilities.
@@ -256,7 +252,7 @@
 
 .. function:: has_key(ch)
 
-   Takes a key value *ch*, and returns true if the current terminal type recognizes
+   Take a key value *ch*, and return ``True`` if the current terminal type recognizes
    a key with that value.
 
 
@@ -265,13 +261,13 @@
    Used for half-delay mode, which is similar to cbreak mode in that characters
    typed by the user are immediately available to the program. However, after
    blocking for *tenths* tenths of seconds, an exception is raised if nothing has
-   been typed.  The value of *tenths* must be a number between 1 and 255.  Use
+   been typed.  The value of *tenths* must be a number between ``1`` and ``255``.  Use
    :func:`nocbreak` to leave half-delay mode.
 
 
 .. function:: init_color(color_number, r, g, b)
 
-   Changes the definition of a color, taking the number of the color to be changed
+   Change the definition of a color, taking the number of the color to be changed
    followed by three RGB values (for the amounts of red, green, and blue
    components).  The value of *color_number* must be between ``0`` and
    :const:`COLORS`.  Each of *r*, *g*, *b*, must be a value between ``0`` and
@@ -282,7 +278,7 @@
 
 .. function:: init_pair(pair_number, fg, bg)
 
-   Changes the definition of a color-pair.  It takes three arguments: the number of
+   Change the definition of a color-pair.  It takes three arguments: the number of
    the color-pair to be changed, the foreground color number, and the background
    color number.  The value of *pair_number* must be between ``1`` and
    ``COLOR_PAIRS - 1`` (the ``0`` color pair is wired to white on black and cannot
@@ -294,7 +290,7 @@
 
 .. function:: initscr()
 
-   Initialize the library. Returns a :class:`WindowObject` which represents the
+   Initialize the library. Return a :class:`WindowObject` which represents the
    whole screen.
 
    .. note::
@@ -303,9 +299,15 @@
       cause the interpreter to exit.
 
 
+.. function:: is_term_resized(nlines, ncols)
+
+   Return ``True`` if :func:`resize_term` would modify the window structure,
+   ``False`` otherwise.
+
+
 .. function:: isendwin()
 
-   Returns true if :func:`endwin` has been called (that is, the  curses library has
+   Return ``True`` if :func:`endwin` has been called (that is, the  curses library has
    been deinitialized).
 
 
@@ -321,14 +323,14 @@
 
 .. function:: killchar()
 
-   Returns the user's current line kill character. Under Unix operating systems
+   Return the user's current line kill character. Under Unix operating systems
    this is a property of the controlling tty of the curses program, and is not set
    by the curses library itself.
 
 
 .. function:: longname()
 
-   Returns a string containing the terminfo long name field describing the current
+   Return a string containing the terminfo long name field describing the current
    terminal.  The maximum length of a verbose description is 128 characters.  It is
    defined only after the call to :func:`initscr`.
 
@@ -341,14 +343,14 @@
 
 .. function:: mouseinterval(interval)
 
-   Sets the maximum time in milliseconds that can elapse between press and release
-   events in order for them to be recognized as a click, and returns the previous
+   Set the maximum time in milliseconds that can elapse between press and release
+   events in order for them to be recognized as a click, and return the previous
    interval value.  The default value is 200 msec, or one fifth of a second.
 
 
 .. function:: mousemask(mousemask)
 
-   Sets the mouse events to be reported, and returns a tuple ``(availmask,
+   Set the mouse events to be reported, and return a tuple ``(availmask,
    oldmask)``.   *availmask* indicates which of the specified mouse events can be
    reported; on complete failure it returns 0.  *oldmask* is the previous value of
    the given window's mouse event mask.  If this function is never called, no mouse
@@ -362,7 +364,7 @@
 
 .. function:: newpad(nlines, ncols)
 
-   Creates and returns a pointer to a new pad data structure with the given number
+   Create and return a pointer to a new pad data structure with the given number
    of lines and columns.  A pad is returned as a window object.
 
    A pad is like a window, except that it is not restricted by the screen size, and
@@ -372,9 +374,9 @@
    echoing of input) do not occur.  The :meth:`refresh` and :meth:`noutrefresh`
    methods of a pad require 6 arguments to specify the part of the pad to be
    displayed and the location on the screen to be used for the display. The
-   arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p
+   arguments are *pminrow*, *pmincol*, *sminrow*, *smincol*, *smaxrow*, *smaxcol*; the *p*
    arguments refer to the upper left corner of the pad region to be displayed and
-   the s arguments define a clipping box on the screen within which the pad region
+   the *s* arguments define a clipping box on the screen within which the pad region
    is to be displayed.
 
 
@@ -416,7 +418,7 @@
 
 .. function:: noqiflush()
 
-   When the noqiflush routine is used, normal flush of input and output queues
+   When the :func:`noqiflush` routine is used, normal flush of input and output queues
    associated with the INTR, QUIT and SUSP characters will not be done.  You may
    want to call :func:`noqiflush` in a signal handler if you want output to
    continue as though the interrupt had not occurred, after the handler exits.
@@ -429,27 +431,27 @@
 
 .. function:: pair_content(pair_number)
 
-   Returns a tuple ``(fg, bg)`` containing the colors for the requested color pair.
+   Return a tuple ``(fg, bg)`` containing the colors for the requested color pair.
    The value of *pair_number* must be between ``1`` and ``COLOR_PAIRS - 1``.
 
 
 .. function:: pair_number(attr)
 
-   Returns the number of the color-pair set by the attribute value *attr*.
+   Return the number of the color-pair set by the attribute value *attr*.
    :func:`color_pair` is the counterpart to this function.
 
 
 .. function:: putp(string)
 
-   Equivalent to ``tputs(str, 1, putchar)``; emits the value of a specified
-   terminfo capability for the current terminal.  Note that the output of putp
+   Equivalent to ``tputs(str, 1, putchar)``; emit the value of a specified
+   terminfo capability for the current terminal.  Note that the output of :func:`putp`
    always goes to standard output.
 
 
 .. function:: qiflush( [flag] )
 
-   If *flag* is false, the effect is the same as calling :func:`noqiflush`. If
-   *flag* is true, or no argument is provided, the queues will be flushed when
+   If *flag* is ``False``, the effect is the same as calling :func:`noqiflush`. If
+   *flag* is ``True``, or no argument is provided, the queues will be flushed when
    these control characters are read.
 
 
@@ -462,26 +464,55 @@
 
 .. function:: reset_prog_mode()
 
-   Restores the  terminal  to "program" mode, as previously saved  by
+   Restore the  terminal  to "program" mode, as previously saved  by
    :func:`def_prog_mode`.
 
 
 .. function:: reset_shell_mode()
 
-   Restores the  terminal  to "shell" mode, as previously saved  by
+   Restore the  terminal  to "shell" mode, as previously saved  by
    :func:`def_shell_mode`.
 
 
+.. function:: resetty()
+
+   Restore the state of the terminal modes to what it was at the last call to
+   :func:`savetty`.
+
+
+.. function:: resize_term(nlines, ncols)
+
+   Backend function used by :func:`resizeterm`, performing most of the work;
+   when resizing the windows, :func:`resize_term` blank-fills the areas that are
+   extended.  The calling application should fill in these areas with
+   appropriate data.  The :func:`resize_term` function attempts to resize all
+   windows.  However, due to the calling convention of pads, it is not possible
+   to resize these without additional interaction with the application.
+
+
+.. function:: resizeterm(nlines, ncols)
+
+   Resize the standard and current windows to the specified dimensions, and
+   adjusts other bookkeeping data used by the curses library that record the
+   window dimensions (in particular the SIGWINCH handler).
+
+
+.. function:: savetty()
+
+   Save the current state of the terminal modes in a buffer, usable by
+   :func:`resetty`.
+
+
 .. function:: setsyx(y, x)
 
-   Sets the virtual screen cursor to *y*, *x*. If *y* and *x* are both -1, then
+   Set the virtual screen cursor to *y*, *x*. If *y* and *x* are both -1, then
    leaveok is set.
 
 
 .. function:: setupterm([termstr, fd])
 
-   Initializes the terminal.  *termstr* is a string giving the terminal name; if
-   omitted, the value of the TERM environment variable will be used.  *fd* is the
+   Initialize the terminal.  *termstr* is a string giving the terminal name; if
+   omitted, the value of the :envvar:`TERM` environment variable will be used.  *fd* is the
    file descriptor to which any initialization sequences will be sent; if not
    supplied, the file descriptor for ``sys.stdout`` will be used.
 
@@ -501,19 +532,19 @@
 
 .. function:: termattrs()
 
-   Returns a logical OR of all video attributes supported by the terminal.  This
+   Return a logical OR of all video attributes supported by the terminal.  This
    information is useful when a curses program needs complete control over the
    appearance of the screen.
 
 
 .. function:: termname()
 
-   Returns the value of the environment variable TERM, truncated to 14 characters.
+   Return the value of the environment variable :envvar:`TERM`, truncated to 14 characters.
 
 
 .. function:: tigetflag(capname)
 
-   Returns the value of the Boolean capability corresponding to the terminfo
+   Return the value of the Boolean capability corresponding to the terminfo
    capability name *capname*.  The value ``-1`` is returned if *capname* is not a
    Boolean capability, or ``0`` if it is canceled or absent from the terminal
    description.
@@ -521,7 +552,7 @@
 
 .. function:: tigetnum(capname)
 
-   Returns the value of the numeric capability corresponding to the terminfo
+   Return the value of the numeric capability corresponding to the terminfo
    capability name *capname*.  The value ``-2`` is returned if *capname* is not a
    numeric capability, or ``-1`` if it is canceled or absent from the terminal
    description.
@@ -529,22 +560,22 @@
 
 .. function:: tigetstr(capname)
 
-   Returns the value of the string capability corresponding to the terminfo
+   Return the value of the string capability corresponding to the terminfo
    capability name *capname*.  ``None`` is returned if *capname* is not a string
    capability, or is canceled or absent from the terminal description.
 
 
 .. function:: tparm(str[,...])
 
-   Instantiates the string *str* with the supplied parameters, where  *str* should
-   be a parameterized string obtained from the terminfo  database.  E.g.
-   ``tparm(tigetstr("cup"), 5, 3)`` could result in  ``'\033[6;4H'``, the exact
+   Instantiate the string *str* with the supplied parameters, where *str* should
+   be a parameterized string obtained from the terminfo database.  E.g.
+   ``tparm(tigetstr("cup"), 5, 3)`` could result in ``'\033[6;4H'``, the exact
    result depending on terminal type.
 
 
 .. function:: typeahead(fd)
 
-   Specifies that the file descriptor *fd* be used for typeahead checking.  If *fd*
+   Specify that the file descriptor *fd* be used for typeahead checking.  If *fd*
    is ``-1``, then no typeahead checking is done.
 
    The curses library does "line-breakout optimization" by looking for typeahead
@@ -556,7 +587,7 @@
 
 .. function:: unctrl(ch)
 
-   Returns a string which is a printable representation of the character *ch*.
+   Return a string which is a printable representation of the character *ch*.
    Control characters are displayed as a caret followed by the character, for
    example as ``^C``. Printing characters are left as they are.
 
@@ -579,7 +610,7 @@
 .. function:: use_env(flag)
 
    If used, this function should be called before :func:`initscr` or newterm are
-   called.  When *flag* is false, the values of lines and columns specified in the
+   called.  When *flag* is ``False``, the values of lines and columns specified in the
    terminfo database will be used, even if environment variables :envvar:`LINES`
    and :envvar:`COLUMNS` (used by default) are set, or if curses is running in a
    window (in which case default behavior would be to use the window size if
@@ -595,6 +626,19 @@
    foreground color on the default background.
 
 
+.. function:: wrapper(func, ...)
+
+   Initialize curses and call another callable object, *func*, which should be the
+   rest of your curses-using application.  If the application raises an exception,
+   this function will restore the terminal to a sane state before re-raising the
+   exception and generating a traceback.  The callable object *func* is then passed
+   the main window 'stdscr' as its first argument, followed by any other arguments
+   passed to :func:`wrapper`.  Before calling *func*, :func:`wrapper` turns on
+   cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
+   if the terminal has color support.  On exit (whether normally or by exception)
+   it restores cooked mode, turns on echo, and disables the terminal keypad.
+
+
 .. _curses-window-objects:
 
 Window Objects
@@ -650,7 +694,7 @@
 
 .. method:: window.bkgd(ch[, attr])
 
-   Sets the background property of the window to the character *ch*, with
+   Set the background property of the window to the character *ch*, with
    attributes *attr*.  The change is then applied to every character position in
    that window:
 
@@ -663,7 +707,7 @@
 
 .. method:: window.bkgdset(ch[, attr])
 
-   Sets the window's background.  A window's background consists of a character and
+   Set the window's background.  A window's background consists of a character and
    any combination of attributes.  The attribute part of the background is combined
    (OR'ed) with all non-blank characters that are written into the window.  Both
    the character and attribute parts of the background are combined with the blank
@@ -708,12 +752,12 @@
 .. method:: window.box([vertch, horch])
 
    Similar to :meth:`border`, but both *ls* and *rs* are *vertch* and both *ts* and
-   bs are *horch*.  The default corner characters are always used by this function.
+   *bs* are *horch*.  The default corner characters are always used by this function.
 
 
 .. method:: window.chgat([y, x, ] [num,] attr)
 
-   Sets the attributes of *num* characters at the current cursor position, or at
+   Set the attributes of *num* characters at the current cursor position, or at
    position ``(y, x)`` if supplied. If no value of *num* is given or *num* = -1,
    the attribute will  be set on all the characters to the end of the line.  This
    function does not move the cursor. The changed line will be touched using the
@@ -723,7 +767,7 @@
 
 .. method:: window.clear()
 
-   Like :meth:`erase`, but also causes the whole window to be repainted upon next
+   Like :meth:`erase`, but also cause the whole window to be repainted upon next
    call to :meth:`refresh`.
 
 
@@ -746,7 +790,7 @@
 
 .. method:: window.cursyncup()
 
-   Updates the current cursor position of all the ancestors of the window to
+   Update the current cursor position of all the ancestors of the window to
    reflect the current cursor position of the window.
 
 
@@ -757,14 +801,14 @@
 
 .. method:: window.deleteln()
 
-   Delete the line under the cursor. All following lines are moved up by 1 line.
+   Delete the line under the cursor. All following lines are moved up by one line.
 
 
 .. method:: window.derwin([nlines, ncols,] begin_y, begin_x)
 
    An abbreviation for "derive window", :meth:`derwin` is the same as calling
    :meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin
-   of the window, rather than relative to the entire screen.  Returns a window
+   of the window, rather than relative to the entire screen.  Return a window
    object for the derived window.
 
 
@@ -776,8 +820,8 @@
 
 .. method:: window.enclose(y, x)
 
-   Tests whether the given pair of screen-relative character-cell coordinates are
-   enclosed by the given window, returning true or false.  It is useful for
+   Test whether the given pair of screen-relative character-cell coordinates are
+   enclosed by the given window, returning ``True`` or ``False``.  It is useful for
    determining what subset of the screen windows enclose the location of a mouse
    event.
 
@@ -792,6 +836,11 @@
    Return a tuple ``(y, x)`` of co-ordinates of upper-left corner.
 
 
+.. method:: window.getbkgd()
+
+   Return the given window's current background character/attribute pair.
+
+
 .. method:: window.getch([y, x])
 
    Get a character. Note that the integer returned does *not* have to be in ASCII
@@ -814,8 +863,8 @@
 
 .. method:: window.getparyx()
 
-   Returns the beginning coordinates of this window relative to its parent window
-   into two integer variables y and x.  Returns ``-1,-1`` if this window has no
+   Return the beginning coordinates of this window relative to its parent window
+   into two integer variables y and x.  Return ``-1, -1`` if this window has no
    parent.
 
 
@@ -838,8 +887,8 @@
 
 .. method:: window.idcok(flag)
 
-   If *flag* is false, curses no longer considers using the hardware insert/delete
-   character feature of the terminal; if *flag* is true, use of character insertion
+   If *flag* is ``False``, curses no longer considers using the hardware insert/delete
+   character feature of the terminal; if *flag* is ``True``, use of character insertion
    and deletion is enabled.  When curses is first initialized, use of character
    insert/delete is enabled by default.
 
@@ -852,7 +901,7 @@
 
 .. method:: window.immedok(flag)
 
-   If *flag* is true, any change in the window image automatically causes the
+   If *flag* is ``True``, any change in the window image automatically causes the
    window to be refreshed; you no longer have to call :meth:`refresh` yourself.
    However, it may degrade performance considerably, due to repeated calls to
    wrefresh.  This option is disabled by default.
@@ -872,7 +921,7 @@
 
 .. method:: window.insdelln(nlines)
 
-   Inserts *nlines* lines into the specified window above the current line.  The
+   Insert *nlines* lines into the specified window above the current line.  The
    *nlines* bottom lines are lost.  For negative *nlines*, delete *nlines* lines
    starting with the one under the cursor, and move the remaining lines up.  The
    bottom *nlines* lines are cleared.  The current cursor position remains the
@@ -881,7 +930,7 @@
 
 .. method:: window.insertln()
 
-   Insert a blank line under the cursor. All following lines are moved down by 1
+   Insert a blank line under the cursor. All following lines are moved down by one
    line.
 
 
@@ -904,23 +953,23 @@
 
 .. method:: window.instr([y, x] [, n])
 
-   Returns a string of characters, extracted from the window starting at the
+   Return a string of characters, extracted from the window starting at the
    current cursor position, or at *y*, *x* if specified. Attributes are stripped
-   from the characters.  If *n* is specified, :meth:`instr` returns return a string
+   from the characters.  If *n* is specified, :meth:`instr` returns a string
    at most *n* characters long (exclusive of the trailing NUL).
 
 
 .. method:: window.is_linetouched(line)
 
-   Returns true if the specified line was modified since the last call to
-   :meth:`refresh`; otherwise returns false.  Raises a :exc:`curses.error`
+   Return ``True`` if the specified line was modified since the last call to
+   :meth:`refresh`; otherwise return ``False``.  Raise a :exc:`curses.error`
    exception if *line* is not valid for the given window.
 
 
 .. method:: window.is_wintouched()
 
-   Returns true if the specified window was modified since the last call to
-   :meth:`refresh`; otherwise returns false.
+   Return ``True`` if the specified window was modified since the last call to
+   :meth:`refresh`; otherwise return ``False``.
 
 
 .. method:: window.keypad(yes)
@@ -946,7 +995,7 @@
 
 .. method:: window.mvderwin(y, x)
 
-   Moves the window inside its parent window.  The screen-relative parameters of
+   Move the window inside its parent window.  The screen-relative parameters of
    the window are not changed.  This routine is used to display different parts of
    the parent window at the same physical position on the screen.
 
@@ -1004,19 +1053,19 @@
 
 .. method:: window.putwin(file)
 
-   Writes all data associated with the window into the provided file object.  This
+   Write all data associated with the window into the provided file object.  This
    information can be later retrieved using the :func:`getwin` function.
 
 
 .. method:: window.redrawln(beg, num)
 
-   Indicates that the *num* screen lines, starting at line *beg*, are corrupted and
+   Indicate that the *num* screen lines, starting at line *beg*, are corrupted and
    should be completely redrawn on the next :meth:`refresh` call.
 
 
 .. method:: window.redrawwin()
 
-   Touches the entire window, causing it to be completely redrawn on the next
+   Touch the entire window, causing it to be completely redrawn on the next
    :meth:`refresh` call.
 
 
@@ -1037,6 +1086,14 @@
    *sminrow*, or *smincol* are treated as if they were zero.
 
 
+.. method:: window.resize(nlines, ncols)
+
+   Reallocate storage for a curses window to adjust its dimensions to the
+   specified values.  If either dimension is larger than the current values, the
+   window's data is filled with blanks that have the current background
+   rendition (as set by :meth:`bkgdset`) merged into them.
+
+
 .. method:: window.scroll([lines=1])
 
    Scroll the screen or scrolling region upward by *lines* lines.
@@ -1044,7 +1101,7 @@
 
 .. method:: window.scrollok(flag)
 
-   Controls what happens when the cursor of a window is moved off the edge of the
+   Control what happens when the cursor of a window is moved off the edge of the
    window or scrolling region, either as a result of a newline action on the bottom
    line, or typing the last character of the last line.  If *flag* is false, the
    cursor is left on the bottom line.  If *flag* is true, the window is scrolled up
@@ -1086,26 +1143,26 @@
 
 .. method:: window.syncdown()
 
-   Touches each location in the window that has been touched in any of its ancestor
+   Touch each location in the window that has been touched in any of its ancestor
    windows.  This routine is called by :meth:`refresh`, so it should almost never
    be necessary to call it manually.
 
 
 .. method:: window.syncok(flag)
 
-   If called with *flag* set to true, then :meth:`syncup` is called automatically
+   If called with *flag* set to ``True``, then :meth:`syncup` is called automatically
    whenever there is a change in the window.
 
 
 .. method:: window.syncup()
 
-   Touches all locations in ancestors of the window that have been changed in  the
+   Touch all locations in ancestors of the window that have been changed in  the
    window.
 
 
 .. method:: window.timeout(delay)
 
-   Sets blocking or non-blocking read behavior for the window.  If *delay* is
+   Set blocking or non-blocking read behavior for the window.  If *delay* is
    negative, blocking read is used (which will wait indefinitely for input).  If
    *delay* is zero, then non-blocking read is used, and -1 will be returned by
    :meth:`getch` if no input is waiting.  If *delay* is positive, then
@@ -1128,7 +1185,7 @@
 
 .. method:: window.untouchwin()
 
-   Marks all lines in  the  window  as unchanged since the last call to
+   Mark all lines in  the  window  as unchanged since the last call to
    :meth:`refresh`.
 
 
@@ -1587,7 +1644,7 @@
       each keystroke entered with the keystroke as a parameter; command dispatch
       is done on the result. This method returns the window contents as a
       string; whether blanks in the window are included is affected by the
-      :attr:`stripspaces` member.
+      :attr:`stripspaces` attribute.
 
 
    .. method:: do_command(ch)
@@ -1653,45 +1710,15 @@
 
    .. method:: gather()
 
-      This method returns the window contents as a string; whether blanks in the
+      Return the window contents as a string; whether blanks in the
       window are included is affected by the :attr:`stripspaces` member.
 
 
    .. attribute:: stripspaces
 
-      This data member is a flag which controls the interpretation of blanks in
+      This attribute is a flag which controls the interpretation of blanks in
       the window.  When it is on, trailing blanks on each line are ignored; any
       cursor motion that would land the cursor on a trailing blank goes to the
       end of that line instead, and trailing blanks are stripped when the window
       contents are gathered.
 
-
-:mod:`curses.wrapper` --- Terminal handler for curses programs
-==============================================================
-
-.. module:: curses.wrapper
-   :synopsis: Terminal configuration wrapper for curses programs.
-.. moduleauthor:: Eric Raymond <esr@thyrsus.com>
-.. sectionauthor:: Eric Raymond <esr@thyrsus.com>
-
-
-.. versionadded:: 1.6
-
-This module supplies one function, :func:`wrapper`, which runs another function
-which should be the rest of your curses-using application.  If the application
-raises an exception, :func:`wrapper` will restore the terminal to a sane state
-before re-raising the exception and generating a traceback.
-
-
-.. function:: wrapper(func, ...)
-
-   Wrapper function that initializes curses and calls another function, *func*,
-   restoring normal keyboard/screen behavior on error. The callable object *func*
-   is then passed the main window 'stdscr' as its first argument, followed by any
-   other arguments passed to :func:`wrapper`.
-
-Before calling the hook function, :func:`wrapper` turns on cbreak mode, turns
-off echo, enables the terminal keypad, and initializes colors if the terminal
-has color support.  On exit (whether normally or by exception) it restores
-cooked mode, turns on echo, and disables the terminal keypad.
-
Index: b/Doc/library/datetime.rst
===================================================================
--- a/Doc/library/datetime.rst	2011-07-26 15:35:39.061429163 +0400
+++ b/Doc/library/datetime.rst	2011-07-26 15:35:56.345577859 +0400
@@ -13,7 +13,7 @@
 
 The :mod:`datetime` module supplies classes for manipulating dates and times in
 both simple and complex ways.  While date and time arithmetic is supported, the
-focus of the implementation is on efficient member extraction for output
+focus of the implementation is on efficient attribute extraction for output
 formatting and manipulation. For related
 functionality, see also the :mod:`time` and :mod:`calendar` modules.
 
@@ -27,7 +27,7 @@
 work with, at the cost of ignoring some aspects of reality.
 
 For applications requiring more, :class:`datetime` and :class:`time` objects
-have an optional time zone information member, :attr:`tzinfo`, that can contain
+have an optional time zone information attribute, :attr:`tzinfo`, that can contain
 an instance of a subclass of the abstract :class:`tzinfo` class.  These
 :class:`tzinfo` objects capture information about the offset from UTC time, the
 time zone name, and whether Daylight Saving Time is in effect.  Note that no
@@ -463,9 +463,9 @@
 
 .. method:: date.replace(year, month, day)
 
-   Return a date with the same value, except for those members given new values by
-   whichever keyword arguments are specified.  For example, if ``d == date(2002,
-   12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``.
+   Return a date with the same value, except for those parameters given new
+   values by whichever keyword arguments are specified.  For example, if ``d ==
+   date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``.
 
 
 .. method:: date.timetuple()
@@ -696,11 +696,11 @@
 
 .. classmethod:: datetime.combine(date, time)
 
-   Return a new :class:`datetime` object whose date members are equal to the given
-   :class:`date` object's, and whose time and :attr:`tzinfo` members are equal to
-   the given :class:`time` object's. For any :class:`datetime` object *d*, ``d ==
-   datetime.combine(d.date(), d.timetz())``.  If date is a :class:`datetime`
-   object, its time and :attr:`tzinfo` members are ignored.
+   Return a new :class:`datetime` object whose date attributes are equal to the
+   given :class:`date` object's, and whose time and :attr:`tzinfo` attributes are
+   equal to the given :class:`time` object's. For any :class:`datetime` object
+   *d*, ``d == datetime.combine(d.date(), d.timetz())``.  If date is a
+   :class:`datetime` object, its time and :attr:`tzinfo` attributes are ignored.
 
 
 .. classmethod:: datetime.strptime(date_string, format)
@@ -795,43 +795,44 @@
 (1)
    datetime2 is a duration of timedelta removed from datetime1, moving forward in
    time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  The
-   result has the same :attr:`tzinfo` member as the input datetime, and datetime2 -
-   datetime1 == timedelta after. :exc:`OverflowError` is raised if datetime2.year
-   would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`. Note
-   that no time zone adjustments are done even if the input is an aware object.
+   result has the same :attr:`tzinfo` attribute as the input datetime, and
+   datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if
+   datetime2.year would be smaller than :const:`MINYEAR` or larger than
+   :const:`MAXYEAR`. Note that no time zone adjustments are done even if the
+   input is an aware object.
 
 (2)
    Computes the datetime2 such that datetime2 + timedelta == datetime1. As for
-   addition, the result has the same :attr:`tzinfo` member as the input datetime,
-   and no time zone adjustments are done even if the input is aware. This isn't
-   quite equivalent to datetime1 + (-timedelta), because -timedelta in isolation
-   can overflow in cases where datetime1 - timedelta does not.
+   addition, the result has the same :attr:`tzinfo` attribute as the input
+   datetime, and no time zone adjustments are done even if the input is aware.
+   This isn't quite equivalent to datetime1 + (-timedelta), because -timedelta
+   in isolation can overflow in cases where datetime1 - timedelta does not.
 
 (3)
    Subtraction of a :class:`datetime` from a :class:`datetime` is defined only if
    both operands are naive, or if both are aware.  If one is aware and the other is
    naive, :exc:`TypeError` is raised.
 
-   If both are naive, or both are aware and have the same :attr:`tzinfo` member,
-   the :attr:`tzinfo` members are ignored, and the result is a :class:`timedelta`
+   If both are naive, or both are aware and have the same :attr:`tzinfo` attribute,
+   the :attr:`tzinfo` attributes are ignored, and the result is a :class:`timedelta`
    object *t* such that ``datetime2 + t == datetime1``.  No time zone adjustments
    are done in this case.
 
-   If both are aware and have different :attr:`tzinfo` members, ``a-b`` acts as if
-   *a* and *b* were first converted to naive UTC datetimes first.  The result is
-   ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) -
-   b.utcoffset())`` except that the implementation never overflows.
+   If both are aware and have different :attr:`tzinfo` attributes, ``a-b`` acts
+   as if *a* and *b* were first converted to naive UTC datetimes first.  The
+   result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None)
+   - b.utcoffset())`` except that the implementation never overflows.
 
 (4)
    *datetime1* is considered less than *datetime2* when *datetime1* precedes
    *datetime2* in time.
 
    If one comparand is naive and the other is aware, :exc:`TypeError` is raised.
-   If both comparands are aware, and have the same :attr:`tzinfo` member, the
-   common :attr:`tzinfo` member is ignored and the base datetimes are compared.  If
-   both comparands are aware and have different :attr:`tzinfo` members, the
-   comparands are first adjusted by subtracting their UTC offsets (obtained from
-   ``self.utcoffset()``).
+   If both comparands are aware, and have the same :attr:`tzinfo` attribute, the
+   common :attr:`tzinfo` attribute is ignored and the base datetimes are
+   compared.  If both comparands are aware and have different :attr:`tzinfo`
+   attributes, the comparands are first adjusted by subtracting their UTC
+   offsets (obtained from ``self.utcoffset()``).
 
    .. note::
 
@@ -864,22 +865,22 @@
 .. method:: datetime.timetz()
 
    Return :class:`time` object with same hour, minute, second, microsecond, and
-   tzinfo members.  See also method :meth:`time`.
+   tzinfo attributes.  See also method :meth:`time`.
 
 
 .. method:: datetime.replace([year[, month[, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]]]]])
 
-   Return a datetime with the same members, except for those members given new
-   values by whichever keyword arguments are specified.  Note that ``tzinfo=None``
-   can be specified to create a naive datetime from an aware datetime with no
-   conversion of date and time members.
+   Return a datetime with the same attributes, except for those attributes given
+   new values by whichever keyword arguments are specified.  Note that
+   ``tzinfo=None`` can be specified to create a naive datetime from an aware
+   datetime with no conversion of date and time attributes.
 
 
 .. method:: datetime.astimezone(tz)
 
-   Return a :class:`datetime` object with new :attr:`tzinfo` member *tz*, adjusting
-   the date and time members so the result is the same UTC time as *self*, but in
-   *tz*'s local time.
+   Return a :class:`datetime` object with new :attr:`tzinfo` attribute *tz*,
+   adjusting the date and time attributes so the result is the same UTC time as
+   *self*, but in *tz*'s local time.
 
    *tz* must be an instance of a :class:`tzinfo` subclass, and its
    :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must
@@ -887,18 +888,18 @@
    not return ``None``).
 
    If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no
-   adjustment of date or time members is performed. Else the result is local time
-   in time zone *tz*, representing the same UTC time as *self*:  after ``astz =
-   dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same date
-   and time members as ``dt - dt.utcoffset()``. The discussion of class
-   :class:`tzinfo` explains the cases at Daylight Saving Time transition boundaries
-   where this cannot be achieved (an issue only if *tz* models both standard and
-   daylight time).
+   adjustment of date or time attributes is performed. Else the result is local
+   time in time zone *tz*, representing the same UTC time as *self*:  after
+   ``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have
+   the same date and time attributes as ``dt - dt.utcoffset()``. The discussion
+   of class :class:`tzinfo` explains the cases at Daylight Saving Time transition
+   boundaries where this cannot be achieved (an issue only if *tz* models both
+   standard and daylight time).
 
    If you merely want to attach a time zone object *tz* to a datetime *dt* without
-   adjustment of date and time members, use ``dt.replace(tzinfo=tz)``.  If you
+   adjustment of date and time attributes, use ``dt.replace(tzinfo=tz)``.  If you
    merely want to remove the time zone object from an aware datetime *dt* without
-   conversion of date and time members, use ``dt.replace(tzinfo=None)``.
+   conversion of date and time attributes, use ``dt.replace(tzinfo=None)``.
 
    Note that the default :meth:`tzinfo.fromutc` method can be overridden in a
    :class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`.
@@ -1209,14 +1210,14 @@
 * comparison of :class:`time` to :class:`time`, where *a* is considered less
   than *b* when *a* precedes *b* in time.  If one comparand is naive and the other
   is aware, :exc:`TypeError` is raised.  If both comparands are aware, and have
-  the same :attr:`tzinfo` member, the common :attr:`tzinfo` member is ignored and
-  the base times are compared.  If both comparands are aware and have different
-  :attr:`tzinfo` members, the comparands are first adjusted by subtracting their
-  UTC offsets (obtained from ``self.utcoffset()``). In order to stop mixed-type
-  comparisons from falling back to the default comparison by object address, when
-  a :class:`time` object is compared to an object of a different type,
-  :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The
-  latter cases return :const:`False` or :const:`True`, respectively.
+  the same :attr:`tzinfo` attribute, the common :attr:`tzinfo` attribute is
+  ignored and the base times are compared.  If both comparands are aware and
+  have different :attr:`tzinfo` attributes, the comparands are first adjusted by
+  subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order
+  to stop mixed-type comparisons from falling back to the default comparison by
+  object address, when a :class:`time` object is compared to an object of a
+  different type, :exc:`TypeError` is raised unless the comparison is ``==`` or
+  ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively.
 
 * hash, use as dict key
 
@@ -1231,10 +1232,10 @@
 
 .. method:: time.replace([hour[, minute[, second[, microsecond[, tzinfo]]]]])
 
-   Return a :class:`time` with the same value, except for those members given new
-   values by whichever keyword arguments are specified.  Note that ``tzinfo=None``
-   can be specified to create a naive :class:`time` from an aware :class:`time`,
-   without conversion of the time members.
+   Return a :class:`time` with the same value, except for those attributes given
+   new values by whichever keyword arguments are specified.  Note that
+   ``tzinfo=None`` can be specified to create a naive :class:`time` from an
+   aware :class:`time`, without conversion of the time attributes.
 
 
 .. method:: time.isoformat()
@@ -1317,7 +1318,7 @@
 
 An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the
 constructors for :class:`datetime` and :class:`time` objects. The latter objects
-view their members as being in local time, and the :class:`tzinfo` object
+view their attributes as being in local time, and the :class:`tzinfo` object
 supports methods revealing offset of local time from UTC, the name of the time
 zone, and DST offset, all relative to a date or time object passed to them.
 
@@ -1362,9 +1363,9 @@
    already been added to the UTC offset returned by :meth:`utcoffset`, so there's
    no need to consult :meth:`dst` unless you're interested in obtaining DST info
    separately.  For example, :meth:`datetime.timetuple` calls its :attr:`tzinfo`
-   member's :meth:`dst` method to determine how the :attr:`tm_isdst` flag should be
-   set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for DST changes
-   when crossing time zones.
+   attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag
+   should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for
+   DST changes when crossing time zones.
 
    An instance *tz* of a :class:`tzinfo` subclass that models both standard and
    daylight times must be consistent in this sense:
@@ -1440,10 +1441,10 @@
 .. method:: tzinfo.fromutc(self, dt)
 
    This is called from the default :class:`datetime.astimezone()` implementation.
-   When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time members
-   are to be viewed as expressing a UTC time.  The purpose of :meth:`fromutc` is to
-   adjust the date and time members, returning an equivalent datetime in *self*'s
-   local time.
+   When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time
+   attributes are to be viewed as expressing a UTC time.  The purpose of
+   :meth:`fromutc` is to adjust the date and time attributes, returning an
+   equivalent datetime in *self*'s local time.
 
    Most :class:`tzinfo` subclasses should be able to inherit the default
    :meth:`fromutc` implementation without problems.  It's strong enough to handle
Index: b/Doc/library/decimal.rst
===================================================================
--- a/Doc/library/decimal.rst	2011-07-26 15:35:39.886950100 +0400
+++ b/Doc/library/decimal.rst	2011-07-26 15:35:56.365304685 +0400
@@ -742,7 +742,7 @@
 
       Normalize the number by stripping the rightmost trailing zeros and
       converting any result equal to :const:`Decimal('0')` to
-      :const:`Decimal('0e0')`. Used for producing canonical values for members
+      :const:`Decimal('0e0')`. Used for producing canonical values for attributes
       of an equivalence class. For example, ``Decimal('32.100')`` and
       ``Decimal('0.321000e+2')`` both normalize to the equivalent value
       ``Decimal('32.1')``.
Index: b/Doc/library/doctest.rst
===================================================================
--- a/Doc/library/doctest.rst	2011-07-26 15:35:38.782379892 +0400
+++ b/Doc/library/doctest.rst	2011-07-26 15:35:56.392094068 +0400
@@ -1199,12 +1199,11 @@
 .. class:: DocTest(examples, globs, name, filename, lineno, docstring)
 
    A collection of doctest examples that should be run in a single namespace.  The
-   constructor arguments are used to initialize the member variables of the same
-   names.
+   constructor arguments are used to initialize the attributes of the same names.
 
    .. versionadded:: 2.4
 
-   :class:`DocTest` defines the following member variables.  They are initialized by
+   :class:`DocTest` defines the following attributes.  They are initialized by
    the constructor, and should not be modified directly.
 
 
@@ -1257,12 +1256,12 @@
 .. class:: Example(source, want[, exc_msg][, lineno][, indent][, options])
 
    A single interactive example, consisting of a Python statement and its expected
-   output.  The constructor arguments are used to initialize the member variables
-   of the same names.
+   output.  The constructor arguments are used to initialize the attributes of the
+   same names.
 
    .. versionadded:: 2.4
 
-   :class:`Example` defines the following member variables.  They are initialized by
+   :class:`Example` defines the following attributes.  They are initialized by
    the constructor, and should not be modified directly.
 
 
@@ -1770,9 +1769,9 @@
 
    An exception raised by :class:`DocTestRunner` to signal that a doctest example's
    actual output did not match its expected output. The constructor arguments are
-   used to initialize the member variables of the same names.
+   used to initialize the attributes of the same names.
 
-:exc:`DocTestFailure` defines the following member variables:
+:exc:`DocTestFailure` defines the following attributes:
 
 
 .. attribute:: DocTestFailure.test
@@ -1794,9 +1793,9 @@
 
    An exception raised by :class:`DocTestRunner` to signal that a doctest
    example raised an unexpected exception.  The constructor arguments are used
-   to initialize the member variables of the same names.
+   to initialize the attributes of the same names.
 
-:exc:`UnexpectedException` defines the following member variables:
+:exc:`UnexpectedException` defines the following attributes:
 
 
 .. attribute:: UnexpectedException.test
Index: b/Doc/library/functions.rst
===================================================================
--- a/Doc/library/functions.rst	2011-07-26 15:35:37.278595651 +0400
+++ b/Doc/library/functions.rst	2011-07-26 15:35:56.399653853 +0400
@@ -298,19 +298,18 @@
    The resulting list is sorted alphabetically.  For example:
 
       >>> import struct
-      >>> dir()   # doctest: +SKIP
+      >>> dir()   # show the names in the module namespace
       ['__builtins__', '__doc__', '__name__', 'struct']
-      >>> dir(struct)   # doctest: +NORMALIZE_WHITESPACE
+      >>> dir(struct)   # show the names in the struct module
       ['Struct', '__builtins__', '__doc__', '__file__', '__name__',
        '__package__', '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',
        'unpack', 'unpack_from']
-      >>> class Foo(object):
-      ...     def __dir__(self):
-      ...         return ["kan", "ga", "roo"]
-      ...
-      >>> f = Foo()
-      >>> dir(f)
-      ['ga', 'kan', 'roo']
+      >>> class Shape(object):
+              def __dir__(self):
+                  return ['area', 'perimeter', 'location']
+      >>> s = Shape()
+      >>> dir(s)
+      ['area', 'perimeter', 'location']
 
    .. note::
 
@@ -342,16 +341,21 @@
    :term:`iterator`, or some other object which supports iteration.  The
    :meth:`!next` method of the iterator returned by :func:`enumerate` returns a
    tuple containing a count (from *start* which defaults to 0) and the
-   corresponding value obtained from iterating over *iterable*.
-   :func:`enumerate` is useful for obtaining an indexed series: ``(0, seq[0])``,
-   ``(1, seq[1])``, ``(2, seq[2])``, .... For example:
-
-      >>> for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']):
-      ...     print i, season
-      0 Spring
-      1 Summer
-      2 Fall
-      3 Winter
+   values obtained from iterating over *sequence*::
+
+      >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
+      >>> list(enumerate(seasons))
+      [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
+      >>> list(enumerate(seasons, start=1))
+      [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
+
+   Equivalent to::
+
+      def enumerate(sequence, start=0):
+          n = start
+          for elem in sequence:
+              yield n, elem
+              n += 1
 
    .. versionadded:: 2.3
    .. versionadded:: 2.6
@@ -586,13 +590,12 @@
 
    Equivalent to ``eval(raw_input(prompt))``.
 
-   .. warning::
+   .. note::
 
-      This function is not safe from user errors!  It expects a valid Python
-      expression as input; if the input is not syntactically valid, a
-      :exc:`SyntaxError` will be raised. Other exceptions may be raised if there is an
-      error during evaluation.  (On the other hand, sometimes this is exactly what you
-      need when writing a quick script for expert use.)
+      This function does not catch user errors.  It expects a valid Python
+      expression as input. If the input is not syntactically valid, a
+      :exc:`SyntaxError` will be raised. Other exceptions may be raised if there
+      is an error during evaluation.
 
    If the :mod:`readline` module was loaded, then :func:`input` will use it to
    provide elaborate line editing and history features.
@@ -660,10 +663,10 @@
 
    One useful application of the second form of :func:`iter` is to read lines of
    a file until a certain line is reached.  The following example reads a file
-   until ``"STOP"`` is reached: ::
+   until the :meth:`readline` method returns an empty string::
 
-      with open("mydata.txt") as fp:
-          for line in iter(fp.readline, "STOP"):
+      with open('mydata.txt') as fp:
+          for line in iter(fp.readline, ''):
               process_line(line)
 
    .. versionadded:: 2.2
@@ -1241,8 +1244,9 @@
    It can be called either on the class (such as ``C.f()``) or on an instance (such
    as ``C().f()``).  The instance is ignored except for its class.
 
-   Static methods in Python are similar to those found in Java or C++. For a more
-   advanced concept, see :func:`classmethod` in this section.
+   Static methods in Python are similar to those found in Java or C++. Also see
+   :func:`classmethod` for a variant that is useful for creating alternate
+   class constructors.
 
    For more information on static methods, consult the documentation on the
    standard type hierarchy in :ref:`types`.
@@ -1335,6 +1339,10 @@
    argument form specifies the arguments exactly and makes the appropriate
    references.
 
+   For practical suggestions on how to design cooperative classes using
+   :func:`super`, see `guide to using super()
+   <http://rhettinger.wordpress.com/2011/05/26/super-considered-super/>`_.
+
    .. versionadded:: 2.2
 
 
Index: b/Doc/library/gzip.rst
===================================================================
--- a/Doc/library/gzip.rst	2011-07-26 15:35:38.926498910 +0400
+++ b/Doc/library/gzip.rst	2011-07-26 15:35:56.403487588 +0400
@@ -58,7 +58,7 @@
    time is used.  This module ignores the timestamp when decompressing;
    however, some programs, such as :program:`gunzip`\ , make use of it.
    The format of the timestamp is the same as that of the return value of
-   ``time.time()`` and of the ``st_mtime`` member of the object returned
+   ``time.time()`` and of the ``st_mtime`` attribute of the object returned
    by ``os.stat()``.
 
    Calling a :class:`GzipFile` object's :meth:`close` method does not close
Index: b/Doc/library/htmllib.rst
===================================================================
--- a/Doc/library/htmllib.rst	2011-07-26 15:35:39.606952375 +0400
+++ b/Doc/library/htmllib.rst	2011-07-26 15:35:56.406427586 +0400
@@ -168,7 +168,7 @@
 
 This module defines three dictionaries, ``name2codepoint``, ``codepoint2name``,
 and ``entitydefs``. ``entitydefs`` is used by the :mod:`htmllib` module to
-provide the :attr:`entitydefs` member of the :class:`HTMLParser` class.  The
+provide the :attr:`entitydefs` attribute of the :class:`HTMLParser` class.  The
 definition provided here contains all the entities defined by XHTML 1.0  that
 can be handled using simple textual substitution in the Latin-1 character set
 (ISO-8859-1).
Index: b/Doc/library/io.rst
===================================================================
--- a/Doc/library/io.rst	2011-07-26 15:35:37.827862621 +0400
+++ b/Doc/library/io.rst	2011-07-26 15:35:56.423377622 +0400
@@ -407,8 +407,8 @@
    :class:`RawIOBase` implementation, but wrap one, like
    :class:`BufferedWriter` and :class:`BufferedReader` do.
 
-   :class:`BufferedIOBase` provides or overrides these members in addition to
-   those from :class:`IOBase`:
+   :class:`BufferedIOBase` provides or overrides these methods and attribute in
+   addition to those from :class:`IOBase`:
 
    .. attribute:: raw
 
Index: b/Doc/library/logging.rst
===================================================================
--- a/Doc/library/logging.rst	2011-07-26 15:35:38.236820826 +0400
+++ b/Doc/library/logging.rst	2011-07-26 15:35:56.440028747 +0400
@@ -416,6 +416,13 @@
       record. Otherwise, the ISO8601 format is used.  The resulting string is
       returned.
 
+      This function uses a user-configurable function to convert the creation
+      time to a tuple. By default, :func:`time.localtime` is used; to change
+      this for a particular formatter instance, set the ``converter`` attribute
+      to a function with the same signature as :func:`time.localtime` or
+      :func:`time.gmtime`. To change it for all formatters, for example if you
+      want all logging times to be shown in GMT, set the ``converter``
+      attribute in the ``Formatter`` class.
 
    .. method:: formatException(exc_info)
 
@@ -491,6 +498,9 @@
    :param name:  The name of the logger used to log the event represented by
                  this LogRecord.
    :param level: The numeric level of the logging event (one of DEBUG, INFO etc.)
+                 Note that this is converted to *two* attributes of the LogRecord:
+                 ``levelno`` for the numeric value and ``levelname`` for the
+                 corresponding level name.
    :param pathname: The full pathname of the source file where the logging call
                     was made.
    :param lineno: The line number in the source file where the logging call was
Index: b/Doc/library/os.path.rst
===================================================================
--- a/Doc/library/os.path.rst	2011-07-26 15:35:39.743037938 +0400
+++ b/Doc/library/os.path.rst	2011-07-26 15:35:56.444301735 +0400
@@ -196,10 +196,11 @@
    path, all previous components (on Windows, including the previous drive letter,
    if there was one) are thrown away, and joining continues.  The return value is
    the concatenation of *path1*, and optionally *path2*, etc., with exactly one
-   directory separator (``os.sep``) inserted between components, unless *path2* is
-   empty.  Note that on Windows, since there is a current directory for each drive,
-   ``os.path.join("c:", "foo")`` represents a path relative to the current
-   directory on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\foo`.
+   directory separator (``os.sep``) following each non-empty part except the last.
+   (This means that an empty last part will result in a path that ends with a
+   separator.)  Note that on Windows, since there is a current directory for
+   each drive, ``os.path.join("c:", "foo")`` represents a path relative to the
+   current directory on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\foo`.
 
 
 .. function:: normcase(path)
Index: b/Doc/library/os.rst
===================================================================
--- a/Doc/library/os.rst	2011-07-26 15:35:40.438597890 +0400
+++ b/Doc/library/os.rst	2011-07-26 15:35:56.452016821 +0400
@@ -1014,6 +1014,8 @@
    * :data:`stat.UF_APPEND`
    * :data:`stat.UF_OPAQUE`
    * :data:`stat.UF_NOUNLINK`
+   * :data:`stat.UF_COMPRESSED`
+   * :data:`stat.UF_HIDDEN`
    * :data:`stat.SF_ARCHIVED`
    * :data:`stat.SF_IMMUTABLE`
    * :data:`stat.SF_APPEND`
@@ -1386,11 +1388,12 @@
 
    .. note::
 
-      The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, and
-      :attr:`st_ctime` members depends on the operating system and the file system.
-      For example, on Windows systems using the FAT or FAT32 file systems,
-      :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` has only 1-day
-      resolution.  See your operating system documentation for details.
+      The exact meaning and resolution of the :attr:`st_atime`,
+      :attr:`st_mtime`, and :attr:`st_ctime` attributes depend on the operating
+      system and the file system. For example, on Windows systems using the FAT
+      or FAT32 file systems, :attr:`st_mtime` has 2-second resolution, and
+      :attr:`st_atime` has only 1-day resolution.  See your operating system
+      documentation for details.
 
    For backward compatibility, the return value of :func:`~os.stat` is also accessible
    as a tuple of at least 10 integers giving the most important (and portable)
@@ -1663,8 +1666,9 @@
 
    Generate a :const:`SIGABRT` signal to the current process.  On Unix, the default
    behavior is to produce a core dump; on Windows, the process immediately returns
-   an exit code of ``3``.  Be aware that programs which use :func:`signal.signal`
-   to register a handler for :const:`SIGABRT` will behave differently.
+   an exit code of ``3``.  Be aware that calling this function will not call the
+   Python signal handler registered for :const:`SIGABRT` with
+   :func:`signal.signal`.
 
    Availability: Unix, Windows.
 
Index: b/Doc/library/pyclbr.rst
===================================================================
--- a/Doc/library/pyclbr.rst	2011-07-26 15:35:39.331746541 +0400
+++ b/Doc/library/pyclbr.rst	2011-07-26 15:35:56.455502585 +0400
@@ -43,7 +43,7 @@
 
 The :class:`Class` objects used as values in the dictionary returned by
 :func:`readmodule` and :func:`readmodule_ex` provide the following data
-members:
+attributes:
 
 
 .. attribute:: Class.module
@@ -87,7 +87,7 @@
 ----------------
 
 The :class:`Function` objects used as values in the dictionary returned by
-:func:`readmodule_ex` provide the following data members:
+:func:`readmodule_ex` provide the following attributes:
 
 
 .. attribute:: Function.module
Index: b/Doc/library/repr.rst
===================================================================
--- a/Doc/library/repr.rst	2011-07-26 15:35:37.686159208 +0400
+++ b/Doc/library/repr.rst	2011-07-26 15:35:56.460012255 +0400
@@ -49,7 +49,7 @@
 Repr Objects
 ------------
 
-:class:`Repr` instances provide several members which can be used to provide
+:class:`Repr` instances provide several attributes which can be used to provide
 size limits for the representations of different object types,  and methods
 which format specific object types.
 
Index: b/Doc/library/shlex.rst
===================================================================
--- a/Doc/library/shlex.rst	2011-07-26 15:35:37.964446024 +0400
+++ b/Doc/library/shlex.rst	2011-07-26 15:35:56.467713580 +0400
@@ -28,8 +28,8 @@
 
    Split the string *s* using shell-like syntax. If *comments* is :const:`False`
    (the default), the parsing of comments in the given string will be disabled
-   (setting the :attr:`commenters` member of the :class:`shlex` instance to the
-   empty string).  This function operates in POSIX mode by default, but uses
+   (setting the :attr:`commenters` attribute of the :class:`shlex` instance to
+   the empty string).  This function operates in POSIX mode by default, but uses
    non-POSIX mode if the *posix* argument is false.
 
    .. versionadded:: 2.3
@@ -53,7 +53,7 @@
    :meth:`readline` methods, or a string (strings are accepted since Python 2.3).
    If no argument is given, input will be taken from ``sys.stdin``.  The second
    optional argument is a filename string, which sets the initial value of the
-   :attr:`infile` member.  If the *instream* argument is omitted or equal to
+   :attr:`infile` attribute.  If the *instream* argument is omitted or equal to
    ``sys.stdin``, this second argument defaults to "stdin".  The *posix* argument
    was introduced in Python 2.3, and defines the operational mode.  When *posix* is
    not true (default), the :class:`shlex` instance will operate in compatibility
@@ -221,8 +221,8 @@
 
 .. attribute:: shlex.source
 
-   This member is ``None`` by default.  If you assign a string to it, that string
-   will be recognized as a lexical-level inclusion request similar to the
+   This attribute is ``None`` by default.  If you assign a string to it, that
+   string will be recognized as a lexical-level inclusion request similar to the
    ``source`` keyword in various shells.  That is, the immediately following token
    will opened as a filename and input taken from that stream until EOF, at which
    point the :meth:`close` method of that stream will be called and the input
@@ -232,7 +232,7 @@
 
 .. attribute:: shlex.debug
 
-   If this member is numeric and ``1`` or more, a :class:`shlex` instance will
+   If this attribute is numeric and ``1`` or more, a :class:`shlex` instance will
    print verbose progress output on its behavior.  If you need to use this, you can
    read the module source code to learn the details.
 
Index: b/Doc/library/socketserver.rst
===================================================================
--- a/Doc/library/socketserver.rst	2011-07-26 15:35:38.376152156 +0400
+++ b/Doc/library/socketserver.rst	2011-07-26 15:35:56.501812689 +0400
@@ -85,7 +85,7 @@
    class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass
 
 The mix-in class must come first, since it overrides a method defined in
-:class:`UDPServer`.  Setting the various member variables also changes the
+:class:`UDPServer`.  Setting the various attributes also change the
 behavior of the underlying server mechanism.
 
 To implement a service, you must derive a class from :class:`BaseRequestHandler`
Index: b/Doc/library/sqlite3.rst
===================================================================
--- a/Doc/library/sqlite3.rst	2011-07-26 15:35:41.356433159 +0400
+++ b/Doc/library/sqlite3.rst	2011-07-26 15:35:56.507472764 +0400
@@ -378,6 +378,8 @@
 
    .. literalinclude:: ../includes/sqlite3/load_extension.py
 
+   Loadable extensions are disabled by default. See [#f1]_
+
 .. method:: Connection.load_extension(path)
 
    .. versionadded:: 2.7
@@ -386,6 +388,8 @@
    enable extension loading with :meth:`enable_load_extension` before you can
    use this routine.
 
+   Loadable extensions are disabled by default. See [#f1]_
+
 .. attribute:: Connection.row_factory
 
    You can change this attribute to a callable that accepts the cursor and the
@@ -600,42 +604,42 @@
 
 Let's assume we initialize a table as in the example given above::
 
-    conn = sqlite3.connect(":memory:")
-    c = conn.cursor()
-    c.execute('''create table stocks
-    (date text, trans text, symbol text,
-     qty real, price real)''')
-    c.execute("""insert into stocks
-              values ('2006-01-05','BUY','RHAT',100,35.14)""")
-    conn.commit()
-    c.close()
+   conn = sqlite3.connect(":memory:")
+   c = conn.cursor()
+   c.execute('''create table stocks
+   (date text, trans text, symbol text,
+    qty real, price real)''')
+   c.execute("""insert into stocks
+             values ('2006-01-05','BUY','RHAT',100,35.14)""")
+   conn.commit()
+   c.close()
 
 Now we plug :class:`Row` in::
 
-    >>> conn.row_factory = sqlite3.Row
-    >>> c = conn.cursor()
-    >>> c.execute('select * from stocks')
-    <sqlite3.Cursor object at 0x7f4e7dd8fa80>
-    >>> r = c.fetchone()
-    >>> type(r)
-    <type 'sqlite3.Row'>
-    >>> r
-    (u'2006-01-05', u'BUY', u'RHAT', 100.0, 35.14)
-    >>> len(r)
-    5
-    >>> r[2]
-    u'RHAT'
-    >>> r.keys()
-    ['date', 'trans', 'symbol', 'qty', 'price']
-    >>> r['qty']
-    100.0
-    >>> for member in r: print member
-    ...
-    2006-01-05
-    BUY
-    RHAT
-    100.0
-    35.14
+   >>> conn.row_factory = sqlite3.Row
+   >>> c = conn.cursor()
+   >>> c.execute('select * from stocks')
+   <sqlite3.Cursor object at 0x7f4e7dd8fa80>
+   >>> r = c.fetchone()
+   >>> type(r)
+   <type 'sqlite3.Row'>
+   >>> r
+   (u'2006-01-05', u'BUY', u'RHAT', 100.0, 35.14)
+   >>> len(r)
+   5
+   >>> r[2]
+   u'RHAT'
+   >>> r.keys()
+   ['date', 'trans', 'symbol', 'qty', 'price']
+   >>> r['qty']
+   100.0
+   >>> for member in r: print member
+   ...
+   2006-01-05
+   BUY
+   RHAT
+   100.0
+   35.14
 
 
 .. _sqlite3-types:
@@ -893,3 +897,12 @@
 
 The only exception is calling the :meth:`~Connection.interrupt` method, which
 only makes sense to call from a different thread.
+
+.. rubric:: Footnotes
+
+.. [#f1] The sqlite3 module is not built with loadable extension support by
+   default, because some platforms (notably Mac OS X) have SQLite libraries
+   which are compiled without this feature. To get loadable extension support,
+   you must modify setup.py and remove the line that sets
+   SQLITE_OMIT_LOAD_EXTENSION.
+
Index: b/Doc/library/stat.rst
===================================================================
--- a/Doc/library/stat.rst	2011-07-26 15:35:37.550567764 +0400
+++ b/Doc/library/stat.rst	2011-07-26 15:35:56.510861498 +0400
@@ -306,11 +306,19 @@
 
 .. data:: UF_OPAQUE
 
-   The file may not be renamed or deleted.
+   The directory is opaque when viewed through a union stack.
 
 .. data:: UF_NOUNLINK
 
-   The directory is opaque when viewed through a union stack.
+   The file may not be renamed or deleted.
+
+.. data:: UF_COMPRESSED
+
+   The file is stored compressed (Mac OS X 10.6+).
+
+.. data:: UF_HIDDEN
+
+   The file should not be displayed in a GUI (Mac OS X 10.5+).
 
 .. data:: SF_ARCHIVED
 
Index: b/Doc/library/stdtypes.rst
===================================================================
--- a/Doc/library/stdtypes.rst	2011-07-26 15:35:38.102430611 +0400
+++ b/Doc/library/stdtypes.rst	2011-07-26 15:35:56.519158421 +0400
@@ -2787,7 +2787,7 @@
 foo`` does not require a module object named *foo* to exist, rather it requires
 an (external) *definition* for a module named *foo* somewhere.)
 
-A special member of every module is :attr:`__dict__`. This is the dictionary
+A special attribute of every module is :attr:`__dict__`. This is the dictionary
 containing the module's symbol table. Modifying this dictionary will actually
 change the module's symbol table, but direct assignment to the :attr:`__dict__`
 attribute is not possible (you can write ``m.__dict__['a'] = 1``, which defines
Index: b/Doc/library/subprocess.rst
===================================================================
--- a/Doc/library/subprocess.rst	2011-07-26 15:35:39.470075947 +0400
+++ b/Doc/library/subprocess.rst	2011-07-26 15:35:56.524584775 +0400
@@ -428,38 +428,39 @@
 
    .. attribute:: dwFlags
 
-      A bit field that determines whether certain :class:`STARTUPINFO` members
-      are used when the process creates a window. ::
+      A bit field that determines whether certain :class:`STARTUPINFO`
+      attributes are used when the process creates a window. ::
 
          si = subprocess.STARTUPINFO()
          si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess.STARTF_USESHOWWINDOW
 
    .. attribute:: hStdInput
 
-      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is
-      the standard input handle for the process. If :data:`STARTF_USESTDHANDLES`
-      is not specified, the default for standard input is the keyboard buffer.
+      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute
+      is the standard input handle for the process. If
+      :data:`STARTF_USESTDHANDLES` is not specified, the default for standard
+      input is the keyboard buffer.
 
    .. attribute:: hStdOutput
 
-      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is
-      the standard output handle for the process. Otherwise, this member is
-      ignored and the default for standard output is the console window's
+      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute
+      is the standard output handle for the process. Otherwise, this attribute
+      is ignored and the default for standard output is the console window's
       buffer.
 
    .. attribute:: hStdError
 
-      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is
-      the standard error handle for the process. Otherwise, this member is
+      If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute
+      is the standard error handle for the process. Otherwise, this attribute is
       ignored and the default for standard error is the console window's buffer.
 
    .. attribute:: wShowWindow
 
-      If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this member
+      If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this attribute
       can be any of the values that can be specified in the ``nCmdShow``
       parameter for the
       `ShowWindow <http://msdn.microsoft.com/en-us/library/ms633548(v=vs.85).aspx>`__
-      function, except for ``SW_SHOWDEFAULT``. Otherwise, this member is
+      function, except for ``SW_SHOWDEFAULT``. Otherwise, this attribute is
       ignored.
 
       :data:`SW_HIDE` is provided for this attribute. It is used when
@@ -493,12 +494,12 @@
 .. data:: STARTF_USESTDHANDLES
 
    Specifies that the :attr:`STARTUPINFO.hStdInput`,
-   :attr:`STARTUPINFO.hStdOutput`, and :attr:`STARTUPINFO.hStdError` members
+   :attr:`STARTUPINFO.hStdOutput`, and :attr:`STARTUPINFO.hStdError` attributes
    contain additional information.
 
 .. data:: STARTF_USESHOWWINDOW
 
-   Specifies that the :attr:`STARTUPINFO.wShowWindow` member contains
+   Specifies that the :attr:`STARTUPINFO.wShowWindow` attribute contains
    additional information.
 
 .. data:: CREATE_NEW_CONSOLE
Index: b/Doc/library/tempfile.rst
===================================================================
--- a/Doc/library/tempfile.rst	2011-07-26 15:35:40.706354491 +0400
+++ b/Doc/library/tempfile.rst	2011-07-26 15:35:56.527924902 +0400
@@ -61,7 +61,7 @@
    This function operates exactly as :func:`TemporaryFile` does, except that
    the file is guaranteed to have a visible name in the file system (on
    Unix, the directory entry is not unlinked).  That name can be retrieved
-   from the :attr:`name` member of the file object.  Whether the name can be
+   from the :attr:`name` attribute of the file object.  Whether the name can be
    used to open the file a second time, while the named temporary file is
    still open, varies across platforms (it can be so used on Unix; it cannot
    on Windows NT or later).  If *delete* is true (the default), the file is
Index: b/Doc/library/urllib.rst
===================================================================
--- a/Doc/library/urllib.rst	2011-07-26 15:35:40.025501057 +0400
+++ b/Doc/library/urllib.rst	2011-07-26 15:35:56.533313890 +0400
@@ -210,7 +210,7 @@
 
    Replace special characters in *string* using the ``%xx`` escape. Letters,
    digits, and the characters ``'_.-'`` are never quoted. By default, this
-   function is intended for quoting the path section of the URL.The optional
+   function is intended for quoting the path section of the URL. The optional
    *safe* parameter specifies additional characters that should not be quoted
    --- its default value is ``'/'``.
 
Index: b/Doc/library/urllib2.rst
===================================================================
--- a/Doc/library/urllib2.rst	2011-07-26 15:35:40.986644612 +0400
+++ b/Doc/library/urllib2.rst	2011-07-26 15:35:56.537833548 +0400
@@ -90,7 +90,7 @@
    :class:`HTTPSHandler` will also be added.
 
    Beginning in Python 2.3, a :class:`BaseHandler` subclass may also change its
-   :attr:`handler_order` member variable to modify its position in the handlers
+   :attr:`handler_order` attribute to modify its position in the handlers
    list.
 
 The following exceptions are raised as appropriate:
@@ -495,7 +495,7 @@
 
    Remove any parents.
 
-The following members and methods should only be used by classes derived from
+The following attributes and methods should only be used by classes derived from
 :class:`BaseHandler`.
 
 .. note::
Index: b/Doc/library/xdrlib.rst
===================================================================
--- a/Doc/library/xdrlib.rst	2011-07-26 15:35:39.197068368 +0400
+++ b/Doc/library/xdrlib.rst	2011-07-26 15:35:56.541798302 +0400
@@ -257,7 +257,7 @@
 
 .. exception:: Error
 
-   The base exception class.  :exc:`Error` has a single public data member
+   The base exception class.  :exc:`Error` has a single public attribute
    :attr:`msg` containing the description of the error.
 
 
Index: b/Doc/library/xmlrpclib.rst
===================================================================
--- a/Doc/library/xmlrpclib.rst	2011-07-26 15:35:40.161042541 +0400
+++ b/Doc/library/xmlrpclib.rst	2011-07-26 15:35:56.546093795 +0400
@@ -148,7 +148,7 @@
 :class:`Fault` or :class:`ProtocolError` object indicating an error.
 
 Servers that support the XML introspection API support some common methods
-grouped under the reserved :attr:`system` member:
+grouped under the reserved :attr:`system` attribute:
 
 
 .. method:: ServerProxy.system.listMethods()
@@ -341,7 +341,7 @@
 -------------
 
 A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. Fault
-objects have the following members:
+objects have the following attributes:
 
 
 .. attribute:: Fault.faultCode
@@ -390,7 +390,7 @@
 
 A :class:`ProtocolError` object describes a protocol error in the underlying
 transport layer (such as a 404 'not found' error if the server named by the URI
-does not exist).  It has the following members:
+does not exist).  It has the following attributes:
 
 
 .. attribute:: ProtocolError.url
Index: b/Doc/library/zipimport.rst
===================================================================
--- a/Doc/library/zipimport.rst	2011-07-26 15:35:38.646282908 +0400
+++ b/Doc/library/zipimport.rst	2011-07-26 15:35:56.549027832 +0400
@@ -12,11 +12,11 @@
 This module adds the ability to import Python modules (:file:`\*.py`,
 :file:`\*.py[co]`) and packages from ZIP-format archives. It is usually not
 needed to use the :mod:`zipimport` module explicitly; it is automatically used
-by the built-in :keyword:`import` mechanism for ``sys.path`` items that are paths
+by the built-in :keyword:`import` mechanism for :data:`sys.path` items that are paths
 to ZIP archives.
 
-Typically, ``sys.path`` is a list of directory names as strings.  This module
-also allows an item of ``sys.path`` to be a string naming a ZIP file archive.
+Typically, :data:`sys.path` is a list of directory names as strings.  This module
+also allows an item of :data:`sys.path` to be a string naming a ZIP file archive.
 The ZIP archive can contain a subdirectory structure to support package imports,
 and a path within the archive can be specified to only import from a
 subdirectory.  For example, the path :file:`/tmp/example.zip/lib/` would only
Index: b/Doc/license.rst
===================================================================
--- a/Doc/license.rst	2011-07-26 15:35:41.708846620 +0400
+++ b/Doc/license.rst	2011-07-26 15:35:56.582549427 +0400
@@ -889,7 +889,7 @@
 -----
 
 The :mod:`pyexpat` extension is built using an included copy of the expat
-sources unless the build is configured :option:`--with-system-expat`::
+sources unless the build is configured ``--with-system-expat``::
 
   Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                                  and Clark Cooper
@@ -918,7 +918,7 @@
 ------
 
 The :mod:`_ctypes` extension is built using an included copy of the libffi
-sources unless the build is configured :option:`--with-system-libffi`::
+sources unless the build is configured ``--with-system-libffi``::
 
    Copyright (c) 1996-2008  Red Hat, Inc and others.
 
Index: b/Doc/reference/compound_stmts.rst
===================================================================
--- a/Doc/reference/compound_stmts.rst	2011-07-26 15:35:36.850858275 +0400
+++ b/Doc/reference/compound_stmts.rst	2011-07-26 15:35:56.586947205 +0400
@@ -562,8 +562,9 @@
 
 .. rubric:: Footnotes
 
-.. [#] The exception is propagated to the invocation stack only if there is no
-   :keyword:`finally` clause that negates the exception.
+.. [#] The exception is propagated to the invocation stack unless
+   there is a :keyword:`finally` clause which happens to raise another
+   exception. That new exception causes the old one to be lost.
 
 .. [#] Currently, control "flows off the end" except in the case of an exception or the
    execution of a :keyword:`return`, :keyword:`continue`, or :keyword:`break`
Index: b/Doc/reference/datamodel.rst
===================================================================
--- a/Doc/reference/datamodel.rst	2011-07-26 15:35:36.692273018 +0400
+++ b/Doc/reference/datamodel.rst	2011-07-26 15:35:56.645942653 +0400
@@ -2308,7 +2308,7 @@
 
 *
 
-  In ``x * y``, if one operator is a sequence that implements sequence
+  In ``x * y``, if one operand is a sequence that implements sequence
   repetition, and the other is an integer (:class:`int` or :class:`long`),
   sequence repetition is invoked.
 
Index: b/Doc/tutorial/classes.rst
===================================================================
--- a/Doc/tutorial/classes.rst	2011-07-26 15:35:35.483863895 +0400
+++ b/Doc/tutorial/classes.rst	2011-07-26 15:35:56.651970897 +0400
@@ -553,6 +553,28 @@
 without regard to the syntactic position of the identifier, as long as it
 occurs within the definition of a class.
 
+Name mangling is helpful for letting subclasses override methods without
+breaking intraclass method calls.  For example::
+
+    class Mapping:
+        def __init__(self, iterable):
+            self.items_list = []
+            self.__update(iterable)
+
+        def update(self, iterable):
+            for item in iterable:
+                self.items_list.append(item)
+
+        __update = update   # private copy of original update() method
+
+    class MappingSubclass(Mapping):
+
+        def update(self, keys, values):
+            # provides new signature for update()
+            # but does not break __init__()
+            for item in zip(keys, values):
+                self.items_list.append(item)
+
 Note that the mangling rules are designed mostly to avoid accidents; it still is
 possible to access or modify a variable that is considered private.  This can
 even be useful in special circumstances, such as in the debugger.
Index: b/Doc/tutorial/modules.rst
===================================================================
--- a/Doc/tutorial/modules.rst	2011-07-26 15:35:35.639383408 +0400
+++ b/Doc/tutorial/modules.rst	2011-07-26 15:35:56.655791241 +0400
@@ -155,13 +155,14 @@
 
 .. index:: triple: module; search; path
 
-When a module named :mod:`spam` is imported, the interpreter searches for a file
-named :file:`spam.py` in the current directory, and then in the list of
-directories specified by the environment variable :envvar:`PYTHONPATH`.  This
-has the same syntax as the shell variable :envvar:`PATH`, that is, a list of
-directory names.  When :envvar:`PYTHONPATH` is not set, or when the file is not
-found there, the search continues in an installation-dependent default path; on
-Unix, this is usually :file:`.:/usr/local/lib/python`.
+When a module named :mod:`spam` is imported, the interpreter searches for a
+file named :file:`spam.py` in the directory containing the input script and
+then in the list of directories specified by the environment variable
+:envvar:`PYTHONPATH`.  This has the same syntax as the shell variable
+:envvar:`PATH`, that is, a list of directory names.  When :envvar:`PYTHONPATH`
+is not set, or when the file is not found there, the search continues in an
+installation-dependent default path; on Unix, this is usually
+:file:`.:/usr/local/lib/python`.
 
 Actually, modules are searched in the list of directories given by the variable
 ``sys.path`` which is initialized from the directory containing the input script
Index: b/Doc/using/cmdline.rst
===================================================================
--- a/Doc/using/cmdline.rst	2011-07-26 15:35:41.572475633 +0400
+++ b/Doc/using/cmdline.rst	2011-07-26 15:35:56.660007538 +0400
@@ -569,7 +569,7 @@
 ~~~~~~~~~~~~~~~~~~~~
 
 Setting these variables only has an effect in a debug build of Python, that is,
-if Python was configured with the :option:`--with-pydebug` build option.
+if Python was configured with the ``--with-pydebug`` build option.
 
 .. envvar:: PYTHONTHREADDEBUG
 
Index: b/Doc/whatsnew/2.5.rst
===================================================================
--- a/Doc/whatsnew/2.5.rst	2011-07-26 15:35:41.869377439 +0400
+++ b/Doc/whatsnew/2.5.rst	2011-07-26 15:35:56.668358044 +0400
@@ -1459,7 +1459,7 @@
 
   On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond
   resolution, and the returned object now has :attr:`st_gen` and
-  :attr:`st_birthtime`. The :attr:`st_flags` member is also available, if the
+  :attr:`st_birthtime`. The :attr:`st_flags` attribute is also available, if the
   platform supports it. (Contributed by Antti Louko and  Diego Pettenò.)
 
   .. (Patch 1180695, 1212117)
Index: b/Include/patchlevel.h
===================================================================
--- a/Include/patchlevel.h	2011-07-26 15:35:42.485782520 +0400
+++ b/Include/patchlevel.h	2011-07-26 15:35:56.672521866 +0400
@@ -27,7 +27,7 @@
 #define PY_RELEASE_SERIAL	0
 
 /* Version as a string */
-#define PY_VERSION      	"2.7.2"
+#define PY_VERSION      	"2.7.2+"
 /*--end constants--*/
 
 /* Subversion Revision number of this file (not of the repository). Empty
Index: b/Lib/collections.py
===================================================================
--- a/Lib/collections.py	2011-07-26 15:35:44.767161071 +0400
+++ b/Lib/collections.py	2011-07-26 15:35:56.677009047 +0400
@@ -312,6 +312,7 @@
         def _asdict(self):
             'Return a new OrderedDict which maps field names to their values'
             return OrderedDict(zip(self._fields, self)) \n
+        __dict__ = property(_asdict) \n
         def _replace(_self, **kwds):
             'Return a new %(typename)s object replacing specified fields with new values'
             result = _self._make(map(kwds.pop, %(field_names)r, _self))
Index: b/Lib/decimal.py
===================================================================
--- a/Lib/decimal.py	2011-07-26 15:35:49.422796335 +0400
+++ b/Lib/decimal.py	2011-07-26 15:35:56.692857181 +0400
@@ -1942,9 +1942,9 @@
         nonzero.  For efficiency, other._exp should not be too large,
         so that 10**abs(other._exp) is a feasible calculation."""
 
-        # In the comments below, we write x for the value of self and
-        # y for the value of other.  Write x = xc*10**xe and y =
-        # yc*10**ye.
+        # In the comments below, we write x for the value of self and y for the
+        # value of other.  Write x = xc*10**xe and abs(y) = yc*10**ye, with xc
+        # and yc positive integers not divisible by 10.
 
         # The main purpose of this method is to identify the *failure*
         # of x**y to be exactly representable with as little effort as
@@ -1952,13 +1952,12 @@
         # eliminate the possibility of x**y being exact.  Only if all
         # these tests are passed do we go on to actually compute x**y.
 
-        # Here's the main idea.  First normalize both x and y.  We
-        # express y as a rational m/n, with m and n relatively prime
-        # and n>0.  Then for x**y to be exactly representable (at
-        # *any* precision), xc must be the nth power of a positive
-        # integer and xe must be divisible by n.  If m is negative
-        # then additionally xc must be a power of either 2 or 5, hence
-        # a power of 2**n or 5**n.
+        # Here's the main idea.  Express y as a rational number m/n, with m and
+        # n relatively prime and n>0.  Then for x**y to be exactly
+        # representable (at *any* precision), xc must be the nth power of a
+        # positive integer and xe must be divisible by n.  If y is negative
+        # then additionally xc must be a power of either 2 or 5, hence a power
+        # of 2**n or 5**n.
         #
         # There's a limit to how small |y| can be: if y=m/n as above
         # then:
@@ -2030,21 +2029,43 @@
                     return None
                 # now xc is a power of 2; e is its exponent
                 e = _nbits(xc)-1
-                # find e*y and xe*y; both must be integers
-                if ye >= 0:
-                    y_as_int = yc*10**ye
-                    e = e*y_as_int
-                    xe = xe*y_as_int
-                else:
-                    ten_pow = 10**-ye
-                    e, remainder = divmod(e*yc, ten_pow)
-                    if remainder:
-                        return None
-                    xe, remainder = divmod(xe*yc, ten_pow)
-                    if remainder:
-                        return None
 
-                if e*65 >= p*93: # 93/65 > log(10)/log(5)
+                # We now have:
+                #
+                #   x = 2**e * 10**xe, e > 0, and y < 0.
+                #
+                # The exact result is:
+                #
+                #   x**y = 5**(-e*y) * 10**(e*y + xe*y)
+                #
+                # provided that both e*y and xe*y are integers.  Note that if
+                # 5**(-e*y) >= 10**p, then the result can't be expressed
+                # exactly with p digits of precision.
+                #
+                # Using the above, we can guard against large values of ye.
+                # 93/65 is an upper bound for log(10)/log(5), so if
+                #
+                #   ye >= len(str(93*p//65))
+                #
+                # then
+                #
+                #   -e*y >= -y >= 10**ye > 93*p/65 > p*log(10)/log(5),
+                #
+                # so 5**(-e*y) >= 10**p, and the coefficient of the result
+                # can't be expressed in p digits.
+
+                # emax >= largest e such that 5**e < 10**p.
+                emax = p*93//65
+                if ye >= len(str(emax)):
+                    return None
+
+                # Find -e*y and -xe*y; both must be integers
+                e = _decimal_lshift_exact(e * yc, ye)
+                xe = _decimal_lshift_exact(xe * yc, ye)
+                if e is None or xe is None:
+                    return None
+
+                if e > emax:
                     return None
                 xc = 5**e
 
@@ -2058,19 +2079,20 @@
                 while xc % 5 == 0:
                     xc //= 5
                     e -= 1
-                if ye >= 0:
-                    y_as_integer = yc*10**ye
-                    e = e*y_as_integer
-                    xe = xe*y_as_integer
-                else:
-                    ten_pow = 10**-ye
-                    e, remainder = divmod(e*yc, ten_pow)
-                    if remainder:
-                        return None
-                    xe, remainder = divmod(xe*yc, ten_pow)
-                    if remainder:
-                        return None
-                if e*3 >= p*10: # 10/3 > log(10)/log(2)
+
+                # Guard against large values of ye, using the same logic as in
+                # the 'xc is a power of 2' branch.  10/3 is an upper bound for
+                # log(10)/log(2).
+                emax = p*10//3
+                if ye >= len(str(emax)):
+                    return None
+
+                e = _decimal_lshift_exact(e * yc, ye)
+                xe = _decimal_lshift_exact(xe * yc, ye)
+                if e is None or xe is None:
+                    return None
+
+                if e > emax:
                     return None
                 xc = 2**e
             else:
@@ -5463,6 +5485,27 @@
     hex_n = "%x" % n
     return 4*len(hex_n) - correction[hex_n[0]]
 
+def _decimal_lshift_exact(n, e):
+    """ Given integers n and e, return n * 10**e if it's an integer, else None.
+
+    The computation is designed to avoid computing large powers of 10
+    unnecessarily.
+
+    >>> _decimal_lshift_exact(3, 4)
+    30000
+    >>> _decimal_lshift_exact(300, -999999999)  # returns None
+
+    """
+    if n == 0:
+        return 0
+    elif e >= 0:
+        return n * 10**e
+    else:
+        # val_n = largest power of 10 dividing n.
+        str_n = str(abs(n))
+        val_n = len(str_n) - len(str_n.rstrip('0'))
+        return None if val_n < -e else n // 10**-e
+
 def _sqrt_nearest(n, a):
     """Closest integer to the square root of the positive integer n.  a is
     an initial approximation to the square root.  Any positive integer
Index: b/Lib/distutils/spawn.py
===================================================================
--- a/Lib/distutils/spawn.py	2011-07-26 15:35:45.067267117 +0400
+++ b/Lib/distutils/spawn.py	2011-07-26 15:35:56.697156412 +0400
@@ -96,17 +96,43 @@
             raise DistutilsExecError, \
                   "command '%s' failed with exit status %d" % (cmd[0], rc)
 
+if sys.platform == 'darwin':
+    from distutils import sysconfig
+    _cfg_target = None
+    _cfg_target_split = None
 
 def _spawn_posix(cmd, search_path=1, verbose=0, dry_run=0):
     log.info(' '.join(cmd))
     if dry_run:
         return
     exec_fn = search_path and os.execvp or os.execv
+    exec_args = [cmd[0], cmd]
+    if sys.platform == 'darwin':
+        global _cfg_target, _cfg_target_split
+        if _cfg_target is None:
+            _cfg_target = sysconfig.get_config_var(
+                                  'MACOSX_DEPLOYMENT_TARGET') or ''
+            if _cfg_target:
+                _cfg_target_split = [int(x) for x in _cfg_target.split('.')]
+        if _cfg_target:
+            # ensure that the deployment target of build process is not less
+            # than that used when the interpreter was built. This ensures
+            # extension modules are built with correct compatibility values
+            cur_target = os.environ.get('MACOSX_DEPLOYMENT_TARGET', _cfg_target)
+            if _cfg_target_split > [int(x) for x in cur_target.split('.')]:
+                my_msg = ('$MACOSX_DEPLOYMENT_TARGET mismatch: '
+                          'now "%s" but "%s" during configure'
+                                % (cur_target, _cfg_target))
+                raise DistutilsPlatformError(my_msg)
+            env = dict(os.environ,
+                       MACOSX_DEPLOYMENT_TARGET=cur_target)
+            exec_fn = search_path and os.execvpe or os.execve
+            exec_args.append(env)
     pid = os.fork()
 
     if pid == 0:  # in the child
         try:
-            exec_fn(cmd[0], cmd)
+            exec_fn(*exec_args)
         except OSError, e:
             sys.stderr.write("unable to execute %s: %s\n" %
                              (cmd[0], e.strerror))
Index: b/Lib/distutils/sysconfig.py
===================================================================
--- a/Lib/distutils/sysconfig.py	2011-07-26 15:35:45.218097148 +0400
+++ b/Lib/distutils/sysconfig.py	2011-07-26 15:35:56.701637022 +0400
@@ -380,21 +380,6 @@
 
         raise DistutilsPlatformError(my_msg)
 
-    # On MacOSX we need to check the setting of the environment variable
-    # MACOSX_DEPLOYMENT_TARGET: configure bases some choices on it so
-    # it needs to be compatible.
-    # If it isn't set we set it to the configure-time value
-    if sys.platform == 'darwin' and 'MACOSX_DEPLOYMENT_TARGET' in g:
-        cfg_target = g['MACOSX_DEPLOYMENT_TARGET']
-        cur_target = os.getenv('MACOSX_DEPLOYMENT_TARGET', '')
-        if cur_target == '':
-            cur_target = cfg_target
-            os.environ['MACOSX_DEPLOYMENT_TARGET'] = cfg_target
-        elif map(int, cfg_target.split('.')) > map(int, cur_target.split('.')):
-            my_msg = ('$MACOSX_DEPLOYMENT_TARGET mismatch: now "%s" but "%s" during configure'
-                % (cur_target, cfg_target))
-            raise DistutilsPlatformError(my_msg)
-
     # On AIX, there are wrong paths to the linker scripts in the Makefile
     # -- these paths are relative to the Python source, but when installed
     # the scripts are in another directory.
Index: b/Lib/distutils/tests/test_build_ext.py
===================================================================
--- a/Lib/distutils/tests/test_build_ext.py	2011-07-26 15:35:44.930663711 +0400
+++ b/Lib/distutils/tests/test_build_ext.py	2011-07-26 15:35:56.707724725 +0400
@@ -9,7 +9,8 @@
 from distutils.command.build_ext import build_ext
 from distutils import sysconfig
 from distutils.tests import support
-from distutils.errors import DistutilsSetupError, CompileError
+from distutils.errors import (DistutilsSetupError, CompileError,
+                              DistutilsPlatformError)
 
 import unittest
 from test import test_support
@@ -19,6 +20,11 @@
 ALREADY_TESTED = False
 
 def _get_source_filename():
+    # use installed copy if available
+    tests_f = os.path.join(os.path.dirname(__file__), 'xxmodule.c')
+    if os.path.exists(tests_f):
+        return tests_f
+    # otherwise try using copy from build directory
     srcdir = sysconfig.get_config_var('srcdir')
     if srcdir is None:
         return os.path.join(sysconfig.project_base, 'Modules', 'xxmodule.c')
@@ -432,18 +438,43 @@
         self.assertEqual(ext_path, wanted)
 
     @unittest.skipUnless(sys.platform == 'darwin', 'test only relevant for MacOSX')
-    def test_deployment_target(self):
-        self._try_compile_deployment_target()
+    def test_deployment_target_default(self):
+        # Issue 9516: Test that, in the absence of the environment variable,
+        # an extension module is compiled with the same deployment target as
+        #  the interpreter.
+        self._try_compile_deployment_target('==', None)
 
+    @unittest.skipUnless(sys.platform == 'darwin', 'test only relevant for MacOSX')
+    def test_deployment_target_too_low(self):
+        # Issue 9516: Test that an extension module is not allowed to be
+        # compiled with a deployment target less than that of the interpreter.
+        self.assertRaises(DistutilsPlatformError,
+            self._try_compile_deployment_target, '>', '10.1')
+
+    @unittest.skipUnless(sys.platform == 'darwin', 'test only relevant for MacOSX')
+    def test_deployment_target_higher_ok(self):
+        # Issue 9516: Test that an extension module can be compiled with a
+        # deployment target higher than that of the interpreter: the ext
+        # module may depend on some newer OS feature.
+        deptarget = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+        if deptarget:
+            # increment the minor version number (i.e. 10.6 -> 10.7)
+            deptarget = [int(x) for x in deptarget.split('.')]
+            deptarget[-1] += 1
+            deptarget = '.'.join(str(i) for i in deptarget)
+            self._try_compile_deployment_target('<', deptarget)
+
+    def _try_compile_deployment_target(self, operator, target):
         orig_environ = os.environ
         os.environ = orig_environ.copy()
         self.addCleanup(setattr, os, 'environ', orig_environ)
 
-        os.environ['MACOSX_DEPLOYMENT_TARGET']='10.1'
-        self._try_compile_deployment_target()
-
+        if target is None:
+            if os.environ.get('MACOSX_DEPLOYMENT_TARGET'):
+                del os.environ['MACOSX_DEPLOYMENT_TARGET']
+        else:
+            os.environ['MACOSX_DEPLOYMENT_TARGET'] = target
 
-    def _try_compile_deployment_target(self):
         deptarget_c = os.path.join(self.tmp_dir, 'deptargetmodule.c')
 
         with open(deptarget_c, 'w') as fp:
@@ -452,16 +483,17 @@
 
                 int dummy;
 
-                #if TARGET != MAC_OS_X_VERSION_MIN_REQUIRED
+                #if TARGET %s MAC_OS_X_VERSION_MIN_REQUIRED
+                #else
                 #error "Unexpected target"
-               #endif
+                #endif
 
-            '''))
+            ''' % operator))
 
+        # get the deployment target that the interpreter was built with
         target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
         target = tuple(map(int, target.split('.')))
         target = '%02d%01d0' % target
-
         deptarget_ext = Extension(
             'deptarget',
             [deptarget_c],
Index: b/Lib/filecmp.py
===================================================================
--- a/Lib/filecmp.py	2011-07-26 15:35:49.562452871 +0400
+++ b/Lib/filecmp.py	2011-07-26 15:35:56.711785058 +0400
@@ -48,11 +48,12 @@
     if s1[1] != s2[1]:
         return False
 
-    result = _cache.get((f1, f2))
-    if result and (s1, s2) == result[:2]:
-        return result[2]
-    outcome = _do_cmp(f1, f2)
-    _cache[f1, f2] = s1, s2, outcome
+    outcome = _cache.get((f1, f2, s1, s2))
+    if outcome is None:
+        outcome = _do_cmp(f1, f2)
+        if len(_cache) > 100:      # limit the maximum size of the cache
+            _cache.clear()
+        _cache[f1, f2, s1, s2] = outcome
     return outcome
 
 def _sig(st):
Index: b/Lib/ftplib.py
===================================================================
--- a/Lib/ftplib.py	2011-07-26 15:35:44.057540599 +0400
+++ b/Lib/ftplib.py	2011-07-26 15:35:56.716341225 +0400
@@ -351,6 +351,7 @@
             conn, sockaddr = sock.accept()
             if self.timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                 conn.settimeout(self.timeout)
+            sock.close()
         if resp[:3] == '150':
             # this is conditional in case we received a 125
             size = parse150(resp)
@@ -575,11 +576,11 @@
 
     def close(self):
         '''Close the connection without assuming anything about it.'''
-        if self.file:
+        if self.file is not None:
             self.file.close()
+        if self.sock is not None:
             self.sock.close()
-            self.file = self.sock = None
-
+        self.file = self.sock = None
 
 try:
     import ssl
Index: b/Lib/idlelib/PyShell.py
===================================================================
--- a/Lib/idlelib/PyShell.py	2011-07-26 15:35:51.299682114 +0400
+++ b/Lib/idlelib/PyShell.py	2011-07-26 15:35:56.722605292 +0400
@@ -61,7 +61,7 @@
             file = warning_stream
         try:
             file.write(warnings.formatwarning(message, category, filename,
-                                              lineno, file=file, line=line))
+                                              lineno, line=line))
         except IOError:
             pass  ## file (probably __stderr__) is invalid, warning dropped.
     warnings.showwarning = idle_showwarning
Index: b/Lib/inspect.py
===================================================================
--- a/Lib/inspect.py	2011-07-26 15:35:44.193187159 +0400
+++ b/Lib/inspect.py	2011-07-26 15:35:56.727289943 +0400
@@ -524,9 +524,13 @@
     or code object.  The source code is returned as a list of all the lines
     in the file and the line number indexes a line in that list.  An IOError
     is raised if the source code cannot be retrieved."""
-    file = getsourcefile(object)
-    if not file:
+
+    file = getfile(object)
+    sourcefile = getsourcefile(object)
+    if not sourcefile and file[0] + file[-1] != '<>':
         raise IOError('source code not available')
+    file = sourcefile if sourcefile else file
+
     module = getmodule(object, file)
     if module:
         lines = linecache.getlines(file, module.__dict__)
Index: b/Lib/lib-tk/test/runtktests.py
===================================================================
--- a/Lib/lib-tk/test/runtktests.py	2011-07-26 15:35:49.898608309 +0400
+++ b/Lib/lib-tk/test/runtktests.py	2011-07-26 15:35:56.732019986 +0400
@@ -14,6 +14,49 @@
 
 this_dir_path = os.path.abspath(os.path.dirname(__file__))
 
+_tk_unavailable = None
+
+def check_tk_availability():
+    """Check that Tk is installed and available."""
+    global _tk_unavailable
+
+    if _tk_unavailable is None:
+        _tk_unavailable = False
+        if sys.platform == 'darwin':
+            # The Aqua Tk implementations on OS X can abort the process if
+            # being called in an environment where a window server connection
+            # cannot be made, for instance when invoked by a buildbot or ssh
+            # process not running under the same user id as the current console
+            # user.  To avoid that, raise an exception if the window manager
+            # connection is not available.
+            from ctypes import cdll, c_int, pointer, Structure
+            from ctypes.util import find_library
+
+            app_services = cdll.LoadLibrary(find_library("ApplicationServices"))
+
+            if app_services.CGMainDisplayID() == 0:
+                _tk_unavailable = "cannot run without OS X window manager"
+            else:
+                class ProcessSerialNumber(Structure):
+                    _fields_ = [("highLongOfPSN", c_int),
+                                ("lowLongOfPSN", c_int)]
+                psn = ProcessSerialNumber()
+                psn_p = pointer(psn)
+                if (  (app_services.GetCurrentProcess(psn_p) < 0) or
+                      (app_services.SetFrontProcess(psn_p) < 0) ):
+                    _tk_unavailable = "cannot run without OS X gui process"
+        else:   # not OS X
+            import Tkinter
+            try:
+                Tkinter.Button()
+            except Tkinter.TclError as msg:
+                # assuming tk is not available
+                _tk_unavailable = "tk not available: %s" % msg
+
+    if _tk_unavailable:
+        raise unittest.SkipTest(_tk_unavailable)
+    return
+
 def is_package(path):
     for name in os.listdir(path):
         if name in ('__init__.py', '__init__.pyc', '__init.pyo'):
Index: b/Lib/lib-tk/test/test_ttk/test_widgets.py
===================================================================
--- a/Lib/lib-tk/test/test_ttk/test_widgets.py	2011-07-26 15:35:49.721345573 +0400
+++ b/Lib/lib-tk/test/test_ttk/test_widgets.py	2011-07-26 15:35:56.738338167 +0400
@@ -2,6 +2,7 @@
 import Tkinter
 import ttk
 from test.test_support import requires, run_unittest
+import sys
 
 import support
 from test_functions import MockTclObj, MockStateSpec
@@ -560,11 +561,19 @@
 
         self.nb.pack()
         self.nb.wait_visibility()
-        self.assertEqual(self.nb.tab('@5,5'), self.nb.tab('current'))
+        if sys.platform == 'darwin':
+            tb_idx = "@20,5"
+        else:
+            tb_idx = "@5,5"
+        self.assertEqual(self.nb.tab(tb_idx), self.nb.tab('current'))
 
         for i in range(5, 100, 5):
-            if self.nb.tab('@%d, 5' % i, text=None) == 'a':
-                break
+            try:
+                if self.nb.tab('@%d, 5' % i, text=None) == 'a':
+                    break
+            except Tkinter.TclError:
+                pass
+
         else:
             self.fail("Tab with text 'a' not found")
 
@@ -721,7 +730,10 @@
         self.nb.enable_traversal()
         self.nb.focus_force()
         support.simulate_mouse_click(self.nb, 5, 5)
-        self.nb.event_generate('<Alt-a>')
+        if sys.platform == 'darwin':
+            self.nb.event_generate('<Option-a>')
+        else:
+            self.nb.event_generate('<Alt-a>')
         self.assertEqual(self.nb.select(), str(self.child1))
 
 
@@ -925,7 +937,8 @@
         self.assertRaises(Tkinter.TclError, self.tv.heading, '#0',
             anchor=1)
 
-
+    # XXX skipping for now; should be fixed to work with newer ttk
+    @unittest.skip("skipping pending resolution of Issue #10734")
     def test_heading_callback(self):
         def simulate_heading_click(x, y):
             support.simulate_mouse_click(self.tv, x, y)
Index: b/Lib/mailbox.py
===================================================================
--- a/Lib/mailbox.py	2011-07-26 15:35:44.630407866 +0400
+++ b/Lib/mailbox.py	2011-07-26 15:35:56.745391904 +0400
@@ -1854,7 +1854,10 @@
 
     def close(self):
         """Close the file."""
-        del self._file
+        if hasattr(self, '_file'):
+            if hasattr(self._file, 'close'):
+                self._file.close()
+            del self._file
 
     def _read(self, size, read_method):
         """Read size bytes using read_method."""
@@ -1898,6 +1901,12 @@
             size = remaining
         return _ProxyFile._read(self, size, read_method)
 
+    def close(self):
+        # do *not* close the underlying file object for partial files,
+        # since it's global to the mailbox object
+        if hasattr(self, '_file'):
+            del self._file
+
 
 def _lock_file(f, dotlock=True):
     """Lock file f using lockf and dot locking."""
Index: b/Lib/multiprocessing/heap.py
===================================================================
--- a/Lib/multiprocessing/heap.py	2011-07-26 15:35:44.329506507 +0400
+++ b/Lib/multiprocessing/heap.py	2011-07-26 15:35:56.750718120 +0400
@@ -101,6 +101,8 @@
         self._stop_to_block = {}
         self._allocated_blocks = set()
         self._arenas = []
+        # list of pending blocks to free - see free() comment below
+        self._pending_free_blocks = []
 
     @staticmethod
     def _roundup(n, alignment):
@@ -175,15 +177,39 @@
 
         return start, stop
 
+    def _free_pending_blocks(self):
+        # Free all the blocks in the pending list - called with the lock held.
+        while True:
+            try:
+                block = self._pending_free_blocks.pop()
+            except IndexError:
+                break
+            self._allocated_blocks.remove(block)
+            self._free(block)
+
     def free(self, block):
         # free a block returned by malloc()
+        # Since free() can be called asynchronously by the GC, it could happen
+        # that it's called while self._lock is held: in that case,
+        # self._lock.acquire() would deadlock (issue #12352). To avoid that, a
+        # trylock is used instead, and if the lock can't be acquired
+        # immediately, the block is added to a list of blocks to be freed
+        # synchronously sometimes later from malloc() or free(), by calling
+        # _free_pending_blocks() (appending and retrieving from a list is not
+        # strictly thread-safe but under cPython it's atomic thanks to the GIL).
         assert os.getpid() == self._lastpid
-        self._lock.acquire()
-        try:
-            self._allocated_blocks.remove(block)
-            self._free(block)
-        finally:
-            self._lock.release()
+        if not self._lock.acquire(False):
+            # can't acquire the lock right now, add the block to the list of
+            # pending blocks to free
+            self._pending_free_blocks.append(block)
+        else:
+            # we hold the lock
+            try:
+                self._free_pending_blocks()
+                self._allocated_blocks.remove(block)
+                self._free(block)
+            finally:
+                self._lock.release()
 
     def malloc(self, size):
         # return a block of right size (possibly rounded up)
@@ -191,6 +217,7 @@
         if os.getpid() != self._lastpid:
             self.__init__()                     # reinitialize after fork
         self._lock.acquire()
+        self._free_pending_blocks()
         try:
             size = self._roundup(max(size,1), self._alignment)
             (arena, start, stop) = self._malloc(size)
Index: b/Lib/multiprocessing/pool.py
===================================================================
--- a/Lib/multiprocessing/pool.py	2011-07-26 15:35:44.485603331 +0400
+++ b/Lib/multiprocessing/pool.py	2011-07-26 15:35:56.754854705 +0400
@@ -125,6 +125,8 @@
                 processes = cpu_count()
             except NotImplementedError:
                 processes = 1
+        if processes < 1:
+            raise ValueError("Number of processes must be at least 1")
 
         if initializer is not None and not hasattr(initializer, '__call__'):
             raise TypeError('initializer must be a callable')
Index: b/Lib/ntpath.py
===================================================================
--- a/Lib/ntpath.py	2011-07-26 15:35:50.922952637 +0400
+++ b/Lib/ntpath.py	2011-07-26 15:35:56.758330435 +0400
@@ -521,3 +521,13 @@
     if not rel_list:
         return curdir
     return join(*rel_list)
+
+try:
+    # The genericpath.isdir implementation uses os.stat and checks the mode
+    # attribute to tell whether or not the path is a directory.
+    # This is overkill on Windows - just pass the path to GetFileAttributes
+    # and check the attribute from there.
+    from nt import _isdir as isdir
+except ImportError:
+    # Use genericpath.isdir as imported above.
+    pass
Index: b/Lib/random.py
===================================================================
--- a/Lib/random.py	2011-07-26 15:35:43.776116489 +0400
+++ b/Lib/random.py	2011-07-26 15:35:56.762966740 +0400
@@ -427,11 +427,9 @@
         # lambd: rate lambd = 1/mean
         # ('lambda' is a Python reserved word)
 
-        random = self.random
-        u = random()
-        while u <= 1e-7:
-            u = random()
-        return -_log(u)/lambd
+        # we use 1-random() instead of random() to preclude the
+        # possibility of taking the log of zero.
+        return -_log(1.0 - self.random())/lambd
 
 ## -------------------- von Mises distribution --------------------
 
Index: b/Lib/stat.py
===================================================================
--- a/Lib/stat.py	2011-07-26 15:35:50.778764065 +0400
+++ b/Lib/stat.py	2011-07-26 15:35:56.765778828 +0400
@@ -87,6 +87,8 @@
 UF_APPEND    = 0x00000004
 UF_OPAQUE    = 0x00000008
 UF_NOUNLINK  = 0x00000010
+UF_COMPRESSED = 0x00000020  # OS X: file is hfs-compressed
+UF_HIDDEN    = 0x00008000   # OS X: file should not be displayed
 SF_ARCHIVED  = 0x00010000
 SF_IMMUTABLE = 0x00020000
 SF_APPEND    = 0x00040000
Index: b/Lib/subprocess.py
===================================================================
--- a/Lib/subprocess.py	2011-07-26 15:35:50.639168530 +0400
+++ b/Lib/subprocess.py	2011-07-26 15:35:56.772487148 +0400
@@ -476,7 +476,7 @@
     while True:
         try:
             return func(*args)
-        except OSError, e:
+        except (OSError, IOError) as e:
             if e.errno == errno.EINTR:
                 continue
             raise
@@ -707,7 +707,10 @@
 
 
     def __del__(self, _maxint=sys.maxint, _active=_active):
-        if not self._child_created:
+        # If __init__ hasn't had a chance to execute (e.g. if it
+        # was passed an undeclared keyword argument), we don't
+        # have a _child_created attribute at all.
+        if not getattr(self, '_child_created', False):
             # We didn't get to successfully create a child process.
             return
         # In case the child hasn't been waited on, check if it's done.
@@ -740,10 +743,10 @@
                             raise
                 self.stdin.close()
             elif self.stdout:
-                stdout = self.stdout.read()
+                stdout = _eintr_retry_call(self.stdout.read)
                 self.stdout.close()
             elif self.stderr:
-                stderr = self.stderr.read()
+                stderr = _eintr_retry_call(self.stderr.read)
                 self.stderr.close()
             self.wait()
             return (stdout, stderr)
Index: b/Lib/test/cjkencodings/iso2022_jp-utf8.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/Lib/test/cjkencodings/iso2022_jp-utf8.txt	2011-07-26 15:35:56.776945760 +0400
@@ -0,0 +1,7 @@
+Python の開発は、1990 年ごろから開始されています。
+開発者の Guido van Rossum は教育用のプログラミング言語「ABC」の開発に参加していましたが、ABC は実用上の目的にはあまり適していませんでした。
+このため、Guido はより実用的なプログラミング言語の開発を開始し、英国 BBS 放送のコメディ番組「モンティ パイソン」のファンである Guido はこの言語を「Python」と名づけました。
+このような背景から生まれた Python の言語設計は、「シンプル」で「習得が容易」という目標に重点が置かれています。
+多くのスクリプト系言語ではユーザの目先の利便性を優先して色々な機能を言語要素として取り入れる場合が多いのですが、Python ではそういった小細工が追加されることはあまりありません。
+言語自体の機能は最小限に押さえ、必要な機能は拡張モジュールとして追加する、というのが Python のポリシーです。
+
Index: b/Lib/test/cjkencodings/iso2022_jp.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/Lib/test/cjkencodings/iso2022_jp.txt	2011-07-26 15:35:56.779757591 +0400
@@ -0,0 +1,7 @@
+Python $B$N3+H/$O!"(B1990 $BG/$4$m$+$i3+;O$5$l$F$$$^$9!#(B
+$B3+H/<T$N(B Guido van Rossum $B$O650iMQ$N%W%m%0%i%_%s%08@8l!V(BABC$B!W$N3+H/$K;22C$7$F$$$^$7$?$,!"(BABC $B$O<BMQ>e$NL\E*$K$O$"$^$jE,$7$F$$$^$;$s$G$7$?!#(B
+$B$3$N$?$a!"(BGuido $B$O$h$j<BMQE*$J%W%m%0%i%_%s%08@8l$N3+H/$r3+;O$7!"1Q9q(B BBS $BJ|Aw$N%3%a%G%#HVAH!V%b%s%F%#(B $B%Q%$%=%s!W$N%U%!%s$G$"$k(B Guido $B$O$3$N8@8l$r!V(BPython$B!W$HL>$E$1$^$7$?!#(B
+$B$3$N$h$&$JGX7J$+$i@8$^$l$?(B Python $B$N8@8l@_7W$O!"!V%7%s%W%k!W$G!V=,F@$,MF0W!W$H$$$&L\I8$K=EE@$,CV$+$l$F$$$^$9!#(B
+$BB?$/$N%9%/%j%W%H7O8@8l$G$O%f!<%6$NL\@h$NMxJX@-$rM%@h$7$F?'!9$J5!G=$r8@8lMWAG$H$7$F<h$jF~$l$k>l9g$,B?$$$N$G$9$,!"(BPython $B$G$O$=$&$$$C$?>.:Y9)$,DI2C$5$l$k$3$H$O$"$^$j$"$j$^$;$s!#(B
+$B8@8l<+BN$N5!G=$O:G>.8B$K2!$5$(!"I,MW$J5!G=$O3HD%%b%8%e!<%k$H$7$FDI2C$9$k!"$H$$$&$N$,(B Python $B$N%]%j%7!<$G$9!#(B
+
Index: b/Lib/test/cjkencodings/iso2022_kr-utf8.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/Lib/test/cjkencodings/iso2022_kr-utf8.txt	2011-07-26 15:35:56.784053388 +0400
@@ -0,0 +1,7 @@
+◎ 파이썬(Python)은 배우기 쉽고, 강력한 프로그래밍 언어입니다. 파이썬은
+효율적인 고수준 데이터 구조와 간단하지만 효율적인 객체지향프로그래밍을
+지원합니다. 파이썬의 우아(優雅)한 문법과 동적 타이핑, 그리고 인터프리팅
+환경은 파이썬을 스크립팅과 여러 분야에서와 대부분의 플랫폼에서의 빠른
+애플리케이션 개발을 할 수 있는 이상적인 언어로 만들어줍니다.
+
+☆첫가끝: 날아라 쓩~ 큼! 금없이 전니다. 그런거 다.
Index: b/Lib/test/cjkencodings/iso2022_kr.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/Lib/test/cjkencodings/iso2022_kr.txt	2011-07-26 15:35:56.787029050 +0400
@@ -0,0 +1,7 @@
+$)C!] FD@L=c(Python)@: 9h?l1b =10m, 0-7BGQ GA7N1W7!9V >p>n@T4O4Y. FD@L=c@:
+H?@2@{@N 0m<vAX 5%@LEM 18A6?M 0#4\GOAv88 H?@2@{@N 04C<AvGbGA7N1W7!9V@;
+Av?xGU4O4Y. FD@L=c@G ?l>F(iPd:)GQ 9.9}0z 5?@{ E8@LGN, 1W8.0m @NEMGA8.FC
+H/0f@: FD@L=c@; =:E)83FC0z ?)7/ :P>_?!<-?M 4k:N:P@G GC7'F{?!<-@G :|8%
+>VGC8.DI@L<G 039_@; GR <v @V4B @L;s@{@N >p>n7N 885i>nA]4O4Y.
+
+!YC90!3!: 3/>F6s >1~ E-! 1]>x@L @|4O4Y. 1W710E 4Y.
Index: b/Lib/test/decimaltestdata/extra.decTest
===================================================================
--- a/Lib/test/decimaltestdata/extra.decTest	2011-07-26 15:35:45.374985645 +0400
+++ b/Lib/test/decimaltestdata/extra.decTest	2011-07-26 15:35:56.794944971 +0400
@@ -222,12 +222,25 @@
 extr1701 power 100.0 -557.71e-742888888 -> 1.000000000000000 Inexact Rounded
 extr1702 power 10 1e-100 -> 1.000000000000000 Inexact Rounded
 
+-- Another one (see issue #12080).  Thanks again to Stefan Krah.
+extr1703 power 4 -1.2e-999999999 -> 1.000000000000000 Inexact Rounded
+
 -- A couple of interesting exact cases for power.  Note that the specification
 -- requires these to be reported as Inexact.
 extr1710 power 1e375 56e-3 -> 1.000000000000000E+21 Inexact Rounded
 extr1711 power 10000 0.75 -> 1000.000000000000 Inexact Rounded
 extr1712 power 1e-24 0.875 -> 1.000000000000000E-21 Inexact Rounded
 
+-- Some more exact cases, exercising power with negative second argument.
+extr1720 power 400 -0.5 -> 0.05000000000000000 Inexact Rounded
+extr1721 power 4096 -0.75 -> 0.001953125000000000 Inexact Rounded
+extr1722 power 625e4 -0.25 -> 0.02000000000000000 Inexact Rounded
+
+-- Nonexact cases, to exercise some of the early exit conditions from
+-- _power_exact.
+extr1730 power 2048 -0.75 -> 0.003284751622084822 Inexact Rounded
+
+
 -- Tests for the is_* boolean operations
 precision: 9
 maxExponent: 999
Index: b/Lib/test/test_array.py
===================================================================
--- a/Lib/test/test_array.py	2011-07-26 15:35:47.650728311 +0400
+++ b/Lib/test/test_array.py	2011-07-26 15:35:56.800027070 +0400
@@ -4,6 +4,7 @@
 """
 
 import unittest
+import warnings
 from test import test_support
 from weakref import proxy
 import array, cStringIO
@@ -783,7 +784,9 @@
 
     def test_subclass_with_kwargs(self):
         # SF bug #1486663 -- this used to erroneously raise a TypeError
-        ArraySubclassWithKwargs('b', newarg=1)
+        with warnings.catch_warnings():
+            warnings.filterwarnings("ignore", '', DeprecationWarning)
+            ArraySubclassWithKwargs('b', newarg=1)
 
 
 class StringTest(BaseTest):
Index: b/Lib/test/test_ast.py
===================================================================
--- a/Lib/test/test_ast.py	2011-07-26 15:35:49.286255500 +0400
+++ b/Lib/test/test_ast.py	2011-07-26 15:35:56.808338660 +0400
@@ -20,10 +20,24 @@
 # These tests are compiled through "exec"
 # There should be atleast one test per statement
 exec_tests = [
+    # None
+    "None",
     # FunctionDef
     "def f(): pass",
+    # FunctionDef with arg
+    "def f(a): pass",
+    # FunctionDef with arg and default value
+    "def f(a=0): pass",
+    # FunctionDef with varargs
+    "def f(*args): pass",
+    # FunctionDef with kwargs
+    "def f(**kwargs): pass",
+    # FunctionDef with all kind of args
+    "def f(a, b=1, c=None, d=[], e={}, *args, **kwargs): pass",
     # ClassDef
     "class C:pass",
+    # ClassDef, new style class
+    "class C(object): pass",
     # Return
     "def f():return 1",
     # Delete
@@ -68,6 +82,27 @@
     "for a,b in c: pass",
     "[(a,b) for a,b in c]",
     "((a,b) for a,b in c)",
+    "((a,b) for (a,b) in c)",
+    # Multiline generator expression (test for .lineno & .col_offset)
+    """(
+    (
+    Aa
+    ,
+       Bb
+    )
+    for
+    Aa
+    ,
+    Bb in Cc
+    )""",
+    # dictcomp
+    "{a : b for w in x for m in p if g}",
+    # dictcomp with naked tuple
+    "{a : b for v,w in x}",
+    # setcomp
+    "{r for l in x if g}",
+    # setcomp with naked tuple
+    "{r for l,m in x}",
 ]
 
 # These are compiled through "single"
@@ -80,6 +115,8 @@
 # These are compiled through "eval"
 # It should test all expressions
 eval_tests = [
+  # None
+  "None",
   # BoolOp
   "a and b",
   # BinOp
@@ -90,6 +127,16 @@
   "lambda:None",
   # Dict
   "{ 1:2 }",
+  # Empty dict
+  "{}",
+  # Set
+  "{None,}",
+  # Multiline dict (test for .lineno & .col_offset)
+  """{
+      1
+        :
+          2
+     }""",
   # ListComp
   "[a for b in c if d]",
   # GeneratorExp
@@ -114,8 +161,14 @@
   "v",
   # List
   "[1,2,3]",
+  # Empty list
+  "[]",
   # Tuple
   "1,2,3",
+  # Tuple
+  "(1,2,3)",
+  # Empty tuple
+  "()",
   # Combination
   "a.b.c.d(a.b[1:2])",
 
@@ -141,6 +194,23 @@
             elif value is not None:
                 self._assertTrueorder(value, parent_pos)
 
+    def test_AST_objects(self):
+        x = ast.AST()
+        self.assertEqual(x._fields, ())
+
+        with self.assertRaises(AttributeError):
+            x.vararg
+
+        with self.assertRaises(AttributeError):
+            x.foobar = 21
+
+        with self.assertRaises(AttributeError):
+            ast.AST(lineno=2)
+
+        with self.assertRaises(TypeError):
+            # "_ast.AST constructor takes 0 positional arguments"
+            ast.AST(2)
+
     def test_snippets(self):
         for input, output, kind in ((exec_tests, exec_results, "exec"),
                                     (single_tests, single_results, "single"),
@@ -169,7 +239,83 @@
         self.assertTrue(issubclass(ast.comprehension, ast.AST))
         self.assertTrue(issubclass(ast.Gt, ast.AST))
 
+    def test_field_attr_existence(self):
+        for name, item in ast.__dict__.iteritems():
+            if isinstance(item, type) and name != 'AST' and name[0].isupper():
+                x = item()
+                if isinstance(x, ast.AST):
+                    self.assertEqual(type(x._fields), tuple)
+
+    def test_arguments(self):
+        x = ast.arguments()
+        self.assertEqual(x._fields, ('args', 'vararg', 'kwarg', 'defaults'))
+
+        with self.assertRaises(AttributeError):
+            x.vararg
+
+        x = ast.arguments(1, 2, 3, 4)
+        self.assertEqual(x.vararg, 2)
+
+    def test_field_attr_writable(self):
+        x = ast.Num()
+        # We can assign to _fields
+        x._fields = 666
+        self.assertEqual(x._fields, 666)
+
+    def test_classattrs(self):
+        x = ast.Num()
+        self.assertEqual(x._fields, ('n',))
+
+        with self.assertRaises(AttributeError):
+            x.n
+
+        x = ast.Num(42)
+        self.assertEqual(x.n, 42)
+
+        with self.assertRaises(AttributeError):
+            x.lineno
+
+        with self.assertRaises(AttributeError):
+            x.foobar
+
+        x = ast.Num(lineno=2)
+        self.assertEqual(x.lineno, 2)
+
+        x = ast.Num(42, lineno=0)
+        self.assertEqual(x.lineno, 0)
+        self.assertEqual(x._fields, ('n',))
+        self.assertEqual(x.n, 42)
+
+        self.assertRaises(TypeError, ast.Num, 1, 2)
+        self.assertRaises(TypeError, ast.Num, 1, 2, lineno=0)
+
+    def test_module(self):
+        body = [ast.Num(42)]
+        x = ast.Module(body)
+        self.assertEqual(x.body, body)
+
     def test_nodeclasses(self):
+        # Zero arguments constructor explicitely allowed
+        x = ast.BinOp()
+        self.assertEqual(x._fields, ('left', 'op', 'right'))
+
+        # Random attribute allowed too
+        x.foobarbaz = 5
+        self.assertEqual(x.foobarbaz, 5)
+
+        n1 = ast.Num(1)
+        n3 = ast.Num(3)
+        addop = ast.Add()
+        x = ast.BinOp(n1, addop, n3)
+        self.assertEqual(x.left, n1)
+        self.assertEqual(x.op, addop)
+        self.assertEqual(x.right, n3)
+
+        x = ast.BinOp(1, 2, 3)
+        self.assertEqual(x.left, 1)
+        self.assertEqual(x.op, 2)
+        self.assertEqual(x.right, 3)
+
         x = ast.BinOp(1, 2, 3, lineno=0)
         self.assertEqual(x.left, 1)
         self.assertEqual(x.op, 2)
@@ -178,6 +324,12 @@
 
         # node raises exception when not given enough arguments
         self.assertRaises(TypeError, ast.BinOp, 1, 2)
+        # node raises exception when given too many arguments
+        self.assertRaises(TypeError, ast.BinOp, 1, 2, 3, 4)
+        # node raises exception when not given enough arguments
+        self.assertRaises(TypeError, ast.BinOp, 1, 2, lineno=0)
+        # node raises exception when given too many arguments
+        self.assertRaises(TypeError, ast.BinOp, 1, 2, 3, 4, lineno=0)
 
         # can set attributes through kwargs too
         x = ast.BinOp(left=1, op=2, right=3, lineno=0)
@@ -186,8 +338,14 @@
         self.assertEqual(x.right, 3)
         self.assertEqual(x.lineno, 0)
 
+        # Random kwargs also allowed
+        x = ast.BinOp(1, 2, 3, foobarbaz=42)
+        self.assertEqual(x.foobarbaz, 42)
+
+    def test_no_fields(self):
         # this used to fail because Sub._fields was None
         x = ast.Sub()
+        self.assertEqual(x._fields, ())
 
     def test_pickling(self):
         import pickle
@@ -330,8 +488,15 @@
 
 #### EVERYTHING BELOW IS GENERATED #####
 exec_results = [
+('Module', [('Expr', (1, 0), ('Name', (1, 0), 'None', ('Load',)))]),
 ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Pass', (1, 9))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, []), [('Pass', (1, 10))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, [('Num', (1, 8), 0)]), [('Pass', (1, 12))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], 'args', None, []), [('Pass', (1, 14))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, 'kwargs', []), [('Pass', (1, 17))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',)), ('Name', (1, 9), 'b', ('Param',)), ('Name', (1, 14), 'c', ('Param',)), ('Name', (1, 22), 'd', ('Param',)), ('Name', (1, 28), 'e', ('Param',))], 'args', 'kwargs', [('Num', (1, 11), 1), ('Name', (1, 16), 'None', ('Load',)), ('List', (1, 24), [], ('Load',)), ('Dict', (1, 30), [], [])]), [('Pass', (1, 52))], [])]),
 ('Module', [('ClassDef', (1, 0), 'C', [], [('Pass', (1, 8))], [])]),
+('Module', [('ClassDef', (1, 0), 'C', [('Name', (1, 8), 'object', ('Load',))], [('Pass', (1, 17))], [])]),
 ('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Return', (1, 8), ('Num', (1, 15), 1))], [])]),
 ('Module', [('Delete', (1, 0), [('Name', (1, 4), 'v', ('Del',))])]),
 ('Module', [('Assign', (1, 0), [('Name', (1, 0), 'v', ('Store',))], ('Num', (1, 4), 1))]),
@@ -355,16 +520,26 @@
 ('Module', [('For', (1, 0), ('Tuple', (1, 4), [('Name', (1, 4), 'a', ('Store',)), ('Name', (1, 6), 'b', ('Store',))], ('Store',)), ('Name', (1, 11), 'c', ('Load',)), [('Pass', (1, 14))], [])]),
 ('Module', [('Expr', (1, 0), ('ListComp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'a', ('Store',)), ('Name', (1, 13), 'b', ('Store',))], ('Store',)), ('Name', (1, 18), 'c', ('Load',)), [])]))]),
 ('Module', [('Expr', (1, 0), ('GeneratorExp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'a', ('Store',)), ('Name', (1, 13), 'b', ('Store',))], ('Store',)), ('Name', (1, 18), 'c', ('Load',)), [])]))]),
+('Module', [('Expr', (1, 0), ('GeneratorExp', (1, 1), ('Tuple', (1, 2), [('Name', (1, 2), 'a', ('Load',)), ('Name', (1, 4), 'b', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (1, 12), [('Name', (1, 12), 'a', ('Store',)), ('Name', (1, 14), 'b', ('Store',))], ('Store',)), ('Name', (1, 20), 'c', ('Load',)), [])]))]),
+('Module', [('Expr', (1, 0), ('GeneratorExp', (2, 4), ('Tuple', (3, 4), [('Name', (3, 4), 'Aa', ('Load',)), ('Name', (5, 7), 'Bb', ('Load',))], ('Load',)), [('comprehension', ('Tuple', (8, 4), [('Name', (8, 4), 'Aa', ('Store',)), ('Name', (10, 4), 'Bb', ('Store',))], ('Store',)), ('Name', (10, 10), 'Cc', ('Load',)), [])]))]),
+('Module', [('Expr', (1, 0), ('DictComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), ('Name', (1, 5), 'b', ('Load',)), [('comprehension', ('Name', (1, 11), 'w', ('Store',)), ('Name', (1, 16), 'x', ('Load',)), []), ('comprehension', ('Name', (1, 22), 'm', ('Store',)), ('Name', (1, 27), 'p', ('Load',)), [('Name', (1, 32), 'g', ('Load',))])]))]),
+('Module', [('Expr', (1, 0), ('DictComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), ('Name', (1, 5), 'b', ('Load',)), [('comprehension', ('Tuple', (1, 11), [('Name', (1, 11), 'v', ('Store',)), ('Name', (1, 13), 'w', ('Store',))], ('Store',)), ('Name', (1, 18), 'x', ('Load',)), [])]))]),
+('Module', [('Expr', (1, 0), ('SetComp', (1, 1), ('Name', (1, 1), 'r', ('Load',)), [('comprehension', ('Name', (1, 7), 'l', ('Store',)), ('Name', (1, 12), 'x', ('Load',)), [('Name', (1, 17), 'g', ('Load',))])]))]),
+('Module', [('Expr', (1, 0), ('SetComp', (1, 1), ('Name', (1, 1), 'r', ('Load',)), [('comprehension', ('Tuple', (1, 7), [('Name', (1, 7), 'l', ('Store',)), ('Name', (1, 9), 'm', ('Store',))], ('Store',)), ('Name', (1, 14), 'x', ('Load',)), [])]))]),
 ]
 single_results = [
 ('Interactive', [('Expr', (1, 0), ('BinOp', (1, 0), ('Num', (1, 0), 1), ('Add',), ('Num', (1, 2), 2)))]),
 ]
 eval_results = [
+('Expression', ('Name', (1, 0), 'None', ('Load',))),
 ('Expression', ('BoolOp', (1, 0), ('And',), [('Name', (1, 0), 'a', ('Load',)), ('Name', (1, 6), 'b', ('Load',))])),
 ('Expression', ('BinOp', (1, 0), ('Name', (1, 0), 'a', ('Load',)), ('Add',), ('Name', (1, 4), 'b', ('Load',)))),
 ('Expression', ('UnaryOp', (1, 0), ('Not',), ('Name', (1, 4), 'v', ('Load',)))),
 ('Expression', ('Lambda', (1, 0), ('arguments', [], None, None, []), ('Name', (1, 7), 'None', ('Load',)))),
 ('Expression', ('Dict', (1, 0), [('Num', (1, 2), 1)], [('Num', (1, 4), 2)])),
+('Expression', ('Dict', (1, 0), [], [])),
+('Expression', ('Set', (1, 0), [('Name', (1, 1), 'None', ('Load',))])),
+('Expression', ('Dict', (1, 0), [('Num', (2, 6), 1)], [('Num', (4, 10), 2)])),
 ('Expression', ('ListComp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), [('comprehension', ('Name', (1, 7), 'b', ('Store',)), ('Name', (1, 12), 'c', ('Load',)), [('Name', (1, 17), 'd', ('Load',))])])),
 ('Expression', ('GeneratorExp', (1, 1), ('Name', (1, 1), 'a', ('Load',)), [('comprehension', ('Name', (1, 7), 'b', ('Store',)), ('Name', (1, 12), 'c', ('Load',)), [('Name', (1, 17), 'd', ('Load',))])])),
 ('Expression', ('Compare', (1, 0), ('Num', (1, 0), 1), [('Lt',), ('Lt',)], [('Num', (1, 4), 2), ('Num', (1, 8), 3)])),
@@ -376,7 +551,10 @@
 ('Expression', ('Subscript', (1, 0), ('Name', (1, 0), 'a', ('Load',)), ('Slice', ('Name', (1, 2), 'b', ('Load',)), ('Name', (1, 4), 'c', ('Load',)), None), ('Load',))),
 ('Expression', ('Name', (1, 0), 'v', ('Load',))),
 ('Expression', ('List', (1, 0), [('Num', (1, 1), 1), ('Num', (1, 3), 2), ('Num', (1, 5), 3)], ('Load',))),
+('Expression', ('List', (1, 0), [], ('Load',))),
 ('Expression', ('Tuple', (1, 0), [('Num', (1, 0), 1), ('Num', (1, 2), 2), ('Num', (1, 4), 3)], ('Load',))),
+('Expression', ('Tuple', (1, 1), [('Num', (1, 1), 1), ('Num', (1, 3), 2), ('Num', (1, 5), 3)], ('Load',))),
+('Expression', ('Tuple', (1, 0), [], ('Load',))),
 ('Expression', ('Call', (1, 0), ('Attribute', (1, 0), ('Attribute', (1, 0), ('Attribute', (1, 0), ('Name', (1, 0), 'a', ('Load',)), 'b', ('Load',)), 'c', ('Load',)), 'd', ('Load',)), [('Subscript', (1, 8), ('Attribute', (1, 8), ('Name', (1, 8), 'a', ('Load',)), 'b', ('Load',)), ('Slice', ('Num', (1, 12), 1), ('Num', (1, 14), 2), None), ('Load',))], [], None, None)),
 ]
 main()
Index: b/Lib/test/test_builtin.py
===================================================================
--- a/Lib/test/test_builtin.py	2011-07-26 15:35:46.574036617 +0400
+++ b/Lib/test/test_builtin.py	2011-07-26 15:35:56.814426499 +0400
@@ -1683,6 +1683,7 @@
 
 def _run_unittest(*args):
     with check_py3k_warnings(
+            (".+ not supported in 3.1", DeprecationWarning),
             (".+ not supported in 3.x", DeprecationWarning),
             (".+ is renamed to imp.reload", DeprecationWarning),
             ("classic int division", DeprecationWarning)):
Index: b/Lib/test/test_codecencodings_iso2022.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/Lib/test/test_codecencodings_iso2022.py	2011-07-26 15:35:56.817575573 +0400
@@ -0,0 +1,46 @@
+#!/usr/bin/env python
+#
+# Codec encoding tests for ISO 2022 encodings.
+
+from test import test_support
+from test import test_multibytecodec_support
+import unittest
+
+COMMON_CODEC_TESTS = (
+        # invalid bytes
+        (b'ab\xFFcd', 'replace', u'ab\uFFFDcd'),
+        (b'ab\x1Bdef', 'replace', u'ab\x1Bdef'),
+        (b'ab\x1B$def', 'replace', u'ab\uFFFD'),
+    )
+
+class Test_ISO2022_JP(test_multibytecodec_support.TestBase, unittest.TestCase):
+    encoding = 'iso2022_jp'
+    tstring = test_multibytecodec_support.load_teststring('iso2022_jp')
+    codectests = COMMON_CODEC_TESTS + (
+        (b'ab\x1BNdef', 'replace', u'ab\x1BNdef'),
+    )
+
+class Test_ISO2022_JP2(test_multibytecodec_support.TestBase, unittest.TestCase):
+    encoding = 'iso2022_jp_2'
+    tstring = test_multibytecodec_support.load_teststring('iso2022_jp')
+    codectests = COMMON_CODEC_TESTS + (
+        (b'ab\x1BNdef', 'replace', u'abdef'),
+    )
+
+class Test_ISO2022_KR(test_multibytecodec_support.TestBase, unittest.TestCase):
+    encoding = 'iso2022_kr'
+    tstring = test_multibytecodec_support.load_teststring('iso2022_kr')
+    codectests = COMMON_CODEC_TESTS + (
+        (b'ab\x1BNdef', 'replace', u'ab\x1BNdef'),
+    )
+
+    # iso2022_kr.txt cannot be used to test "chunk coding": the escape
+    # sequence is only written on the first line
+    def test_chunkcoding(self):
+        pass
+
+def test_main():
+    test_support.run_unittest(__name__)
+
+if __name__ == "__main__":
+    test_main()
Index: b/Lib/test/test_collections.py
===================================================================
--- a/Lib/test/test_collections.py	2011-07-26 15:35:48.296059139 +0400
+++ b/Lib/test/test_collections.py	2011-07-26 15:35:56.822671080 +0400
@@ -78,12 +78,12 @@
         self.assertRaises(TypeError, eval, 'Point(XXX=1, y=2)', locals())   # wrong keyword argument
         self.assertRaises(TypeError, eval, 'Point(x=1)', locals())          # missing keyword argument
         self.assertEqual(repr(p), 'Point(x=11, y=22)')
-        self.assertNotIn('__dict__', dir(p))                              # verify instance has no dict
         self.assertNotIn('__weakref__', dir(p))
         self.assertEqual(p, Point._make([11, 22]))                          # test _make classmethod
         self.assertEqual(p._fields, ('x', 'y'))                             # test _fields attribute
         self.assertEqual(p._replace(x=1), (1, 22))                          # test _replace method
         self.assertEqual(p._asdict(), dict(x=11, y=22))                     # test _asdict method
+        self.assertEqual(vars(p), p._asdict())                              # verify that vars() works
 
         try:
             p._replace(x=1, error=2)
Index: b/Lib/test/test_descr.py
===================================================================
--- a/Lib/test/test_descr.py	2011-07-26 15:35:47.513965253 +0400
+++ b/Lib/test/test_descr.py	2011-07-26 15:35:56.833024984 +0400
@@ -4589,6 +4589,10 @@
                 pass
         self.C = C
 
+    def test_repr(self):
+        self.assertIn('dict_proxy({', repr(vars(self.C)))
+        self.assertIn("'meth':", repr(vars(self.C)))
+
     def test_iter_keys(self):
         # Testing dict-proxy iterkeys...
         keys = [ key for key in self.C.__dict__.iterkeys() ]
Index: b/Lib/test/test_inspect.py
===================================================================
--- a/Lib/test/test_inspect.py	2011-07-26 15:35:47.788835894 +0400
+++ b/Lib/test/test_inspect.py	2011-07-26 15:35:56.837427127 +0400
@@ -295,6 +295,23 @@
         del sys.modules[name]
         inspect.getmodule(compile('a=10','','single'))
 
+    def test_proceed_with_fake_filename(self):
+        '''doctest monkeypatches linecache to enable inspection'''
+        fn, source = '<test>', 'def x(): pass\n'
+        getlines = linecache.getlines
+        def monkey(filename, module_globals=None):
+            if filename == fn:
+                return source.splitlines(True)
+            else:
+                return getlines(filename, module_globals)
+        linecache.getlines = monkey
+        try:
+            ns = {}
+            exec compile(source, fn, 'single') in ns
+            inspect.getsource(ns["x"])
+        finally:
+            linecache.getlines = getlines
+
 class TestDecorators(GetSourceBase):
     fodderFile = mod2
 
Index: b/Lib/test/test_io.py
===================================================================
--- a/Lib/test/test_io.py	2011-07-26 15:35:46.753232973 +0400
+++ b/Lib/test/test_io.py	2011-07-26 15:35:56.845565761 +0400
@@ -2557,6 +2557,8 @@
         1 // 0
 
     @unittest.skipUnless(threading, 'Threading required for this test.')
+    @unittest.skipIf(sys.platform in ('freebsd5', 'freebsd6', 'freebsd7'),
+                     'issue #12429: skip test on FreeBSD <= 7')
     def check_interrupted_write(self, item, bytes, **fdopen_kwargs):
         """Check that a partial write, when it gets interrupted, properly
         invokes the signal handler, and bubbles up the exception raised
@@ -2610,7 +2612,7 @@
         def on_alarm(*args):
             # Will be called reentrantly from the same thread
             wio.write(data)
-            1/0
+            1//0
         signal.signal(signal.SIGALRM, on_alarm)
         r, w = os.pipe()
         wio = self.io.open(w, **fdopen_kwargs)
Index: b/Lib/test/test_mailbox.py
===================================================================
--- a/Lib/test/test_mailbox.py	2011-07-26 15:35:48.995894665 +0400
+++ b/Lib/test/test_mailbox.py	2011-07-26 15:35:56.852547138 +0400
@@ -174,6 +174,13 @@
         self.assertEqual(self._box.get_file(key1).read().replace(os.linesep, '\n'),
                          _sample_message)
 
+    def test_get_file_can_be_closed_twice(self):
+        # Issue 11700
+        key = self._box.add(_sample_message)
+        f = self._box.get_file(key)
+        f.close()
+        f.close()
+
     def test_iterkeys(self):
         # Get keys using iterkeys()
         self._check_iteration(self._box.iterkeys, do_keys=True, do_values=False)
@@ -1670,7 +1677,8 @@
     def _test_close(self, proxy):
         # Close a file
         proxy.close()
-        self.assertRaises(AttributeError, lambda: proxy.close())
+        # Issue 11700 subsequent closes should be a no-op, not an error.
+        proxy.close()
 
 
 class TestProxyFile(TestProxyFileBase):
Index: b/Lib/test/test_multibytecodec_support.py
===================================================================
--- a/Lib/test/test_multibytecodec_support.py	2011-07-26 15:35:48.857736245 +0400
+++ b/Lib/test/test_multibytecodec_support.py	2011-07-26 15:35:56.856670139 +0400
@@ -44,13 +44,24 @@
 
     def test_errorhandle(self):
         for source, scheme, expected in self.codectests:
-            if type(source) == type(''):
+            if isinstance(source, bytes):
                 func = self.decode
             else:
                 func = self.encode
             if expected:
                 result = func(source, scheme)[0]
-                self.assertEqual(result, expected)
+                if func is self.decode:
+                    self.assertTrue(type(result) is unicode, type(result))
+                    self.assertEqual(result, expected,
+                                     '%r.decode(%r, %r)=%r != %r'
+                                     % (source, self.encoding, scheme, result,
+                                        expected))
+                else:
+                    self.assertTrue(type(result) is bytes, type(result))
+                    self.assertEqual(result, expected,
+                                     '%r.encode(%r, %r)=%r != %r'
+                                     % (source, self.encoding, scheme, result,
+                                        expected))
             else:
                 self.assertRaises(UnicodeError, func, source, scheme)
 
@@ -251,6 +262,7 @@
     pass_enctest = []
     pass_dectest = []
     supmaps = []
+    codectests = []
 
     def __init__(self, *args, **kw):
         unittest.TestCase.__init__(self, *args, **kw)
@@ -329,6 +341,30 @@
                 self.fail('Decoding failed while testing %s -> %s: %s' % (
                             repr(csetch), repr(unich), exc.reason))
 
+    def test_errorhandle(self):
+        for source, scheme, expected in self.codectests:
+            if isinstance(source, bytes):
+                func = source.decode
+            else:
+                func = source.encode
+            if expected:
+                if isinstance(source, bytes):
+                    result = func(self.encoding, scheme)
+                    self.assertTrue(type(result) is unicode, type(result))
+                    self.assertEqual(result, expected,
+                                     '%r.decode(%r, %r)=%r != %r'
+                                     % (source, self.encoding, scheme, result,
+                                        expected))
+                else:
+                    result = func(self.encoding, scheme)
+                    self.assertTrue(type(result) is bytes, type(result))
+                    self.assertEqual(result, expected,
+                                     '%r.encode(%r, %r)=%r != %r'
+                                     % (source, self.encoding, scheme, result,
+                                        expected))
+            else:
+                self.assertRaises(UnicodeError, func, self.encoding, scheme)
+
 def load_teststring(name):
     dir = os.path.join(os.path.dirname(__file__), 'cjkencodings')
     with open(os.path.join(dir, name + '.txt'), 'rb') as f:
Index: b/Lib/test/test_multiprocessing.py
===================================================================
--- a/Lib/test/test_multiprocessing.py	2011-07-26 15:35:48.710966225 +0400
+++ b/Lib/test/test_multiprocessing.py	2011-07-26 15:35:56.863354304 +0400
@@ -1085,6 +1085,9 @@
         self.assertEqual(sorted(it), map(sqr, range(1000)))
 
     def test_make_pool(self):
+        self.assertRaises(ValueError, multiprocessing.Pool, -1)
+        self.assertRaises(ValueError, multiprocessing.Pool, 0)
+
         p = multiprocessing.Pool(3)
         self.assertEqual(3, len(p._pool))
         p.close()
@@ -1612,6 +1615,8 @@
         # verify the state of the heap
         all = []
         occupied = 0
+        heap._lock.acquire()
+        self.addCleanup(heap._lock.release)
         for L in heap._len_to_seq.values():
             for arena, start, stop in L:
                 all.append((heap._arenas.index(arena), start, stop,
@@ -1629,6 +1634,28 @@
             self.assertTrue((arena != narena and nstart == 0) or
                             (stop == nstart))
 
+    def test_free_from_gc(self):
+        # Check that freeing of blocks by the garbage collector doesn't deadlock
+        # (issue #12352).
+        # Make sure the GC is enabled, and set lower collection thresholds to
+        # make collections more frequent (and increase the probability of
+        # deadlock).
+        if not gc.isenabled():
+            gc.enable()
+            self.addCleanup(gc.disable)
+        thresholds = gc.get_threshold()
+        self.addCleanup(gc.set_threshold, *thresholds)
+        gc.set_threshold(10)
+
+        # perform numerous block allocations, with cyclic references to make
+        # sure objects are collected asynchronously by the gc
+        for i in range(5000):
+            a = multiprocessing.heap.BufferWrapper(1)
+            b = multiprocessing.heap.BufferWrapper(1)
+            # circular references
+            a.buddy = b
+            b.buddy = a
+
 #
 #
 #
Index: b/Lib/test/test_posix.py
===================================================================
--- a/Lib/test/test_posix.py	2011-07-26 15:35:47.375946260 +0400
+++ b/Lib/test/test_posix.py	2011-07-26 15:35:56.867902153 +0400
@@ -11,10 +11,12 @@
 import os
 import pwd
 import shutil
+import stat
 import sys
 import unittest
 import warnings
 
+_DUMMY_SYMLINK = '%s/dummy-symlink' % os.getenv('TMPDIR', '/tmp')
 
 warnings.filterwarnings('ignore', '.* potential security risk .*',
                         RuntimeWarning)
@@ -25,9 +27,11 @@
         # create empty file
         fp = open(test_support.TESTFN, 'w+')
         fp.close()
+        self.teardown_files = [ test_support.TESTFN ]
 
     def tearDown(self):
-        os.unlink(test_support.TESTFN)
+        for teardown_file in self.teardown_files:
+            os.unlink(teardown_file)
 
     def testNoArgFunctions(self):
         # test posix functions which take no arguments and have
@@ -258,7 +262,7 @@
     def test_lchown(self):
         os.unlink(test_support.TESTFN)
         # create a symlink
-        os.symlink('/tmp/dummy-symlink-target', test_support.TESTFN)
+        os.symlink(_DUMMY_SYMLINK, test_support.TESTFN)
         self._test_all_chown_common(posix.lchown, test_support.TESTFN)
 
     def test_chdir(self):
@@ -315,17 +319,49 @@
             posix.utime(test_support.TESTFN, (int(now), int(now)))
             posix.utime(test_support.TESTFN, (now, now))
 
+    def _test_chflags_regular_file(self, chflags_func, target_file):
+        st = os.stat(target_file)
+        self.assertTrue(hasattr(st, 'st_flags'))
+        chflags_func(target_file, st.st_flags | stat.UF_IMMUTABLE)
+        try:
+            new_st = os.stat(target_file)
+            self.assertEqual(st.st_flags | stat.UF_IMMUTABLE, new_st.st_flags)
+            try:
+                fd = open(target_file, 'w+')
+            except IOError as e:
+                self.assertEqual(e.errno, errno.EPERM)
+        finally:
+            posix.chflags(target_file, st.st_flags)
+
+    @unittest.skipUnless(hasattr(posix, 'chflags'), 'test needs os.chflags()')
     def test_chflags(self):
-        if hasattr(posix, 'chflags'):
-            st = os.stat(test_support.TESTFN)
-            if hasattr(st, 'st_flags'):
-                posix.chflags(test_support.TESTFN, st.st_flags)
-
-    def test_lchflags(self):
-        if hasattr(posix, 'lchflags'):
-            st = os.stat(test_support.TESTFN)
-            if hasattr(st, 'st_flags'):
-                posix.lchflags(test_support.TESTFN, st.st_flags)
+        self._test_chflags_regular_file(posix.chflags, test_support.TESTFN)
+
+    @unittest.skipUnless(hasattr(posix, 'lchflags'), 'test needs os.lchflags()')
+    def test_lchflags_regular_file(self):
+        self._test_chflags_regular_file(posix.lchflags, test_support.TESTFN)
+
+    @unittest.skipUnless(hasattr(posix, 'lchflags'), 'test needs os.lchflags()')
+    def test_lchflags_symlink(self):
+        testfn_st = os.stat(test_support.TESTFN)
+
+        self.assertTrue(hasattr(testfn_st, 'st_flags'))
+
+        os.symlink(test_support.TESTFN, _DUMMY_SYMLINK)
+        self.teardown_files.append(_DUMMY_SYMLINK)
+        dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
+
+        posix.lchflags(_DUMMY_SYMLINK,
+                       dummy_symlink_st.st_flags | stat.UF_IMMUTABLE)
+        try:
+            new_testfn_st = os.stat(test_support.TESTFN)
+            new_dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
+
+            self.assertEqual(testfn_st.st_flags, new_testfn_st.st_flags)
+            self.assertEqual(dummy_symlink_st.st_flags | stat.UF_IMMUTABLE,
+                             new_dummy_symlink_st.st_flags)
+        finally:
+            posix.lchflags(_DUMMY_SYMLINK, dummy_symlink_st.st_flags)
 
     def test_getcwd_long_pathnames(self):
         if hasattr(posix, 'getcwd'):
Index: b/Lib/test/test_robotparser.py
===================================================================
--- a/Lib/test/test_robotparser.py	2011-07-26 15:35:46.438039035 +0400
+++ b/Lib/test/test_robotparser.py	2011-07-26 15:35:56.871927555 +0400
@@ -1,5 +1,6 @@
 import unittest, StringIO, robotparser
 from test import test_support
+from urllib2 import urlopen, HTTPError
 
 class RobotTestCase(unittest.TestCase):
     def __init__(self, index, parser, url, good, agent):
@@ -234,13 +235,27 @@
         test_support.requires('network')
         with test_support.transient_internet('mueblesmoraleda.com'):
             url = 'http://mueblesmoraleda.com'
+            robots_url = url + "/robots.txt"
+            # First check the URL is usable for our purposes, since the
+            # test site is a bit flaky.
+            try:
+                urlopen(robots_url)
+            except HTTPError as e:
+                if e.code not in {401, 403}:
+                    self.skipTest(
+                        "%r should return a 401 or 403 HTTP error, not %r"
+                        % (robots_url, e.code))
+            else:
+                self.skipTest(
+                    "%r should return a 401 or 403 HTTP error, not succeed"
+                    % (robots_url))
             parser = robotparser.RobotFileParser()
             parser.set_url(url)
             try:
                 parser.read()
             except IOError:
                 self.skipTest('%s is unavailable' % url)
-            self.assertEqual(parser.can_fetch("*", url+"/robots.txt"), False)
+            self.assertEqual(parser.can_fetch("*", robots_url), False)
 
     def testPythonOrg(self):
         test_support.requires('network')
Index: b/Lib/test/test_subprocess.py
===================================================================
--- a/Lib/test/test_subprocess.py	2011-07-26 15:35:48.160790685 +0400
+++ b/Lib/test/test_subprocess.py	2011-07-26 15:35:56.876790499 +0400
@@ -113,6 +113,16 @@
                              env=newenv)
         self.assertEqual(rc, 1)
 
+    def test_invalid_args(self):
+        # Popen() called with invalid arguments should raise TypeError
+        # but Popen.__del__ should not complain (issue #12085)
+        with test_support.captured_stderr() as s:
+            self.assertRaises(TypeError, subprocess.Popen, invalid_arg_name=1)
+            argcount = subprocess.Popen.__init__.__code__.co_argcount
+            too_many_args = [0] * (argcount + 1)
+            self.assertRaises(TypeError, subprocess.Popen, *too_many_args)
+        self.assertEqual(s.getvalue(), '')
+
     def test_stdin_none(self):
         # .stdin is None when not redirected
         p = subprocess.Popen([sys.executable, "-c", 'print "banana"'],
@@ -654,6 +664,24 @@
         except (ImportError, ValueError, resource.error):
             pass
 
+    @unittest.skipUnless(hasattr(signal, 'SIGALRM'),
+                         "Requires signal.SIGALRM")
+    def test_communicate_eintr(self):
+        # Issue #12493: communicate() should handle EINTR
+        def handler(signum, frame):
+            pass
+        old_handler = signal.signal(signal.SIGALRM, handler)
+        self.addCleanup(signal.signal, signal.SIGALRM, old_handler)
+
+        # the process is running for 2 seconds
+        args = [sys.executable, "-c", 'import time; time.sleep(2)']
+        for stream in ('stdout', 'stderr'):
+            kw = {stream: subprocess.PIPE}
+            with subprocess.Popen(args, **kw) as process:
+                signal.alarm(1)
+                # communicate() will be interrupted by SIGALRM
+                process.communicate()
+
 
 @unittest.skipIf(mswindows, "POSIX specific tests")
 class POSIXProcessTestCase(BaseTestCase):
Index: b/Lib/test/test_support.py
===================================================================
--- a/Lib/test/test_support.py	2011-07-26 15:35:45.652729730 +0400
+++ b/Lib/test/test_support.py	2011-07-26 15:35:56.882312244 +0400
@@ -763,6 +763,7 @@
         ('ETIMEDOUT', 110),
     ]
     default_gai_errnos = [
+        ('EAI_AGAIN', -3),
         ('EAI_NONAME', -2),
         ('EAI_NODATA', -5),
     ]
@@ -833,6 +834,9 @@
     """
     return captured_output("stdout")
 
+def captured_stderr():
+    return captured_output("stderr")
+
 def captured_stdin():
     return captured_output("stdin")
 
Index: b/Lib/test/test_threading.py
===================================================================
--- a/Lib/test/test_threading.py	2011-07-26 15:35:47.933797449 +0400
+++ b/Lib/test/test_threading.py	2011-07-26 15:35:56.887634003 +0400
@@ -417,6 +417,13 @@
 
 class ThreadJoinOnShutdown(BaseTestCase):
 
+    # Between fork() and exec(), only async-safe functions are allowed (issues
+    # #12316 and #11870), and fork() from a worker thread is known to trigger
+    # problems with some operating systems (issue #3863): skip problematic tests
+    # on platforms known to behave badly.
+    platforms_to_skip = ('freebsd4', 'freebsd5', 'freebsd6', 'netbsd5',
+                         'os2emx')
+
     def _run_and_join(self, script):
         script = """if 1:
             import sys, os, time, threading
@@ -448,11 +455,10 @@
         self._run_and_join(script)
 
 
+    @unittest.skipUnless(hasattr(os, 'fork'), "needs os.fork()")
+    @unittest.skipIf(sys.platform in platforms_to_skip, "due to known OS bug")
     def test_2_join_in_forked_process(self):
         # Like the test above, but from a forked interpreter
-        import os
-        if not hasattr(os, 'fork'):
-            return
         script = """if 1:
             childpid = os.fork()
             if childpid != 0:
@@ -466,19 +472,11 @@
             """
         self._run_and_join(script)
 
+    @unittest.skipUnless(hasattr(os, 'fork'), "needs os.fork()")
+    @unittest.skipIf(sys.platform in platforms_to_skip, "due to known OS bug")
     def test_3_join_in_forked_from_thread(self):
         # Like the test above, but fork() was called from a worker thread
         # In the forked process, the main Thread object must be marked as stopped.
-        import os
-        if not hasattr(os, 'fork'):
-            return
-        # Skip platforms with known problems forking from a worker thread.
-        # See http://bugs.python.org/issue3863.
-        if sys.platform in ('freebsd4', 'freebsd5', 'freebsd6', 'netbsd5',
-                           'os2emx'):
-            print >>sys.stderr, ('Skipping test_3_join_in_forked_from_thread'
-                                 ' due to known OS bugs on'), sys.platform
-            return
         script = """if 1:
             main_thread = threading.current_thread()
             def worker():
@@ -507,15 +505,11 @@
         self.assertEqual(data, expected_output)
 
     @unittest.skipUnless(hasattr(os, 'fork'), "needs os.fork()")
+    @unittest.skipIf(sys.platform in platforms_to_skip, "due to known OS bug")
     def test_4_joining_across_fork_in_worker_thread(self):
         # There used to be a possible deadlock when forking from a child
         # thread.  See http://bugs.python.org/issue6643.
 
-        # Skip platforms with known problems forking from a worker thread.
-        # See http://bugs.python.org/issue3863.
-        if sys.platform in ('freebsd4', 'freebsd5', 'freebsd6', 'os2emx'):
-            raise unittest.SkipTest('due to known OS bugs on ' + sys.platform)
-
         # The script takes the following steps:
         # - The main thread in the parent process starts a new thread and then
         #   tries to join it.
@@ -584,6 +578,7 @@
         self.assertScriptHasOutput(script, "end of main\n")
 
     @unittest.skipUnless(hasattr(os, 'fork'), "needs os.fork()")
+    @unittest.skipIf(sys.platform in platforms_to_skip, "due to known OS bug")
     def test_5_clear_waiter_locks_to_avoid_crash(self):
         # Check that a spawned thread that forks doesn't segfault on certain
         # platforms, namely OS X.  This used to happen if there was a waiter
@@ -596,10 +591,6 @@
         # lock will be acquired, we can't know if the internal mutex will be
         # acquired at the time of the fork.
 
-        # Skip platforms with known problems forking from a worker thread.
-        # See http://bugs.python.org/issue3863.
-        if sys.platform in ('freebsd4', 'freebsd5', 'freebsd6', 'os2emx'):
-            raise unittest.SkipTest('due to known OS bugs on ' + sys.platform)
         script = """if True:
             import os, time, threading
 
Index: b/Lib/test/test_tk.py
===================================================================
--- a/Lib/test/test_tk.py	2011-07-26 15:35:45.514225474 +0400
+++ b/Lib/test/test_tk.py	2011-07-26 15:35:56.891320639 +0400
@@ -1,18 +1,9 @@
 import os
-import unittest
 from test import test_support
 
 # Skip test if _tkinter wasn't built.
 test_support.import_module('_tkinter')
 
-import Tkinter
-
-try:
-    Tkinter.Button()
-except Tkinter.TclError, msg:
-    # assuming tk is not available
-    raise unittest.SkipTest("tk not available: %s" % msg)
-
 this_dir = os.path.dirname(os.path.abspath(__file__))
 lib_tk_test = os.path.abspath(os.path.join(this_dir, os.path.pardir,
     'lib-tk', 'test'))
@@ -20,6 +11,9 @@
 with test_support.DirsOnSysPath(lib_tk_test):
     import runtktests
 
+# Skip test if tk cannot be initialized.
+runtktests.check_tk_availability()
+
 def test_main(enable_gui=False):
     if enable_gui:
         if test_support.use_resources is None:
Index: b/Lib/test/test_ttk_guionly.py
===================================================================
--- a/Lib/test/test_ttk_guionly.py	2011-07-26 15:35:48.574563316 +0400
+++ b/Lib/test/test_ttk_guionly.py	2011-07-26 15:35:56.894610179 +0400
@@ -5,6 +5,16 @@
 # Skip this test if _tkinter wasn't built.
 test_support.import_module('_tkinter')
 
+this_dir = os.path.dirname(os.path.abspath(__file__))
+lib_tk_test = os.path.abspath(os.path.join(this_dir, os.path.pardir,
+    'lib-tk', 'test'))
+
+with test_support.DirsOnSysPath(lib_tk_test):
+    import runtktests
+
+# Skip test if tk cannot be initialized.
+runtktests.check_tk_availability()
+
 import ttk
 from _tkinter import TclError
 
@@ -14,13 +24,6 @@
     # assuming ttk is not available
     raise unittest.SkipTest("ttk not available: %s" % msg)
 
-this_dir = os.path.dirname(os.path.abspath(__file__))
-lib_tk_test = os.path.abspath(os.path.join(this_dir, os.path.pardir,
-    'lib-tk', 'test'))
-
-with test_support.DirsOnSysPath(lib_tk_test):
-    import runtktests
-
 def test_main(enable_gui=False):
     if enable_gui:
         if test_support.use_resources is None:
Index: b/Lib/test/test_urllib2.py
===================================================================
--- a/Lib/test/test_urllib2.py	2011-07-26 15:35:48.435264879 +0400
+++ b/Lib/test/test_urllib2.py	2011-07-26 15:35:56.899630225 +0400
@@ -293,6 +293,7 @@
             self._tunnel_headers = headers
         else:
             self._tunnel_headers.clear()
+
     def request(self, method, url, body=None, headers=None):
         self.method = method
         self.selector = url
@@ -304,9 +305,13 @@
         if self.raise_on_endheaders:
             import socket
             raise socket.error()
+
     def getresponse(self):
         return MockHTTPResponse(MockFile(), {}, 200, "OK")
 
+    def close(self):
+        pass
+
 class MockHandler:
     # useful for testing handler machinery
     # see add_ordered_mock_handlers() docstring
Index: b/Lib/test/test_urllibnet.py
===================================================================
--- a/Lib/test/test_urllibnet.py	2011-07-26 15:35:49.133804967 +0400
+++ b/Lib/test/test_urllibnet.py	2011-07-26 15:35:56.903487654 +0400
@@ -131,6 +131,14 @@
     def test_bad_address(self):
         # Make sure proper exception is raised when connecting to a bogus
         # address.
+        bogus_domain = "sadflkjsasf.i.nvali.d"
+        try:
+            socket.gethostbyname(bogus_domain)
+        except socket.gaierror:
+            pass
+        else:
+            # This happens with some overzealous DNS providers such as OpenDNS
+            self.skipTest("%r should not resolve for test to work" % bogus_domain)
         self.assertRaises(IOError,
                           # SF patch 809915:  In Sep 2003, VeriSign started
                           # highjacking invalid .com and .net addresses to
Index: b/Lib/test/test_warnings.py
===================================================================
--- a/Lib/test/test_warnings.py	2011-07-26 15:35:45.791022001 +0400
+++ b/Lib/test/test_warnings.py	2011-07-26 15:35:56.907409706 +0400
@@ -530,6 +530,18 @@
         assert expected_line
         self.assertEqual(second_line, expected_line)
 
+    def test_filename_none(self):
+        # issue #12467: race condition if a warning is emitted at shutdown
+        globals_dict = globals()
+        oldfile = globals_dict['__file__']
+        try:
+            with original_warnings.catch_warnings(module=self.module) as w:
+                self.module.filterwarnings("always", category=UserWarning)
+                globals_dict['__file__'] = None
+                self.module.warn('test', UserWarning)
+        finally:
+            globals_dict['__file__'] = oldfile
+
 
 class WarningsDisplayTests(unittest.TestCase):
 
Index: b/Lib/test/test_zipfile.py
===================================================================
--- a/Lib/test/test_zipfile.py	2011-07-26 15:35:45.933887855 +0400
+++ b/Lib/test/test_zipfile.py	2011-07-26 15:35:56.912670480 +0400
@@ -335,6 +335,24 @@
             with zipfile.ZipFile(f, "r") as zipfp:
                 self.assertEqual(zipfp.namelist(), [TESTFN])
 
+    def test_ignores_newline_at_end(self):
+        with zipfile.ZipFile(TESTFN2, "w", zipfile.ZIP_STORED) as zipfp:
+            zipfp.write(TESTFN, TESTFN)
+        with open(TESTFN2, 'a') as f:
+            f.write("\r\n\00\00\00")
+        with zipfile.ZipFile(TESTFN2, "r") as zipfp:
+            self.assertIsInstance(zipfp, zipfile.ZipFile)
+
+    def test_ignores_stuff_appended_past_comments(self):
+        with zipfile.ZipFile(TESTFN2, "w", zipfile.ZIP_STORED) as zipfp:
+            zipfp.comment = b"this is a comment"
+            zipfp.write(TESTFN, TESTFN)
+        with open(TESTFN2, 'a') as f:
+            f.write("abcdef\r\n")
+        with zipfile.ZipFile(TESTFN2, "r") as zipfp:
+            self.assertIsInstance(zipfp, zipfile.ZipFile)
+            self.assertEqual(zipfp.comment, b"this is a comment")
+
     def test_write_default_name(self):
         """Check that calling ZipFile.write without arcname specified
         produces the expected result."""
Index: b/Lib/unittest/case.py
===================================================================
--- a/Lib/unittest/case.py	2011-07-26 15:35:50.502104115 +0400
+++ b/Lib/unittest/case.py	2011-07-26 15:35:56.918364698 +0400
@@ -129,6 +129,27 @@
         return True
 
 
+class _TypeEqualityDict(object):
+
+    def __init__(self, testcase):
+        self.testcase = testcase
+        self._store = {}
+
+    def __setitem__(self, key, value):
+        self._store[key] = value
+
+    def __getitem__(self, key):
+        value = self._store[key]
+        if isinstance(value, basestring):
+            return getattr(self.testcase, value)
+        return value
+
+    def get(self, key, default=None):
+        if key in self._store:
+            return self[key]
+        return default
+
+
 class TestCase(object):
     """A class whose instances are single test cases.
 
@@ -195,13 +216,13 @@
         # Map types to custom assertEqual functions that will compare
         # instances of said type in more detail to generate a more useful
         # error message.
-        self._type_equality_funcs = {}
-        self.addTypeEqualityFunc(dict, self.assertDictEqual)
-        self.addTypeEqualityFunc(list, self.assertListEqual)
-        self.addTypeEqualityFunc(tuple, self.assertTupleEqual)
-        self.addTypeEqualityFunc(set, self.assertSetEqual)
-        self.addTypeEqualityFunc(frozenset, self.assertSetEqual)
-        self.addTypeEqualityFunc(unicode, self.assertMultiLineEqual)
+        self._type_equality_funcs = _TypeEqualityDict(self)
+        self.addTypeEqualityFunc(dict, 'assertDictEqual')
+        self.addTypeEqualityFunc(list, 'assertListEqual')
+        self.addTypeEqualityFunc(tuple, 'assertTupleEqual')
+        self.addTypeEqualityFunc(set, 'assertSetEqual')
+        self.addTypeEqualityFunc(frozenset, 'assertSetEqual')
+        self.addTypeEqualityFunc(unicode, 'assertMultiLineEqual')
 
     def addTypeEqualityFunc(self, typeobj, function):
         """Add a type specific assertEqual style function to compare a type.
Index: b/Lib/unittest/test/test_case.py
===================================================================
--- a/Lib/unittest/test/test_case.py	2011-07-26 15:35:50.192937905 +0400
+++ b/Lib/unittest/test/test_case.py	2011-07-26 15:35:56.930237678 +0400
@@ -1,5 +1,6 @@
 import difflib
 import pprint
+import pickle
 import re
 import sys
 
@@ -1104,6 +1105,20 @@
             self.assertEqual(len(result.errors), 1)
             self.assertEqual(result.testsRun, 1)
 
+    def testPickle(self):
+        # Issue 10326
+
+        # Can't use TestCase classes defined in Test class as
+        # pickle does not work with inner classes
+        test = unittest.TestCase('run')
+        for protocol in range(pickle.HIGHEST_PROTOCOL + 1):
+
+            # blew up prior to fix
+            pickled_test = pickle.dumps(test, protocol=protocol)
+
+            unpickled_test = pickle.loads(pickled_test)
+            self.assertEqual(test, unpickled_test)
+
 
 if __name__ == '__main__':
     unittest.main()
Index: b/Lib/urllib2.py
===================================================================
--- a/Lib/urllib2.py	2011-07-26 15:35:43.918158621 +0400
+++ b/Lib/urllib2.py	2011-07-26 15:35:56.935622020 +0400
@@ -1172,6 +1172,8 @@
                 r = h.getresponse()
         except socket.error, err: # XXX what error?
             raise URLError(err)
+        finally:
+            h.close()
 
         # Pick apart the HTTPResponse object to get the addinfourl
         # object initialized properly.
Index: b/Lib/zipfile.py
===================================================================
--- a/Lib/zipfile.py	2011-07-26 15:35:50.037355885 +0400
+++ b/Lib/zipfile.py	2011-07-26 15:35:56.941039900 +0400
@@ -236,16 +236,14 @@
         # found the magic number; attempt to unpack and interpret
         recData = data[start:start+sizeEndCentDir]
         endrec = list(struct.unpack(structEndArchive, recData))
-        comment = data[start+sizeEndCentDir:]
-        # check that comment length is correct
-        if endrec[_ECD_COMMENT_SIZE] == len(comment):
-            # Append the archive comment and start offset
-            endrec.append(comment)
-            endrec.append(maxCommentStart + start)
+        commentSize = endrec[_ECD_COMMENT_SIZE] #as claimed by the zip file
+        comment = data[start+sizeEndCentDir:start+sizeEndCentDir+commentSize]
+        endrec.append(comment)
+        endrec.append(maxCommentStart + start)
 
-            # Try to read the "Zip64 end of central directory" structure
-            return _EndRecData64(fpin, maxCommentStart + start - filesize,
-                                 endrec)
+        # Try to read the "Zip64 end of central directory" structure
+        return _EndRecData64(fpin, maxCommentStart + start - filesize,
+                             endrec)
 
     # Unable to find a valid end of central directory structure
     return
Index: b/Makefile.pre.in
===================================================================
--- a/Makefile.pre.in	2011-07-26 15:35:52.463770244 +0400
+++ b/Makefile.pre.in	2011-07-26 15:35:56.946111288 +0400
@@ -869,7 +869,7 @@
 		unittest unittest/test \
 		lib-old \
 		curses pydoc_data $(MACHDEPS)
-libinstall:	build_all $(srcdir)/Lib/$(PLATDIR)
+libinstall:	build_all $(srcdir)/Lib/$(PLATDIR) $(srcdir)/Modules/xxmodule.c
 	@for i in $(SCRIPTDIR) $(LIBDEST); \
 	do \
 		if test ! -d $(DESTDIR)$$i; then \
@@ -925,6 +925,10 @@
 		done; \
 	done
 	$(INSTALL_DATA) $(srcdir)/LICENSE $(DESTDIR)$(LIBDEST)/LICENSE.txt
+	if test -d $(DESTDIR)$(LIBDEST)/distutils/tests; then \
+		$(INSTALL_DATA) $(srcdir)/Modules/xxmodule.c \
+			$(DESTDIR)$(LIBDEST)/distutils/tests ; \
+	fi
 	PYTHONPATH=$(DESTDIR)$(LIBDEST)  $(RUNSHARED) \
 		./$(BUILDPYTHON) -Wi -tt $(DESTDIR)$(LIBDEST)/compileall.py \
 		-d $(LIBDEST) -f \
Index: b/Misc/ACKS
===================================================================
--- a/Misc/ACKS	2011-07-26 15:35:42.179165814 +0400
+++ b/Misc/ACKS	2011-07-26 15:35:56.950285092 +0400
@@ -162,6 +162,7 @@
 Juan José Conti
 Matt Conway
 David M. Cooke
+Garrett Cooper
 Greg Copeland
 Aldo Cortesi
 David Costanzo
@@ -608,6 +609,7 @@
 Jason Orendorff
 Douglas Orr
 Michele Orrù
+Oleg Oshmyan
 Denis S. Otkidach
 Michael Otteneder
 R. M. Oudkerk
Index: b/Misc/NEWS
===================================================================
--- a/Misc/NEWS	2011-07-26 15:35:42.329219963 +0400
+++ b/Misc/NEWS	2011-07-26 15:35:56.966564547 +0400
@@ -1,6 +1,125 @@
 Python News
 +++++++++++
 
+What's New in Python 2.7.3?
+===========================
+
+*Release date: XXXX-XX-XX*
+
+Core and Builtins
+-----------------
+
+- Issue #12501: Adjust callable() warning: callable() is only not supported in
+  Python 3.1. callable() is again supported in Python 3.2.
+
+- Issue #9611, #9015: FileIO.read(), FileIO.readinto(), FileIO.write() and
+  os.write() clamp the length to INT_MAX on Windows.
+
+- Issue #1195: my_fgets() now always clears errors before calling fgets(). Fix
+  the following case: sys.stdin.read() stopped with CTRL+d (end of file),
+  raw_input() interrupted by CTRL+c.
+
+- dict_proxy objects now display their contents rather than just the class name.
+
+Library
+-------
+
+- Issue #12493: subprocess: Popen.communicate() now also handles EINTR errors
+  if the process has only one pipe.
+
+- Issue #12467: warnings: fix a race condition if a warning is emitted at
+  shutdown, if globals()['__file__'] is None.
+
+- Issue #12352: Fix a deadlock in multiprocessing.Heap when a block is freed by
+  the garbage collector while the Heap lock is held.
+
+- Issue #9516: On Mac OS X, change Distutils to no longer globally attempt to
+  check or set the MACOSX_DEPLOYMENT_TARGET environment variable for the
+  interpreter process.  This could cause failures in non-Distutils subprocesses
+  and was unreliable since tests or user programs could modify the interpreter
+  environment after Distutils set it.  Instead, have Distutils set the the
+  deployment target only in the environment of each build subprocess.  It is
+  still possible to globally override the default by setting
+  MACOSX_DEPLOYMENT_TARGET before launching the interpreter; its value must be
+  greater or equal to the default value, the value with which the interpreter
+  was built.
+
+- Issue #11802:  The cache in filecmp now has a maximum size of 100 so that
+  it won't grow without bound.
+
+- Issue #12404: Remove C89 incompatible code from mmap module. Patch by Akira
+  Kitada.
+
+- Issue #11700: mailbox proxy object close methods can now be called multiple
+  times without error, and _ProxyFile now closes the wrapped file.
+
+- Issue #12133: AbstractHTTPHandler.do_open() of urllib.request closes the HTTP
+  connection if its getresponse() method fails with a socket error. Patch
+  written by Ezio Melotti.
+
+- Issue #9284: Allow inspect.findsource() to find the source of doctest
+  functions.
+
+- Issue #10694: zipfile now ignores garbage at the end of a zipfile.
+
+- Issue #11583: Speed up os.path.isdir on Windows by using GetFileAttributes
+  instead of os.stat.
+
+- Issue #12080: Fix a performance issue in Decimal._power_exact that caused
+  some corner-case Decimal.__pow__ calls to take an unreasonably long time.
+
+- Named tuples now work correctly with vars().
+
+- sys.setcheckinterval() now updates the current ticker count as well as updating
+  the check interval, so if the user decreases the check interval, the ticker
+  doesn't have to wind down to zero from the old starting point before the new
+  interval takes effect.  And if the user increases the interval, it makes sure
+  the new limit takes effect right away rather have an early task switch before
+  recognizing the new interval.
+
+- Issue #12085: Fix an attribute error in subprocess.Popen destructor if the
+  constructor has failed, e.g. because of an undeclared keyword argument. Patch
+  written by Oleg Oshmyan.
+
+Build
+-----
+
+- Issue #8746: Correct faulty configure checks so that os.chflags() and
+  os.lchflags() are once again built on systems that support these
+  functions (*BSD and OS X).  Also add new stat file flags for OS X
+  (UF_HIDDEN and UF_COMPRESSED).
+
+Tests
+-----
+
+- Skip network tests when getaddrinfo() returns EAI_AGAIN, meaning a temporary
+  failure in name resolution.
+
+- Avoid failing in test_robotparser when mueblesmoraleda.com is flaky and
+  an overzealous DNS service (e.g. OpenDNS) redirects to a placeholder
+  Web site.
+
+- Avoid failing in test_urllibnet.test_bad_address when some overzealous
+  DNS service (e.g. OpenDNS) resolves a non-existent domain name.  The test
+  is now skipped instead.
+
+- Issue #8716: Avoid crashes caused by Aqua Tk on OSX when attempting to run
+  test_tk or test_ttk_guionly under a username that is not currently logged
+  in to the console windowserver (as may be the case under buildbot or ssh).
+
+- Issue #12141: Install a copy of template C module file so that
+  test_build_ext of test_distutils is no longer silently skipped when
+  run outside of a build directory.
+
+- Issue #8746: Add additional tests for os.chflags() and os.lchflags().
+  Patch by Garrett Cooper.
+
+- Issue #10736: Fix test_ttk test_widgets failures with Cocoa Tk 8.5.9
+  on Mac OS X.  (Patch by Ronald Oussoren)
+
+- Issue #12057: Add tests for ISO 2022 codecs (iso2022_jp, iso2022_jp_2,
+  iso2022_kr).
+
 
 What's New in Python 2.7.2?
 ===========================
Index: b/Modules/_io/fileio.c
===================================================================
--- a/Modules/_io/fileio.c	2011-07-26 15:35:42.773278863 +0400
+++ b/Modules/_io/fileio.c	2011-07-26 15:35:56.974128853 +0400
@@ -474,7 +474,7 @@
 fileio_readinto(fileio *self, PyObject *args)
 {
     Py_buffer pbuf;
-    Py_ssize_t n;
+    Py_ssize_t n, len;
 
     if (self->fd < 0)
         return err_closed();
@@ -485,9 +485,16 @@
         return NULL;
 
     if (_PyVerify_fd(self->fd)) {
+        len = pbuf.len;
         Py_BEGIN_ALLOW_THREADS
         errno = 0;
-        n = read(self->fd, pbuf.buf, pbuf.len);
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+        if (len > INT_MAX)
+            len = INT_MAX;
+        n = read(self->fd, pbuf.buf, (int)len);
+#else
+        n = read(self->fd, pbuf.buf, len);
+#endif
         Py_END_ALLOW_THREADS
     } else
         n = -1;
@@ -620,6 +627,10 @@
         return fileio_readall(self);
     }
 
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+    if (size > INT_MAX)
+        size = INT_MAX;
+#endif
     bytes = PyBytes_FromStringAndSize(NULL, size);
     if (bytes == NULL)
         return NULL;
@@ -628,7 +639,11 @@
     if (_PyVerify_fd(self->fd)) {
         Py_BEGIN_ALLOW_THREADS
         errno = 0;
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+        n = read(self->fd, ptr, (int)size);
+#else
         n = read(self->fd, ptr, size);
+#endif
         Py_END_ALLOW_THREADS
     } else
         n = -1;
@@ -655,7 +670,7 @@
 fileio_write(fileio *self, PyObject *args)
 {
     Py_buffer pbuf;
-    Py_ssize_t n;
+    Py_ssize_t n, len;
 
     if (self->fd < 0)
         return err_closed();
@@ -668,7 +683,14 @@
     if (_PyVerify_fd(self->fd)) {
         Py_BEGIN_ALLOW_THREADS
         errno = 0;
-        n = write(self->fd, pbuf.buf, pbuf.len);
+        len = pbuf.len;
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+        if (len > INT_MAX)
+            len = INT_MAX;
+        n = write(self->fd, pbuf.buf, (int)len);
+#else
+        n = write(self->fd, pbuf.buf, len);
+#endif
         Py_END_ALLOW_THREADS
     } else
         n = -1;
Index: b/Modules/cjkcodecs/_codecs_hk.c
===================================================================
--- a/Modules/cjkcodecs/_codecs_hk.c	2011-07-26 15:35:43.638729700 +0400
+++ b/Modules/cjkcodecs/_codecs_hk.c	2011-07-26 15:35:56.977946163 +0400
@@ -115,55 +115,56 @@
 
         REQUIRE_INBUF(2)
 
-        if (0xc6 <= c && c <= 0xc8 && (c >= 0xc7 || IN2 >= 0xa1))
-            goto hkscsdec;
+        if (0xc6 > c || c > 0xc8 || (c < 0xc7 && IN2 < 0xa1)) {
+            TRYMAP_DEC(big5, **outbuf, c, IN2) {
+                NEXT(2, 1)
+                continue;
+            }
+        }
 
-        TRYMAP_DEC(big5, **outbuf, c, IN2) {
-            NEXT(2, 1)
+        TRYMAP_DEC(big5hkscs, decoded, c, IN2)
+        {
+            int s = BH2S(c, IN2);
+            const unsigned char *hintbase;
+
+            assert(0x87 <= c && c <= 0xfe);
+            assert(0x40 <= IN2 && IN2 <= 0xfe);
+
+            if (BH2S(0x87, 0x40) <= s && s <= BH2S(0xa0, 0xfe)) {
+                    hintbase = big5hkscs_phint_0;
+                    s -= BH2S(0x87, 0x40);
+            }
+            else if (BH2S(0xc6,0xa1) <= s && s <= BH2S(0xc8,0xfe)){
+                    hintbase = big5hkscs_phint_12130;
+                    s -= BH2S(0xc6, 0xa1);
+            }
+            else if (BH2S(0xf9,0xd6) <= s && s <= BH2S(0xfe,0xfe)){
+                    hintbase = big5hkscs_phint_21924;
+                    s -= BH2S(0xf9, 0xd6);
+            }
+            else
+                    return MBERR_INTERNAL;
+
+            if (hintbase[s >> 3] & (1 << (s & 7))) {
+                    WRITEUCS4(decoded | 0x20000)
+                    NEXT_IN(2)
+            }
+            else {
+                    OUT1(decoded)
+                    NEXT(2, 1)
+            }
+            continue;
         }
-        else
-hkscsdec:       TRYMAP_DEC(big5hkscs, decoded, c, IN2) {
-                        int s = BH2S(c, IN2);
-                        const unsigned char *hintbase;
-
-                        assert(0x87 <= c && c <= 0xfe);
-                        assert(0x40 <= IN2 && IN2 <= 0xfe);
-
-                        if (BH2S(0x87, 0x40) <= s && s <= BH2S(0xa0, 0xfe)) {
-                                hintbase = big5hkscs_phint_0;
-                                s -= BH2S(0x87, 0x40);
-                        }
-                        else if (BH2S(0xc6,0xa1) <= s && s <= BH2S(0xc8,0xfe)){
-                                hintbase = big5hkscs_phint_12130;
-                                s -= BH2S(0xc6, 0xa1);
-                        }
-                        else if (BH2S(0xf9,0xd6) <= s && s <= BH2S(0xfe,0xfe)){
-                                hintbase = big5hkscs_phint_21924;
-                                s -= BH2S(0xf9, 0xd6);
-                        }
-                        else
-                                return MBERR_INTERNAL;
-
-                        if (hintbase[s >> 3] & (1 << (s & 7))) {
-                                WRITEUCS4(decoded | 0x20000)
-                                NEXT_IN(2)
-                        }
-                        else {
-                                OUT1(decoded)
-                                NEXT(2, 1)
-                        }
-                }
-                else {
-                        switch ((c << 8) | IN2) {
-                        case 0x8862: WRITE2(0x00ca, 0x0304); break;
-                        case 0x8864: WRITE2(0x00ca, 0x030c); break;
-                        case 0x88a3: WRITE2(0x00ea, 0x0304); break;
-                        case 0x88a5: WRITE2(0x00ea, 0x030c); break;
-                        default: return 2;
-                        }
 
-                        NEXT(2, 2) /* all decoded codepoints are pairs, above. */
+        switch ((c << 8) | IN2) {
+        case 0x8862: WRITE2(0x00ca, 0x0304); break;
+        case 0x8864: WRITE2(0x00ca, 0x030c); break;
+        case 0x88a3: WRITE2(0x00ea, 0x0304); break;
+        case 0x88a5: WRITE2(0x00ea, 0x030c); break;
+        default: return 2;
         }
+
+        NEXT(2, 2) /* all decoded codepoints are pairs, above. */
     }
 
     return 0;
Index: b/Modules/cjkcodecs/_codecs_jp.c
===================================================================
--- a/Modules/cjkcodecs/_codecs_jp.c	2011-07-26 15:35:43.468576667 +0400
+++ b/Modules/cjkcodecs/_codecs_jp.c	2011-07-26 15:35:56.982121739 +0400
@@ -371,11 +371,11 @@
 
         REQUIRE_OUTBUF(1)
 
-            if (c < 0x80) {
-                OUT1(c)
-                NEXT(1, 1)
-                continue;
-            }
+        if (c < 0x80) {
+            OUT1(c)
+            NEXT(1, 1)
+            continue;
+        }
 
         if (c == 0x8e) {
             /* JIS X 0201 half-width katakana */
Index: b/Modules/mmapmodule.c
===================================================================
--- a/Modules/mmapmodule.c	2011-07-26 15:35:43.053457436 +0400
+++ b/Modules/mmapmodule.c	2011-07-26 15:35:56.986577025 +0400
@@ -1188,12 +1188,13 @@
 #  endif
     if (fd != -1 && fstat(fd, &st) == 0 && S_ISREG(st.st_mode)) {
         if (map_size == 0) {
+            off_t calc_size;
             if (offset >= st.st_size) {
                 PyErr_SetString(PyExc_ValueError,
                                 "mmap offset is greater than file size");
                 return NULL;
             }
-            off_t calc_size = st.st_size - offset;
+            calc_size = st.st_size - offset;
             map_size = calc_size;
             if (map_size != calc_size) {
                 PyErr_SetString(PyExc_ValueError,
Index: b/Modules/posixmodule.c
===================================================================
--- a/Modules/posixmodule.c	2011-07-26 15:35:42.916974132 +0400
+++ b/Modules/posixmodule.c	2011-07-26 15:35:57.004878795 +0400
@@ -338,20 +338,6 @@
 #define USE_TMPNAM_R
 #endif
 
-/* choose the appropriate stat and fstat functions and return structs */
-#undef STAT
-#undef FSTAT
-#undef STRUCT_STAT
-#if defined(MS_WIN64) || defined(MS_WINDOWS)
-#       define STAT win32_stat
-#       define FSTAT win32_fstat
-#       define STRUCT_STAT struct win32_stat
-#else
-#       define STAT stat
-#       define FSTAT fstat
-#       define STRUCT_STAT struct stat
-#endif
-
 #if defined(MAJOR_IN_MKDEV)
 #include <sys/mkdev.h>
 #else
@@ -842,6 +828,20 @@
 }
 #endif
 
+/* choose the appropriate stat and fstat functions and return structs */
+#undef STAT
+#undef FSTAT
+#undef STRUCT_STAT
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+#       define STAT win32_stat
+#       define FSTAT win32_fstat
+#       define STRUCT_STAT struct win32_stat
+#else
+#       define STAT stat
+#       define FSTAT fstat
+#       define STRUCT_STAT struct stat
+#endif
+
 #ifdef MS_WINDOWS
 /* The CRT of Windows has a number of flaws wrt. its stat() implementation:
    - time stamps are restricted to second resolution
@@ -3903,7 +3903,7 @@
 #endif
     gid_t grouplist[MAX_GROUPS];
 
-    /* On MacOSX getgroups(2) can return more than MAX_GROUPS results 
+    /* On MacOSX getgroups(2) can return more than MAX_GROUPS results
      * This is a helper variable to store the intermediate result when
      * that happens.
      *
@@ -4199,6 +4199,44 @@
     CloseHandle(handle);
     return result;
 }
+
+PyDoc_STRVAR(posix__isdir__doc__,
+"Return true if the pathname refers to an existing directory.");
+
+static PyObject *
+posix__isdir(PyObject *self, PyObject *args)
+{
+    PyObject *opath;
+    char *path;
+    PyUnicodeObject *po;
+    DWORD attributes;
+
+    if (PyArg_ParseTuple(args, "U|:_isdir", &po)) {
+        Py_UNICODE *wpath = PyUnicode_AS_UNICODE(po);
+
+        attributes = GetFileAttributesW(wpath);
+        if (attributes == INVALID_FILE_ATTRIBUTES)
+            Py_RETURN_FALSE;
+        goto check;
+    }
+    /* Drop the argument parsing error as narrow strings
+       are also valid. */
+    PyErr_Clear();
+
+    if (!PyArg_ParseTuple(args, "et:_isdir",
+                          Py_FileSystemDefaultEncoding, &path))
+        return NULL;
+
+    attributes = GetFileAttributesA(path);
+    if (attributes == INVALID_FILE_ATTRIBUTES)
+        Py_RETURN_FALSE;
+
+check:
+    if (attributes & FILE_ATTRIBUTE_DIRECTORY)
+        Py_RETURN_TRUE;
+    else
+        Py_RETURN_FALSE;
+}
 #endif /* MS_WINDOWS */
 
 #ifdef HAVE_PLOCK
@@ -6610,7 +6648,7 @@
 {
     Py_buffer pbuf;
     int fd;
-    Py_ssize_t size;
+    Py_ssize_t size, len;
 
     if (!PyArg_ParseTuple(args, "is*:write", &fd, &pbuf))
         return NULL;
@@ -6618,8 +6656,15 @@
         PyBuffer_Release(&pbuf);
         return posix_error();
     }
+    len = pbuf.len;
     Py_BEGIN_ALLOW_THREADS
-    size = write(fd, pbuf.buf, (size_t)pbuf.len);
+#if defined(MS_WIN64) || defined(MS_WINDOWS)
+    if (len > INT_MAX)
+        len = INT_MAX;
+    size = write(fd, pbuf.buf, (int)len);
+#else
+    size = write(fd, pbuf.buf, len);
+#endif
     Py_END_ALLOW_THREADS
     PyBuffer_Release(&pbuf);
     if (size < 0)
@@ -8968,6 +9013,7 @@
     {"abort",           posix_abort, METH_NOARGS, posix_abort__doc__},
 #ifdef MS_WINDOWS
     {"_getfullpathname",        posix__getfullpathname, METH_VARARGS, NULL},
+    {"_isdir",                  posix__isdir, METH_VARARGS, posix__isdir__doc__},
 #endif
 #ifdef HAVE_GETLOADAVG
     {"getloadavg",      posix_getloadavg, METH_NOARGS, posix_getloadavg__doc__},
Index: b/Modules/selectmodule.c
===================================================================
--- a/Modules/selectmodule.c	2011-07-26 15:35:43.193487157 +0400
+++ b/Modules/selectmodule.c	2011-07-26 15:35:57.011609564 +0400
@@ -912,7 +912,7 @@
 PyDoc_STRVAR(pyepoll_register_doc,
 "register(fd[, eventmask]) -> None\n\
 \n\
-Registers a new fd or modifies an already registered fd.\n\
+Registers a new fd or raises an IOError if the fd is already registered.\n\
 fd is the target file descriptor of the operation.\n\
 events is a bit set composed of the various EPOLL constants; the default\n\
 is EPOLL_IN | EPOLL_OUT | EPOLL_PRI.\n\
Index: b/Modules/threadmodule.c
===================================================================
--- a/Modules/threadmodule.c	2011-07-26 15:35:43.328682517 +0400
+++ b/Modules/threadmodule.c	2011-07-26 15:35:57.015632650 +0400
@@ -715,7 +715,7 @@
 
 PyDoc_STRVAR(exit_doc,
 "exit()\n\
-(PyThread_exit_thread() is an obsolete synonym)\n\
+(exit_thread() is an obsolete synonym)\n\
 \n\
 This is synonymous to ``raise SystemExit''.  It will cause the current\n\
 thread to exit silently unless the exception is caught.");
Index: b/Objects/descrobject.c
===================================================================
--- a/Objects/descrobject.c	2011-07-26 15:35:51.715300738 +0400
+++ b/Objects/descrobject.c	2011-07-26 15:35:57.021619941 +0400
@@ -801,6 +801,20 @@
     return PyObject_Str(pp->dict);
 }
 
+static PyObject *
+proxy_repr(proxyobject *pp)
+{
+    PyObject *dictrepr;
+    PyObject *result;
+
+    dictrepr = PyObject_Repr(pp->dict);
+    if (dictrepr == NULL)
+        return NULL;
+    result = PyString_FromFormat("dict_proxy(%s)", PyString_AS_STRING(dictrepr));
+    Py_DECREF(dictrepr);
+    return result;
+}
+
 static int
 proxy_traverse(PyObject *self, visitproc visit, void *arg)
 {
@@ -832,7 +846,7 @@
     0,                                          /* tp_getattr */
     0,                                          /* tp_setattr */
     (cmpfunc)proxy_compare,                     /* tp_compare */
-    0,                                          /* tp_repr */
+    (reprfunc)proxy_repr,                       /* tp_repr */
     0,                                          /* tp_as_number */
     &proxy_as_sequence,                         /* tp_as_sequence */
     &proxy_as_mapping,                          /* tp_as_mapping */
Index: b/Objects/stringobject.c
===================================================================
--- a/Objects/stringobject.c	2011-07-26 15:35:51.561542952 +0400
+++ b/Objects/stringobject.c	2011-07-26 15:35:57.031342459 +0400
@@ -2173,7 +2173,9 @@
 Return a copy of the string S, where all characters occurring\n\
 in the optional argument deletechars are removed, and the\n\
 remaining characters have been mapped through the given\n\
-translation table, which must be a string of length 256.");
+translation table, which must be a string of length 256 or None.\n\
+If the table argument is None, no translation is applied and\n\
+the operation simply removes the characters in deletechars.");
 
 static PyObject *
 string_translate(PyStringObject *self, PyObject *args)
Index: b/Parser/myreadline.c
===================================================================
--- a/Parser/myreadline.c	2011-07-26 15:35:52.311078258 +0400
+++ b/Parser/myreadline.c	2011-07-26 15:35:57.035329567 +0400
@@ -44,6 +44,7 @@
         if (PyOS_InputHook != NULL)
             (void)(PyOS_InputHook)();
         errno = 0;
+        clearerr(fp);
         p = fgets(buf, len, fp);
         if (p != NULL)
             return 0; /* No error */
Index: b/Python/_warnings.c
===================================================================
--- a/Python/_warnings.c	2011-07-26 15:35:52.000748103 +0400
+++ b/Python/_warnings.c	2011-07-26 15:35:57.039957466 +0400
@@ -491,7 +491,7 @@
 
     /* Setup filename. */
     *filename = PyDict_GetItemString(globals, "__file__");
-    if (*filename != NULL) {
+    if (*filename != NULL && PyString_Check(*filename)) {
             Py_ssize_t len = PyString_Size(*filename);
         const char *file_str = PyString_AsString(*filename);
             if (file_str == NULL || (len < 0 && PyErr_Occurred()))
@@ -514,6 +514,7 @@
     }
     else {
         const char *module_str = PyString_AsString(*module);
+        *filename = NULL;
         if (module_str && strcmp(module_str, "__main__") == 0) {
             PyObject *argv = PySys_GetObject("argv");
             if (argv != NULL && PyList_Size(argv) > 0) {
Index: b/Python/bltinmodule.c
===================================================================
--- a/Python/bltinmodule.c	2011-07-26 15:35:52.155989943 +0400
+++ b/Python/bltinmodule.c	2011-07-26 15:35:57.047330955 +0400
@@ -224,7 +224,7 @@
 static PyObject *
 builtin_callable(PyObject *self, PyObject *v)
 {
-    if (PyErr_WarnPy3k("callable() not supported in 3.x; "
+    if (PyErr_WarnPy3k("callable() not supported in 3.1; "
                        "use isinstance(x, collections.Callable)", 1) < 0)
         return NULL;
     return PyBool_FromLong((long)PyCallable_Check(v));
Index: b/Python/sysmodule.c
===================================================================
--- a/Python/sysmodule.c	2011-07-26 15:35:51.856946011 +0400
+++ b/Python/sysmodule.c	2011-07-26 15:35:57.053075633 +0400
@@ -466,6 +466,7 @@
 {
     if (!PyArg_ParseTuple(args, "i:setcheckinterval", &_Py_CheckInterval))
         return NULL;
+    _Py_Ticker = _Py_CheckInterval;
     Py_INCREF(Py_None);
     return Py_None;
 }
Index: b/Tools/scripts/byext.py
===================================================================
--- a/Tools/scripts/byext.py	2011-07-26 15:35:35.057348648 +0400
+++ b/Tools/scripts/byext.py	2011-07-26 15:35:57.057881224 +0400
@@ -23,12 +23,11 @@
     def statdir(self, dir):
         self.addstats("<dir>", "dirs", 1)
         try:
-            names = os.listdir(dir)
-        except os.error, err:
+            names = sorted(os.listdir(dir))
+        except os.error as err:
             sys.stderr.write("Can't list %s: %s\n" % (dir, err))
             self.addstats("<dir>", "unlistable", 1)
             return
-        names.sort()
         for name in names:
             if name.startswith(".#"):
                 continue # Skip CVS temp files
@@ -53,14 +52,14 @@
         self.addstats(ext, "files", 1)
         try:
             f = open(filename, "rb")
-        except IOError, err:
+        except IOError as err:
             sys.stderr.write("Can't open %s: %s\n" % (filename, err))
             self.addstats(ext, "unopenable", 1)
             return
         data = f.read()
         f.close()
         self.addstats(ext, "bytes", len(data))
-        if '\0' in data:
+        if b'\0' in data:
             self.addstats(ext, "binary", 1)
             return
         if not data:
@@ -77,14 +76,12 @@
         d[key] = d.get(key, 0) + n
 
     def report(self):
-        exts = self.stats.keys()
-        exts.sort()
+        exts = sorted(self.stats.keys())
         # Get the column keys
         columns = {}
         for ext in exts:
             columns.update(self.stats[ext])
-        cols = columns.keys()
-        cols.sort()
+        cols = sorted(columns.keys())
         colwidth = {}
         colwidth["ext"] = max([len(ext) for ext in exts])
         minwidth = 6
@@ -109,14 +106,14 @@
         cols.insert(0, "ext")
         def printheader():
             for col in cols:
-                print "%*s" % (colwidth[col], col),
-            print
+                print("%*s" % (colwidth[col], col), end=" ")
+            print()
         printheader()
         for ext in exts:
             for col in cols:
                 value = self.stats[ext].get(col, "")
-                print "%*s" % (colwidth[col], value),
-            print
+                print("%*s" % (colwidth[col], value), end=" ")
+            print()
         printheader() # Another header at the bottom
 
 def main():
Index: b/configure.in
===================================================================
--- a/configure.in	2011-07-26 15:35:42.619614252 +0400
+++ b/configure.in	2011-07-26 15:35:57.067397584 +0400
@@ -2839,7 +2839,7 @@
 # On Tru64, chflags seems to be present, but calling it will
 # exit Python
 AC_CACHE_CHECK([for chflags], [ac_cv_have_chflags], [dnl
-AC_RUN_IFELSE([AC_LANG_SOURCE([[[
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/stat.h>
 #include <unistd.h>
 int main(int argc, char*argv[])
@@ -2848,7 +2848,7 @@
     return 1;
   return 0;
 }
-]]])],
+]])],
 [ac_cv_have_chflags=yes],
 [ac_cv_have_chflags=no],
 [ac_cv_have_chflags=cross])
@@ -2857,11 +2857,11 @@
   AC_CHECK_FUNC([chflags], [ac_cv_have_chflags="yes"], [ac_cv_have_chflags="no"])
 fi
 if test "$ac_cv_have_chflags" = yes ; then
-  AC_DEFINE(HAVE_CHFLAGS, 1, [Define to 1 if you have the `chflags' function.])
+  AC_DEFINE(HAVE_CHFLAGS, 1, [Define to 1 if you have the 'chflags' function.])
 fi
 
 AC_CACHE_CHECK([for lchflags], [ac_cv_have_lchflags], [dnl
-AC_RUN_IFELSE([AC_LANG_SOURCE([[[
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/stat.h>
 #include <unistd.h>
 int main(int argc, char*argv[])
@@ -2870,13 +2870,13 @@
     return 1;
   return 0;
 }
-]]])],[ac_cv_have_lchflags=yes],[ac_cv_have_lchflags=no],[ac_cv_have_lchflags=cross])
+]])],[ac_cv_have_lchflags=yes],[ac_cv_have_lchflags=no],[ac_cv_have_lchflags=cross])
 ])
 if test "$ac_cv_have_lchflags" = cross ; then
   AC_CHECK_FUNC([lchflags], [ac_cv_have_lchflags="yes"], [ac_cv_have_lchflags="no"])
 fi
 if test "$ac_cv_have_lchflags" = yes ; then
-  AC_DEFINE(HAVE_LCHFLAGS, 1, [Define to 1 if you have the `lchflags' function.])
+  AC_DEFINE(HAVE_LCHFLAGS, 1, [Define to 1 if you have the 'lchflags' function.])
 fi
 
 dnl Check if system zlib has *Copy() functions
Index: b/pyconfig.h.in
===================================================================
--- a/pyconfig.h.in	2011-07-26 15:35:35.346246329 +0400
+++ b/pyconfig.h.in	2011-07-26 15:35:57.072937485 +0400
@@ -100,7 +100,7 @@
 /* Define this if you have the type _Bool. */
 #undef HAVE_C99_BOOL
 
-/* Define to 1 if you have the `chflags' function. */
+/* Define to 1 if you have the 'chflags' function. */
 #undef HAVE_CHFLAGS
 
 /* Define to 1 if you have the `chown' function. */
@@ -391,7 +391,7 @@
    Solaris and Linux, the necessary defines are already defined.) */
 #undef HAVE_LARGEFILE_SUPPORT
 
-/* Define to 1 if you have the `lchflags' function. */
+/* Define to 1 if you have the 'lchflags' function. */
 #undef HAVE_LCHFLAGS
 
 /* Define to 1 if you have the `lchmod' function. */
@@ -1137,6 +1137,9 @@
 /* This must be defined on some systems to enable large file support. */
 #undef _LARGEFILE_SOURCE
 
+/* This must be defined on AIX systems to enable large file support. */
+#undef _LARGE_FILES
+
 /* Define to 1 if on MINIX. */
 #undef _MINIX
 
