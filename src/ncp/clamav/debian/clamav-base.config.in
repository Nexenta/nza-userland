#!/bin/bash

set -e

# Source debconf library
. /usr/share/debconf/confmodule

# This conf script is capable of backing up
db_version 2.0
db_capb backup

#COMMON-FUNCTIONS#

CLAMAVCONF='/etc/clamav/clamd.conf'

slurp_config "$CLAMAVCONF"

# Store conf file values as debconf answers - make sure user changes made 
# outside of debconf are preserved
if [ -n "$User" ]; then
  db_set clamav-base/User "$User" || true
  if ! [ "$User" = 'root' ]; then
    AddGroups=`groups "$User" | awk -F ':' '{print $2}' | sed -e s/"$User"//`
  fi
  if [ -n "$AddGroups" ]; then
    db_set clamav-base/AddGroups "$AddGroups" || true
  fi
fi
if [ -n "$TCPSocket" ]; then
  db_set clamav-base/TcpOrLocal TCP || true
elif [ -n "$LocalSocket" ]; then
  db_set clamav-base/TcpOrLocal UNIX || true
fi
if [ -n "$LocalSocket" ]; then
  db_set clamav-base/LocalSocket "$LocalSocket" || true
fi
if [ -n "$LocalSocketGroup" ]; then
  db_set clamav-base/LocalSocketGroup "$LocalSocketGroup" || true
fi
if [ -n "$LocalSocketMode" ]; then
  db_set clamav-base/LocalSocketMode "$LocalSocketMode" || true
fi
if [ "$FixStaleSocket" = "true" ]; then
  db_set clamav-base/FixStaleSocket true || true
fi
if [ -n "$TCPSocket" ]; then
  db_set clamav-base/TCPSocket "$TCPSocket" || true
fi
if [ -n "$TCPaddr" ]; then
  db_set clamav-base/TCPAddr "$TCPaddr" || true
fi
if [ "$ScanMail" = "true" ]; then
  db_set clamav-base/ScanMail true || true
fi
if [ "$ScanArchive" = "true" ]; then
  db_set clamav-base/ScanArchive true || true
fi
if [ -n "$StreamMaxLength" ]; then
  StreamMaxLength="`echo $StreamMaxLength | sed -e s/M//`"
  if [ "$StreamMaxLength" = "0" ]; then
    StreamMaxLength="25"
  fi
  db_set clamav-base/StreamMaxLength "$StreamMaxLength" || true
fi
if [ -n "$MaxDirectoryRecursion" ]; then
  db_set clamav-base/MaxDirectoryRecursion "$MaxDirectoryRecursion" || true
fi
if [ "$FollowDirectorySymlinks" = "true" ]; then
  db_set clamav-base/FollowDirectorySymlinks true || true
fi
if [ "$FollowFileSymlinks" = "true" ]; then
  db_set clamav-base/FollowFileSymlinks true || true
fi
if [ -n "$ReadTimeout" ] && [ -z "$ThreadTimeout" ]; then
  db_set clamav-base/ReadTimeout "$ReadTimeout" || true
elif
  [ -z "$ReadTimeout" ] && [ -n "$ThreadTimeout" ]; then
  ReadTimeout="$ThreadTimeout"
  db_set clamav-base/ReadTimeout "$ReadTimeout" || true
elif [ -n "$ReadTimeout" ]; then
  db_set clamav-base/ReadTimeout "$ReadTimeout" || true
fi
if [ -n "$MaxThreads" ]; then
  db_set clamav-base/MaxThreads "$MaxThreads" || true
fi
if [ -n "$MaxConnectionQueueLength" ]; then
  db_set clamav-base/MaxConnectionQueueLength "$MaxConnectionQueueLength" || true
fi
if [ "$LogSyslog" = "true" ]; then
  db_set clamav-base/LogSyslog true || true
fi
if [ -n "$LogFile" ]; then
  db_set clamav-base/LogFile "$LogFile" || true
fi
if [ "$LogTime" = "true" ]; then
  db_set clamav-base/LogTime true || true
fi
if [ "$Bytecode" = "true" ]; then
  db_set clamav-base/Bytecode true || true
fi
if [ -n "$BytecodeSecurity" ]; then
  db_set clamav-base/BytecodeSecurity "$BytecodeSecurity" || true
fi
if [ -n "$BytecodeTimeout" ]; then
  db_set clamav-base/BytecodeTimeout "$BytecodeTimeout" || true
fi

# States

StateDebconf()
{
  db_input medium clamav-base/debconf || true
  if ! db_go; then
    STATE="End"
  else
    db_get clamav-base/debconf || true
    if [ "$RET" = "false" ]; then
      STATE="End"
    else
      STATE="Socket"
    fi
  fi
}

StateSocket()
{
  db_input medium clamav-base/TcpOrLocal || true
  if ! db_go; then
    STATE="Debconf"
  else
    db_metaget clamav-base/TcpOrLocal value
    STATE=$RET
  fi
}

StateLocalSocketGroup()
{
  db_input low clamav-base/LocalSocketGroup || true
  if db_go; then
    db_metaget clamav-base/LocalSocketGroup value
    if [ "$RET" = "" ]; then
      db_set clamav-base/LocalSocketGroup "clamav" || true
    fi
    STATE="LocalSocketMode"
  else
    STATE="UNIX"
  fi
}

StateScanMail()
{
  db_input medium clamav-base/ScanMail || true
  if db_go; then
    STATE="ScanArchive"
  else
    db_metaget clamav-base/TcpOrLocal value
    if [ "$RET" = "TCP" ]; then
      STATE="TCPAddr"
    else
      STATE="FixStale"
    fi
  fi
}

StateScanArchive()
{
  db_input low clamav-base/ScanArchive || true
  if db_go; then
    db_metaget clamav-base/ScanArchive value
    if [ "$RET" = "true" ]; then
      STATE="StreamMaxLength"
    else
      STATE="MaxDirectoryRecursion"
    fi
  else
    STATE="ScanMail"
  fi
}

StateMaxDirectoryRecursion()
{
  if inputdigit low clamav-base/MaxDirectoryRecursion; then
    db_metaget clamav-base/MaxDirectoryRecursion value
    if [ "$RET" = "0" ]; then
      STATE="FollowDirectorySymlinks"
    else
      STATE="FollowFileSymlinks"
    fi
  else
      STATE="ScanArchive"
  fi
}

StateFollowFileSymlinks()
{
  db_input low clamav-base/FollowFileSymlinks || true
  if db_go; then
    STATE="ReadTimeout"
  else
    db_metaget clamav-base/MaxDirectoryRecursion value;
    if [ "$RET" = "0" ]; then
      STATE="FollowDirectorySymlinks"
    else
      STATE="MaxDirectoryRecursion"
    fi
  fi
}

StateLogFile()
{
  db_input low clamav-base/LogFile || true
  if db_go; then
    db_metaget clamav-base/LogFile value
    if [ "$RET" = "" ]; then
      db_set clamav-base/LogFile "/var/log/clamav/clamav.log" || true
      STATE="LogTime"
    elif [ "$RET" = 'none' ]; then
      db_set clamav-base/LogFile "" || true
      STATE="SelfCheck"
    else
      STATE="LogTime"
    fi
  else
    STATE="LogSyslog"
  fi
}

StateUser()
{
  db_input medium clamav-base/User || true
  if db_go; then
    db_metaget clamav-base/User value
    if [ "$RET" = "" ]; then
      db_set clamav-base/User "clamav" || true
    fi
    STATE="AddGroups"
  else
    STATE="SelfCheck"
  fi
}

StateBytecode()
{
  db_input low clamav-base/Bytecode || true
  if db_go; then
    db_metaget clamav-base/Bytecode value
    if [ "$RET" = "true" ]; then
      STATE="BytecodeSecurity"
    else
      STATE="End"
    fi
  else
    STATE="AddGroups"
  fi
}

# To many options to configure at configure
if [ "$1" = "reconfigure" ]; then
  STATE="Init"
elif [ -n "$2" ]; then
  if [ -z "$User" ]; then
    STATE="User"
  fi
else
  STATE="End"
fi

[ -z "$STATE" ] && STATE='End'

# This is the statemachine that controls execution. All the 'real' work is 
# performed by subfunctions above. 

while [ "$STATE" != "End" ]; do
  case "$STATE" in
    "Init")
    StateDebconf
    ;;
    "Socket")
    StateSocket
    ;;
    "TCP")
    StateGenericDigit low clamav-base/TCPSocket TCPAddr Socket
    ;;
    "TCPAddr")
    StateGeneric low clamav-base/TCPAddr ScanMail TCP
    ;;
    "UNIX")
    StateGeneric low clamav-base/LocalSocket LocalSocketGroup Socket
    ;;
    "LocalSocketGroup")
    StateLocalSocketGroup
    ;;
    "LocalSocketMode")
    StateGenericDigit low clamav-base/LocalSocketMode FixStale LocalSocketGroup
    ;;
    "FixStale")
    StateGeneric low clamav-base/FixStaleSocket ScanMail LocalSocketMode
    ;;
    "ScanMail")
    StateScanMail
    ;;
    "ScanArchive")
    StateScanArchive
    ;;
    "StreamMaxLength")
    StateGenericDigit low clamav-base/StreamMaxLength MaxDirectoryRecursion ScanArchive
    ;;
    "MaxDirectoryRecursion")
    StateMaxDirectoryRecursion
    ;;
    "FollowDirectorySymlinks")
    StateGeneric low clamav-base/FollowDirectorySymlinks FollowFileSymlinks MaxDirectoryRecursion
    ;;
    "FollowFileSymlinks")
    StateFollowFileSymlinks
    ;;
    "ReadTimeout")
    StateGenericDigit low clamav-base/ReadTimeout MaxThreads FollowFileSymlinks
    ;;
    "MaxThreads")
    StateGenericDigit low clamav-base/MaxThreads MaxConnectionQueueLength ReadTimeout
    ;;
    "MaxConnectionQueueLength")
    StateGenericDigit low clamav-base/MaxConnectionQueueLength LogSyslog MaxThreads
    ;;
    "LogSyslog")
    StateGeneric medium clamav-base/LogSyslog LogFile MaxConnectionQueueLength
    ;;
    "LogFile")
    StateLogFile
    ;;
    "LogTime")
    StateGeneric low clamav-base/LogTime SelfCheck LogFile
    ;;
    "SelfCheck")
    StateGeneric low clamav-base/SelfCheck User LogFile
    ;;
    "User")
    StateUser
    ;;
    "AddGroups")
    StateGeneric medium clamav-base/AddGroups Bytecode User
    ;;
    "Bytecode")
    StateBytecode
    ;;
    "BytecodeSecurity")
    StateGeneric low clamav-base/BytecodeSecurity BytecodeTimeout Bytecode
    ;;
    "BytecodeTimeout")
    StateGenericDigit low clamav-base/BytecodeTimeout End BytecodeSecurity
    ;;
  esac
done
db_stop || true
exit 0
