Building the Debian Perl package
================================

Build Options
-------------

In addition to the ``nostrip'' and ``noopt'' DEB_BUILD_OPTIONS
required by policy (10.1) the build process also recognises the
following perl-specific options:

  x-perl-shared
  x-perl-static
    Select whether /usr/bin/perl is linked to the shared or static
    perl library.  By default the link type is shared on all
    architectures other than i386 (where the relocations incur a
    measurable performance penalty).

  x-perl-notest (or nocheck)
    The regression test suite is normally run after each of the static
    and shared build phases.  It is occaisionally useful to supress
    these tests (when debugging the build process for example, or to
    allow porters to work around known build chain or kernel bugs).

Patches Applied
----------------

A copy of all patches which have been applied to the source are in the
debian/patches directory of the Debian source package.

There are two classes of patches in the directory: debian/patches/fixes/* are
generally applicable to any Perl installation (and usually back-ported
from upstream, or posted to p5p when applied).

Patches in debian/patches/debian implement changes which are specific to
the Debian packaging, such as our @INC ordering or specific to policy
such as not including standard directories in LD_RUN_PATH.

Packaging Details
-----------------

The Debian build process consists of the following components:

  debian/rules
    makefile which drives the build process as usual with Debian
    packages.  This process is slightly more complex than normal to
    simplify bootstrapping a new port--using only basic shell utils, and
    perl (once built, as perl.static).  To bootstrap a new architecture,
    use:

      DEB_BUILD_GNU_TYPE=<arch> debian/rules binary-arch

  debian/config.debian 
    a helper script, invoked by debian/rules to run Configure with
    various options.

  debian/config.over
    used to fiddle some config.sh variables (copied to the source
    directory by the build process where it is picked up by Configure).

  debian/patches
    directory containg the patches applied (see above).  These are maintained
    with TopGit, but if a standalone way to add a new patch is needed 
    (for instance when NMUing), the recommended way is to use quilt(1).
    Running './debian/rules refresh-patchlevel' afterwards will include
    the patch in `perl -V' output.

      quilt new debian/myfix
      quilt add <file>
      [ hack <file> ]
      echo 'patch description (Closes: #xxxxxx)' | quilt header -a
      # (or even better provide a full DEP-3 compatible header)
      quilt refresh
      ./debian/rules refresh-patchlevel

  debian/released-versions
    contains a list of released Debian versions, used by the
    debian/mkprovides script to generate a list of perlapi-<ver>
    provides for perl-base indicating the released versions the package
    is compatible with.

  debian/headers
    list of C headers to process with h2ph, which is run with "-a" to
    pick up any required includes--keep this base list as short as
    possible.

  debian/*.{files{,.static,.shared},docs,moduledocs}
    used to split packages; see the comments/code in the install-stamp
    target of debian/rules.

Managing debian/patches with TopGit
-----------------------------------

This section is targeted at the Debian package maintainers, working with
the Git repository pointed by the Vcs-Git field in debian/control.  NMUers
and the like can use the old way of standalone patch handling described
above, or just hack the source and ignore debian/patches altogether.

First, you need to have the 'topgit' package installed. The current version
as of this writing is 0.8-1.

The TopGit procedure for applying a new patch is:

 tg create fixes/foo upstream # s|fixes|debian| for Debian-specific changes
 <edit .topmsg, include a meaningful Subject for 'tg summary'>
 <hack the source and commit away>
 git checkout master
 tg depend add fixes/foo
 tg update
 git-dch # or just plain dch, YMMV
 tg push # assuming it works

The procedure for tagging a new package version is (broadly):

 dch -r
 ./debian/rules new-build
 git tag -m 'Debian release x' debian/x
 git push --tags

Note that this will create a 'detached' tag: we don't need a long-lived
build branch as debian/patches is regenerated every time.
 
Retiring a source fix (for instance because upstream used a different
implementation):

 git checkout fixes/obsolete
 tg patch | patch -Rp1 # generate a 'revert commit'
 git commit -m 'Revert to upstream fix' # please elaborate
 git checkout master
 tg update
 sed -i '/obsolete/ d' .topdeps # until 'tg depend remove' gets implemented
 git commit -m 'retire fixes/obsolete' .topdeps
 tg push # master
 tg push fixes/obsolete # won't be pushed along with master anymore
 tg delete fixes/obsolete # optional

Credits
-------

Previous maintainers of Debian Perl packages:

  Ray Dassen <jdassen@WI.LeidenUniv.NL>,
  Carl Streeter <streeter@cae.wisc.edu>,
  Robert Sanders <Robert.Sanders@linux.org> and
  Darren Stalder <torin@daft.com>.

 -- Brendan O'Dea <bod@debian.org>  Tue,  8 Mar 2005 19:30:38 +1100

 -- Niko Tyni <ntyni@debian.org> Wed, 03 Feb 2010 14:47:51 +0200

