Description: Patch to fix build on solaris/ncp
Last-Update: 2011-07-21

--- libwibble-40-0.orig/wibble/exception.cpp
+++ libwibble-40-0/wibble/exception.cpp
@@ -90,7 +90,7 @@ string System::desc() const throw ()
 {
 	const int buf_size = 500;
 	char buf[buf_size];
-#if (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE
+#if ((_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE) || defined(__sun)
 	if (strerror_r(m_errno, buf, buf_size))
 	{
 		buf[buf_size - 1] = 0;
--- libwibble-40-0.orig/wibble/log/stream.h
+++ libwibble-40-0/wibble/log/stream.h
@@ -7,6 +7,10 @@
 namespace wibble {
 namespace log {
 
+#ifdef ERR
+#undef ERR
+#endif
+
 /// Urgency of a log message
 enum Level
 {
--- libwibble-40-0.orig/wibble/sys/process.cpp
+++ libwibble-40-0/wibble/sys/process.cpp
@@ -265,10 +265,12 @@ static string describe_rlimit_res_t(int
 		case RLIMIT_DATA: return "max data size";
 		case RLIMIT_STACK: return "max stack size";
 		case RLIMIT_CORE: return "max core file size";
+#ifndef __sun
 		case RLIMIT_RSS: return "max resident set size";
 		case RLIMIT_NPROC: return "max number of processes";
-		case RLIMIT_NOFILE: return "max number of open files";
 		case RLIMIT_MEMLOCK: return "max locked-in-memory address spac";
+#endif
+		case RLIMIT_NOFILE: return "max number of open files";
 #ifndef __APPLE__
 		case RLIMIT_AS: return "address space (virtual memory) limit";
 #endif
@@ -304,14 +306,18 @@ int getCPUTimeLimit(int* max) { return g
 int getFileSizeLimit(int* max) { return getLimit(RLIMIT_FSIZE, max); }
 int getDataMemoryLimit(int* max) { return getLimit(RLIMIT_DATA, max); }
 int getCoreSizeLimit(int* max) { return getLimit(RLIMIT_CORE, max); }
+#ifndef __sun
 int getChildrenLimit(int* max) { return getLimit(RLIMIT_NPROC, max); }
+#endif
 int getOpenFilesLimit(int* max) { return getLimit(RLIMIT_NOFILE, max); }
 
 void setCPUTimeLimit(int value) { setLimit(RLIMIT_CPU, value); }
 void setFileSizeLimit(int value) { setLimit(RLIMIT_FSIZE, value); }
 void setDataMemoryLimit(int value) { setLimit(RLIMIT_DATA, value); }
 void setCoreSizeLimit(int value) { setLimit(RLIMIT_CORE, value); }
+#ifndef __sun
 void setChildrenLimit(int value) { setLimit(RLIMIT_NPROC, value); }
+#endif
 void setOpenFilesLimit(int value) { setLimit(RLIMIT_NOFILE, value); }
 
 }
--- libwibble-40-0.orig/wibble/sys/mutex.h
+++ libwibble-40-0/wibble/sys/mutex.h
@@ -69,7 +69,7 @@ public:
             pthread_mutexattr_t attr;
             pthread_mutexattr_init( &attr );
             if ( recursive ) {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__sun)
                 pthread_mutexattr_settype( &attr, PTHREAD_MUTEX_RECURSIVE );
 #else
                 pthread_mutexattr_settype( &attr, PTHREAD_MUTEX_RECURSIVE_NP );
--- libwibble-40-0.orig/wibble/test-runner.h
+++ libwibble-40-0/wibble/test-runner.h
@@ -2,7 +2,7 @@
 #include <wibble/sys/macros.h>
 
 #include <unistd.h>
-#ifdef POSIX
+#if defined(POSIX) && !defined(__sun)
 #include <wibble/sys/pipe.h>
 #endif
 #include <cstdio>
