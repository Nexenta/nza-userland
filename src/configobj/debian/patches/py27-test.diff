Description: Fix tests on Python 2.7 by making as_* tests proper unit tests
Author: Stefan Parviainen <pafcu@iki.fi>
Origin: http://code.google.com/r/pafcu-configobj/source/detail?r=ccd79e87be5cee5b8a00df75ede01c66ad9308a5
Last-Update: 2011-01-12
--- a/configobj.py
+++ b/configobj.py
@@ -1010,18 +1010,6 @@
         
         If the value is an invalid literal for ``float``, a ``ValueError`` will
         be raised.
-        
-        >>> a = ConfigObj()
-        >>> a['a'] = 'fish'
-        >>> a.as_float('a')
-        Traceback (most recent call last):
-        ValueError: invalid literal for float(): fish
-        >>> a['b'] = '1'
-        >>> a.as_float('b')
-        1.0
-        >>> a['b'] = '3.2'
-        >>> a.as_float('b')
-        3.2000000000000002
         """
         return float(self[key])
     
--- a/tests/functionaltests/test_configobj.py
+++ b/tests/functionaltests/test_configobj.py
@@ -99,3 +99,23 @@
         # This raises a MissingInterpolationOption exception in 4.7.1 and earlier
         repr(c)
 
+    def test_as_functions(self):
+        a = ConfigObj()
+        a['a'] = 'fish'
+        self.assertRaises(ValueError, a.as_bool, 'a')
+        a['b'] = 'True'
+        self.assertEquals(a.as_bool('b'),True)
+        a['b'] = 'off'
+        self.assertEquals(a.as_bool('b'),False)
+        a['a'] = 'fish'
+        self.assertRaises(ValueError, a.as_int, 'a')
+        a['b'] = '1'
+        self.assertEquals(a.as_int('b'),1)
+        a['b'] = '3.2'
+        self.assertRaises(ValueError,a.as_int,'b')
+        a['a'] = 'fish'
+        self.assertRaises(ValueError,a.as_float, 'a')
+        a['b'] = '1'
+        self.assertEqual(a.as_float('b'),1.0)
+        a['b'] = '3.2'
+        self.assertEqual(a.as_float('b'),3.2)
--- a/tests/test_configobj.py
+++ b/tests/test_configobj.py
@@ -576,50 +576,7 @@
     >>> c = ConfigObj(a, unrepr=True)
     >>> type(c['k']) == dict
     1
-        
-    >>> a = ConfigObj()
-    >>> a['a'] = 'fish'
-    >>> a.as_bool('a')
-    Traceback (most recent call last):
-    ValueError: Value "fish" is neither True nor False
-    >>> a['b'] = 'True'
-    >>> a.as_bool('b')
-    1
-    >>> a['b'] = 'off'
-    >>> a.as_bool('b')
-    0
-        
-    >>> a = ConfigObj()
-    >>> a['a'] = 'fish'
-    >>> try:
-    ...     a.as_int('a') #doctest: +ELLIPSIS
-    ... except ValueError, e:
-    ...     err_mess = str(e)
-    >>> err_mess.startswith('invalid literal for int()')
-    1
-    >>> a['b'] = '1'
-    >>> a.as_int('b')
-    1
-    >>> a['b'] = '3.2'
-    >>> try:
-    ...     a.as_int('b') #doctest: +ELLIPSIS
-    ... except ValueError, e:
-    ...     err_mess = str(e)
-    >>> err_mess.startswith('invalid literal for int()')
-    1
-        
-    >>> a = ConfigObj()
-    >>> a['a'] = 'fish'
-    >>> a.as_float('a')
-    Traceback (most recent call last):
-    ValueError: invalid literal for float(): fish
-    >>> a['b'] = '1'
-    >>> a.as_float('b')
-    1.0
-    >>> a['b'] = '3.2'
-    >>> a.as_float('b')
-    3.2000000000000002
-    
+
      Test # with unrepr
      >>> a = '''
      ...     key1 = (1, 2, 3)    # comment
