diff -urN dpkg-1.16.1.1.orig/Makefile.in dpkg-1.16.1.1/Makefile.in
--- dpkg-1.16.1.1.orig/Makefile.in	2011-10-14 09:09:48.000000000 +0400
+++ dpkg-1.16.1.1/Makefile.in	2011-12-05 17:08:30.000000000 +0300
@@ -184,6 +184,7 @@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+INSTZONES_LIBS=@INSTZONES_LIBS@
 INTLLIBS = @INTLLIBS@
 INTL_MACOSX_LIBS = @INTL_MACOSX_LIBS@
 LCOV = @LCOV@
diff -urN dpkg-1.16.1.1.orig/configure.ac dpkg-1.16.1.1/configure.ac
--- dpkg-1.16.1.1.orig/configure.ac	2011-10-14 08:58:09.000000000 +0400
+++ dpkg-1.16.1.1/configure.ac	2011-12-02 20:22:36.000000000 +0300
@@ -47,6 +47,7 @@
 DPKG_LIB_ZLIB
 DPKG_LIB_BZ2
 DPKG_LIB_SELINUX
+DPKG_LIB_INSTZONES
 if test "x$build_dselect" = "xyes"; then
    DPKG_LIB_CURSES
 fi
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/dpkg-db.h dpkg-1.16.1.1/lib/dpkg/dpkg-db.h
--- dpkg-1.16.1.1.orig/lib/dpkg/dpkg-db.h	2011-10-12 09:56:03.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/dpkg-db.h	2011-12-02 20:24:28.000000000 +0300
@@ -186,6 +186,9 @@
   } priority;
   const char *otherpriority;
   const char *section;
+#ifdef WITH_ZONES
+  const char *zone;
+#endif
   struct versionrevision configversion;
   struct filedetails *files;
   struct pkgbin installed;
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/dump.c dpkg-1.16.1.1/lib/dpkg/dump.c
--- dpkg-1.16.1.1.orig/lib/dpkg/dump.c	2011-10-12 09:56:03.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/dump.c	2011-12-02 20:25:39.000000000 +0300
@@ -107,6 +107,22 @@
     varbuf_add_char(vb, '\n');
 }
 
+#ifdef WITH_ZONES
+void
+w_zone(struct varbuf *vb,
+       const struct pkginfo *pigp, const struct pkgbin *pifp,
+       enum fwriteflags flags, const struct fieldinfo *fip)
+{
+  const char *value= pigp->zone;
+  if (!value || !*value) return;
+  if (flags&fw_printheader)
+    varbuf_add_str(vb,"Zone: ");
+  varbuf_add_str(vb,value);
+  if (flags&fw_printheader)
+    varbuf_add_char(vb, '\n');
+}
+#endif
+
 void
 w_charfield(struct varbuf *vb,
             const struct pkginfo *pigp, const struct pkgbin *pifp,
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/fields.c dpkg-1.16.1.1/lib/dpkg/fields.c
--- dpkg-1.16.1.1.orig/lib/dpkg/fields.c	2011-10-14 08:58:09.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/fields.c	2011-12-02 20:27:16.000000000 +0300
@@ -267,6 +267,19 @@
               (int)min(endent - value, 250), value);
 }
 
+#ifdef WITH_ZONES
+void
+f_zone(struct pkginfo *pigp, struct pkgbin *pifp,
+       struct parsedb_state *ps,
+       const char *value, const struct fieldinfo *fip)
+{
+  if (!*value) return;
+  pigp->zone= nfstrsave(value);
+}
+#endif
+
+
+
 void
 f_conffiles(struct pkginfo *pigp, struct pkgbin *pifp,
             struct parsedb_state *ps,
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/parse.c dpkg-1.16.1.1/lib/dpkg/parse.c
--- dpkg-1.16.1.1.orig/lib/dpkg/parse.c	2011-10-12 09:56:03.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/parse.c	2011-12-02 20:29:37.000000000 +0300
@@ -79,6 +79,9 @@
   { "Description",      f_charfield,       w_charfield,      PKGIFPOFF(description)   },
   { "Triggers-Pending", f_trigpend,        w_trigpend                                 },
   { "Triggers-Awaited", f_trigaw,          w_trigaw                                   },
+#ifdef WITH_ZONES
+  { "Zone",             f_zone,            w_zone                                     },
+#endif
   /* Note that aliases are added to the nicknames table. */
   {  NULL                                                                             }
 };
@@ -280,6 +283,13 @@
       dst_pkg->otherpriority = src_pkg->otherpriority;
   }
 
+#ifdef WITH_ZONES
+  if (src_pkg->zone && *src_pkg->zone &&
+      !((ps->flags & pdb_weakclassification) &&
+        dst_pkg->zone && *dst_pkg->zone))
+    dst_pkg->zone = src_pkg->zone;
+#endif
+
   /* Sort out the dependency mess. */
   copy_dependency_links(dst_pkg, &dst_pkgbin->depends, src_pkgbin->depends,
                         (ps->flags & pdb_recordavailable) ? true : false);
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/parsedump.h dpkg-1.16.1.1/lib/dpkg/parsedump.h
--- dpkg-1.16.1.1.orig/lib/dpkg/parsedump.h	2011-10-12 09:56:03.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/parsedump.h	2011-12-02 21:45:54.000000000 +0300
@@ -71,6 +71,9 @@
 freadfunction f_boolean, f_dependency, f_conffiles, f_version, f_revision;
 freadfunction f_configversion;
 freadfunction f_trigpend, f_trigaw;
+#ifdef WITH_ZONES
+freadfunction f_zone;
+#endif
 
 enum fwriteflags {
 	/* Print field header and trailing newline. */
@@ -84,6 +87,9 @@
 fwritefunction w_version, w_null, w_booleandefno, w_dependency, w_conffiles;
 fwritefunction w_filecharf;
 fwritefunction w_trigpend, w_trigaw;
+#ifdef WITH_ZONES
+fwritefunction w_zone;
+#endif
 
 struct fieldinfo {
   const char *name;
diff -urN dpkg-1.16.1.1.orig/lib/dpkg/pkg.c dpkg-1.16.1.1/lib/dpkg/pkg.c
--- dpkg-1.16.1.1.orig/lib/dpkg/pkg.c	2011-10-12 09:56:03.000000000 +0400
+++ dpkg-1.16.1.1/lib/dpkg/pkg.c	2011-12-02 20:31:29.000000000 +0300
@@ -58,6 +58,9 @@
 	blankversion(&pkg->configversion);
 	pkg->files = NULL;
 	pkg->clientdata = NULL;
+#ifdef WITH_ZONES
+        pkg->zone = NULL;
+#endif
 	pkg->trigaw.head = NULL;
 	pkg->trigaw.tail = NULL;
 	pkg->othertrigaw_head = NULL;
diff -urN dpkg-1.16.1.1.orig/m4/dpkg-libs.m4 dpkg-1.16.1.1/m4/dpkg-libs.m4
--- dpkg-1.16.1.1.orig/m4/dpkg-libs.m4	2011-10-14 08:58:09.000000000 +0400
+++ dpkg-1.16.1.1/m4/dpkg-libs.m4	2011-12-05 17:06:39.448878514 +0300
@@ -49,6 +49,27 @@
   DPKG_WITH_COMPRESS_LIB([bz2], [bzlib.h], [BZ2_bzdopen], [bz2])
 ])# DPKG_LIB_BZ2
 
+# DPKG_LIB_INSTZONES
+# ------------------
+# Check for instzones library.
+AC_DEFUN([DPKG_LIB_INSTZONES], [
+AC_ARG_VAR([INSTZONES_LIBS], [linker flags for zones support])dnl
+AC_ARG_WITH(zones,
+    AS_HELP_STRING([--with-zones],
+               [enable support for Solaris zones]))
+if test "x$with_zones" = "xyes"; then
+    AC_CHECK_LIB([instzones], [z_get_zonename],
+        [INSTZONES_LIBS="${INSTZONES_LIBS:+$INSTZONES_LIBS }-linstzones"],
+        [AC_MSG_FAILURE([instzones library not found]
+    )])
+    AC_DEFINE([WITH_ZONES], 1,
+        [Define to 1 to compile in Solaris zones support])
+    AM_CONDITIONAL([WITH_ZONES], [true])
+else
+    AM_CONDITIONAL([WITH_ZONES], [false])
+fi
+])# DPKG_LIB_INSTZONES
+
 # DPKG_LIB_SELINUX
 # ----------------
 # Check for selinux library.
diff -urN dpkg-1.16.1.1.orig/src/Makefile.in dpkg-1.16.1.1/src/Makefile.in
--- dpkg-1.16.1.1.orig/src/Makefile.in	2011-10-14 09:09:48.000000000 +0400
+++ dpkg-1.16.1.1/src/Makefile.in	2011-12-05 17:38:16.764120964 +0300
@@ -78,7 +78,7 @@
 	infodb.$(OBJEXT) divertdb.$(OBJEXT) statdb.$(OBJEXT) \
 	help.$(OBJEXT) main.$(OBJEXT) packages.$(OBJEXT) \
 	processarc.$(OBJEXT) remove.$(OBJEXT) select.$(OBJEXT) \
-	trigproc.$(OBJEXT) update.$(OBJEXT)
+	trigproc.$(OBJEXT) update.$(OBJEXT) zone.$(OBJEXT) 
 dpkg_OBJECTS = $(am_dpkg_OBJECTS)
 am__DEPENDENCIES_1 =
 am__DEPENDENCIES_2 = ../lib/dpkg/libdpkg.a ../lib/compat/libcompat.a \
@@ -172,6 +172,7 @@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+INSTZONES_LIBS = @INSTZONES_LIBS@
 INTLLIBS = @INTLLIBS@
 INTL_MACOSX_LIBS = @INTL_MACOSX_LIBS@
 LCOV = @LCOV@
@@ -313,11 +314,13 @@
 	remove.c \
 	select.c \
 	trigproc.c \
-	update.c
+	update.c \
+	zones.c 
 
 dpkg_LDADD = \
 	$(LDADD) \
-	$(SELINUX_LIBS)
+	$(SELINUX_LIBS) \
+	$(INSTZONES_LIBS)
 
 dpkg_divert_SOURCES = \
 	filesdb.c filesdb.h \
@@ -459,6 +462,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trigcmd.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trigproc.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/update.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zone.Po@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
diff -urN dpkg-1.16.1.1.orig/src/filesdb.c dpkg-1.16.1.1/src/filesdb.c
--- dpkg-1.16.1.1.orig/src/filesdb.c	2011-10-14 08:58:09.000000000 +0400
+++ dpkg-1.16.1.1/src/filesdb.c	2011-12-02 21:47:45.000000000 +0300
@@ -308,8 +308,11 @@
     onerr_abort--;
     if (pkg->status != stat_configfiles) {
       if (saidread == 1) putc('\n',stderr);
-      warning(_("files list file for package `%.250s' missing, assuming "
-                "package has no files currently installed."), pkg->name);
+#ifdef WITH_ZONES
+        if (!((pkg->zone !=NULL) && strncmp(pkg->zone,"global", strlen("global"))==0))
+#endif
+            warning(_("files list file for package `%.250s' missing, assuming "
+                      "package has no files currently installed."), pkg->name);
     }
     pkg->clientdata->files = NULL;
     pkg->clientdata->fileslistvalid = true;
diff -urN dpkg-1.16.1.1.orig/src/main.c dpkg-1.16.1.1/src/main.c
--- dpkg-1.16.1.1.orig/src/main.c	2011-10-12 09:56:12.000000000 +0400
+++ dpkg-1.16.1.1/src/main.c	2011-12-02 20:37:24.000000000 +0300
@@ -193,6 +193,10 @@
 const char *instdir= "";
 struct pkg_list *ignoredependss = NULL;
 
+#ifdef WITH_ZONES
+const char *current_zone = NULL;
+#endif
+
 static const char *
 forcetype_str(char type)
 {
diff -urN dpkg-1.16.1.1.orig/src/main.h dpkg-1.16.1.1/src/main.h
--- dpkg-1.16.1.1.orig/src/main.h	2011-10-12 09:56:12.000000000 +0400
+++ dpkg-1.16.1.1/src/main.h	2011-12-02 20:38:13.000000000 +0300
@@ -141,6 +141,11 @@
 extern struct pkg_list *ignoredependss;
 extern const char native_arch[];
 
+#ifdef WITH_ZONES
+extern const char *current_zone;
+extern bool hollow_install(const char *pkg_zone, const char *admindir);
+#endif
+
 struct invoke_hook {
 	struct invoke_hook *next;
 	const char *command;
diff -urN dpkg-1.16.1.1.orig/src/processarc.c dpkg-1.16.1.1/src/processarc.c
--- dpkg-1.16.1.1.orig/src/processarc.c	2011-10-12 09:56:12.000000000 +0400
+++ dpkg-1.16.1.1/src/processarc.c	2011-12-02 20:41:21.000000000 +0300
@@ -406,6 +406,10 @@
 
   cleanup_pkg_failed= cleanup_conflictor_failed= 0;
 
+#ifdef WITH_ZONES
+  bool hollow = false;
+#endif
+
   pfilename = summarize_filename(filename);
 
   if (stat(filename,&stab)) ohshite(_("cannot access archive"));
@@ -445,6 +449,13 @@
 
   parsedb(cidir, pdb_recordavailable | pdb_rejectstatus | pdb_ignorefiles |
           parsedb_force_flags(), &pkg);
+
+#ifdef WITH_ZONES
+   /* check zone */
+   if (hollow_install(pkg->zone, dpkg_db_get_dir()))
+     hollow = true;
+#endif
+
   if (!pkg->files) {
     pkg->files= nfmalloc(sizeof(struct filedetails));
     pkg->files->next = NULL;
@@ -830,6 +841,10 @@
    * files get replaced ‘as we go’.
    */
 
+#ifdef WITH_ZONES
+  if (!hollow) { /* in non-global zone we shouldn't unpack archive */
+#endif
+
   m_pipe(p1);
   push_cleanup(cu_closepipe, ehflag_bombout, NULL, 0, 1, (void *)&p1[0]);
   pid = subproc_fork();
@@ -1050,6 +1065,10 @@
   debug(dbg_general, "process_archive updating info directory");
   pkg_infodb_update(pkg, cidir, cidirrest);
 
+#ifdef WITH_ZONES
+  } /* end of hollow install */
+#endif
+
   /*
    * Update the status database.
    *
diff -urN dpkg-1.16.1.1.orig/src/zone.c dpkg-1.16.1.1/src/zone.c
--- dpkg-1.16.1.1.orig/src/zone.c	1970-01-01 03:00:00.000000000 +0300
+++ dpkg-1.16.1.1/src/zone.c	2011-12-02 19:59:27.000000000 +0300
@@ -0,0 +1,74 @@
+/*
+ * dpkg - main program for package management
+ * zone.c - support for Solaris Zones
+ *
+ * Copyright © 2011 Nexenta Systems, Inc.  All rights reserved.
+ *
+ * This is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <instzones_api.h>
+
+bool
+hollow_install(const char *pkg_zone, const char *admindir) 
+{
+    int k;
+    char *current_zone = NULL;
+    char *zonename = NULL;
+    char *zonepath = NULL;
+    bool hollow = false;
+
+    zoneList_t zlst;
+    zoneBrandList_t *brands = NULL;
+
+    current_zone = z_get_zonename();
+
+    if ((current_zone!=NULL) && (*current_zone !='\0'))
+	    printf("Processing in zone: %s\n",current_zone);
+    
+    if ((pkg_zone != NULL) && strncmp(pkg_zone,"global",strlen("global")) == 0) { 
+	    if (z_running_in_global_zone()) {
+		    if ((brands = z_make_brand_list("native cluster "," ")) == NULL) {
+			    return false;
+		    }
+		    zlst = z_get_nonglobal_zone_list_by_brand(brands);
+		    if (zlst == (zoneList_t)NULL) {
+			    hollow = false;
+		    } else {
+			    for (k=0; (zonename=z_zlist_get_zonename(zlst,k)) != NULL; k++) {
+				if (z_zlist_get_current_state(zlst,k) == 
+				    ZONE_STATE_INSTALLED || z_zlist_get_current_state(zlst,k) == 
+				    ZONE_STATE_RUNNING || z_zlist_get_current_state(zlst,k) == 
+				    ZONE_STATE_DOWN) {
+					zonepath = z_zlist_get_zonepath(zlst,k);
+					/* admindir in zone, hollow installation */
+					if (strstr(admindir, zonepath) != NULL)
+						hollow = true;
+		    		}
+			    }
+		    }    
+		    z_free_brand_list(brands);
+		    z_free_zone_list(zlst);
+	    } else {
+		    /* non-global zone, hollow installation */
+		    hollow = true;
+	    }	
+    }
+
+    return hollow;
+}
