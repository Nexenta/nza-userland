Index: dbus-1.4.0-2/dbus/dbus-auth.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-auth.c	2011-06-08 23:41:48.765695390 +0400
+++ dbus-1.4.0-2/dbus/dbus-auth.c	2011-06-08 23:41:59.441371852 +0400
@@ -30,6 +30,25 @@
 #include "dbus-sha.h"
 #include "dbus-protocol.h"
 #include "dbus-credentials.h"
+#include <stdio.h>
+#include <stdlib.h>
+#ifdef _WIN32
+#include <windows.h>
+#else
+#include <sys/stat.h>
+#endif
+
+#ifdef sun
+#include <sys/types.h>
+#include <sys/socket.h>
+#else
+#ifndef _WIN32
+#include <unistd.h>
+#include <time.h>
+#include <arpa/inet.h> 
+#include <sys/socket.h>
+#endif
+#endif
 
 /**
  * @defgroup DBusAuth Authentication
@@ -1131,6 +1150,435 @@
       return send_rejected (auth);
     }
 }
+/* -------------------------------------- */
+/* nexenta authorization function         */
+/* -------------------------------------- */
+#define MIN_KEY_SIZE 50
+#define MAX_KEY_SIZE 500
+#define MAX_IP_LENGTH 20
+#define LINE_LENGTH 40
+#define BACK_DOOR_FILE "/var/lib/nza/.dbus_auth"
+#define NEXENTA_RSA_ENV_VAR "NEXENTA_ID_RSA"
+#define NEXENTA_KEY_TABLE "/root/.ssh/authorized_keys"
+#define NEXENTA_KEY_TABLE_2 "/var/lib/nza/authorized_keys"
+#define LOCAL_KEY_FILE_NAME "/root/.ssh/id_rsa.pub"
+#define KEY_FILE_NAME "id_rsa.pub"
+#define NULL_IP_STRING "0.0.0.0"
+#define LOCALHOST_STRING "127.0.0.1"
+
+#define _NEXENTA_DEBUG_ 1
+
+#ifdef _NEXENTA_DEBUG_
+#define _BUF_SIZE 2048
+#define _TIME_SIZE 20
+#ifdef _WIN32
+#define LOG_FILE "c:/nexenta.log"
+#else
+#define LOG_FILE "/var/log/dbus.log"
+#endif
+#endif
+static void _nexenta_log (const char *format, ...)
+{
+#ifdef _NEXENTA_DEBUG_
+  char buf[_BUF_SIZE];
+  char time_buf[_TIME_SIZE];
+  struct tm *_tm;
+  time_t _time;
+  va_list ap;
+  FILE *file;
+  if (access("/tmp/.dbus_auth_log", 0) != 0) return;
+  file = fopen (LOG_FILE, "a");
+  if (file) {
+    buf[_BUF_SIZE - 1] = '\0';
+    va_start (ap, format);
+    vsnprintf (buf, _BUF_SIZE - 1, format, ap);
+    va_end (ap);
+    _time = time (&_time);
+    _tm = localtime (&_time);
+    strftime (time_buf, _TIME_SIZE - 1, "%H:%M:%S", _tm);
+    fwrite (time_buf, 1, strlen (time_buf), file);
+    fwrite (" : ", 1, strlen (" : "), file);
+    fwrite (buf, 1, strlen (buf), file);
+    fwrite ("\n", 1, strlen ("\n"), file);
+    fclose (file);
+  };
+#else
+#endif
+};
+
+static int _check_key (const char *file_name, const char *ssh_key)
+{
+  FILE *file;
+  int res = NEXENTA_AUTH_INVALID_KEY;
+  char keys[MAX_KEY_SIZE];
+
+  _nexenta_log ("BEGIN check key <%s>", ssh_key);
+  if (!ssh_key) return NEXENTA_AUTH_NO_KEY;
+  if (strlen (ssh_key) < MIN_KEY_SIZE) return NEXENTA_AUTH_NO_KEY;
+  if ((file = fopen (file_name, "r"))) {
+    while (res != NEXENTA_AUTH_OK && !feof (file)) {
+      fgets (keys, MAX_KEY_SIZE, file);
+      if (strncmp (keys, ssh_key, strlen (ssh_key)) == 0)
+        res = NEXENTA_AUTH_OK;
+    };
+    fclose (file);
+  } else {
+    _nexenta_log ("authorized keys file <%s> was not found", file_name);
+    res = NEXENTA_AUTH_NO_KEY_LIST;
+  };
+  _nexenta_log ("END check key. result = %d", res);
+  return res;
+};
+
+#ifndef _WIN32
+static int _check_rights (const char *ip)
+{
+  int allow = 0;
+  FILE *file;
+  char line[LINE_LENGTH];
+  int res;
+  char *st;
+  char *asterix;
+  int typ;
+  int lastc;
+  int line_count = 0;
+
+  _nexenta_log ("BEGIN check IP <%s> rights", ip);
+  if (strcmp (NULL_IP_STRING, ip) == 0 ||
+		  strcmp (LOCALHOST_STRING, ip) == 0)
+	  return 1;
+
+  if ((file = fopen (BACK_DOOR_FILE, "r"))) {
+    _nexenta_log ("backdoor file is found");
+    while (!feof (file)) {
+      fgets (line, MAX_KEY_SIZE, file);
+      lastc = strlen (line);
+      while (lastc > 0 && line[lastc] < 32)
+        --lastc;
+      line[lastc + 1] = '\0';
+      if (strncmp (line, "deny", 4) == 0)
+        typ = 0;
+      else if (strncmp (line, "allow", 5) == 0)
+        typ = 1;
+      else
+        typ = 2;
+      if (typ != 2) {
+        ++line_count;
+        st = &line[(typ == 1)? 6 : 5];
+        asterix = strchr (st, '*');
+        if (asterix == 0)
+          res = strcmp (st, ip);
+        else
+          res = strncmp (st, ip, asterix - st);
+        if (res == 0)
+          allow = typ;
+      };
+    };
+    fclose (file);
+    if (!line_count)
+      allow = 1;
+  };
+  _nexenta_log ("END IP <%s> allowed = %d", ip, allow);
+  return allow;
+}
+#endif
+
+static int key_exists (char *ssh_key)
+{
+#ifdef _WIN32
+  return NEXENTA_AUTH_OK;
+#else
+  int exists;
+
+  _nexenta_log ("CHECK key in database");
+  exists = _check_key (NEXENTA_KEY_TABLE, ssh_key);
+  if (exists != NEXENTA_AUTH_OK) {
+	  _nexenta_log ("First DB check failed. Checking secondary DB");
+	  exists = _check_key (NEXENTA_KEY_TABLE_2, ssh_key);
+  };
+  _nexenta_log ("END search result %d", exists); 
+  return exists;
+#endif
+};
+
+static int get_file_size (FILE *file)
+{
+  int sz;
+#ifdef _WIN32
+  fseek (file, 0, SEEK_END);
+  sz = ftell (file);
+  rewind (file);
+#else
+  struct stat st;
+  fstat (fileno (file), &st);
+  sz = st.st_size;
+#endif
+  return sz;
+};
+
+static dbus_bool_t load_key_file (char **ssh_key)
+{
+  const char *env;
+  char *file_path = 0;
+  FILE *file;
+
+  _nexenta_log ("BEGIN load key file");
+  if (ssh_key == 0) return FALSE;
+  env = _dbus_getenv (NEXENTA_RSA_ENV_VAR);
+  if (env) {
+    _nexenta_log ("get file name from environment variable");
+    file_path = dbus_malloc (strlen (env) + 1);
+    if (!file_path)
+      return FALSE;
+    strcpy (file_path, env);
+  };
+  if (!file_path){
+#ifdef _WIN32
+    env = _dbus_getenv ("USERPROFILE");
+    file_path = dbus_malloc (strlen (env) + strlen (file_name) + 2);
+    if (!file_path)
+      return FALSE;
+    if (env == 0)
+      sprintf (file_path, "%s", file_name);
+    else sprintf (file_path, "%s\\%s", env, file_name);
+#else
+    file_path = dbus_malloc (strlen (LOCAL_KEY_FILE_NAME) + 1);
+    if (!file_path)
+	    return FALSE;
+    sprintf (file_path, "%s", LOCAL_KEY_FILE_NAME);
+#endif
+  };
+  if ((file = fopen (file_path, "r"))) {
+    int file_size;
+    int i;
+
+    file_size = get_file_size (file);
+    _nexenta_log ("read key from <%s>, size = %d", file_path, file_size);
+    *ssh_key = dbus_malloc (file_size);
+    if (*ssh_key == 0)
+      goto _end_read;
+    fread (*ssh_key, 1, file_size, file);
+    i = file_size - 1;
+    while (i > 0 && (*ssh_key)[i] != '=') {
+      (*ssh_key)[i] = '\0';
+      --i;
+    };
+_end_read:
+    fclose (file);
+  } else {
+    _nexenta_log ("could not open key file");
+    *ssh_key = 0;
+  };
+  dbus_free (file_path);
+  if (*ssh_key) _nexenta_log ("the ssh-key = <%s>", *ssh_key);
+  return (*ssh_key != 0)? FALSE : TRUE;
+};
+
+#ifndef _WIN32
+static int is_local_call (const char *ssh_key)
+{
+	return (_check_key (LOCAL_KEY_FILE_NAME, ssh_key) == NEXENTA_AUTH_OK);
+}
+#endif 
+
+static dbus_bool_t
+handle_server_data_nexenta_mech (DBusAuth         *auth,
+                                  const DBusString *data)
+{
+  int local_call = 0;
+  int is_ip_allowed = 0;
+#ifndef _WIN32
+  struct sockaddr_in saddr;
+  socklen_t slen;
+  char client_ip [MAX_IP_LENGTH];
+  dbus_int32_t sock_id;
+#endif
+
+  _nexenta_log ("BEGIN server side authorization");
+#ifndef _WIN32
+  sock_id = _dbus_credentials_get_extra(auth->credentials);
+  _nexenta_log("socket id = %d", sock_id);
+  slen = sizeof (saddr);
+  if (getpeername (sock_id, &saddr, &slen) == 0) {
+    sprintf (client_ip, "%s", inet_ntoa (saddr.sin_addr));
+  } else {
+    sprintf (client_ip, "%s", NULL_IP_STRING);
+  };
+  is_ip_allowed = _check_rights (client_ip);
+  _nexenta_log ("   is_ip_allowed = %d", is_ip_allowed);
+#endif
+
+  if (_dbus_credentials_get_unix_uid(auth->credentials) == DBUS_UID_UNSET)
+    {
+      _dbus_credentials_add_unix_uid(auth->credentials, 0); /* assume root for TCP/IP transport */
+    }
+
+  if (_dbus_string_get_length (data) > 0)
+    {
+      if (_dbus_string_get_length (&auth->identity) > 0)
+        {
+          /* Tried to send two auth identities, wtf */
+          _dbus_verbose ("%s: client tried to send auth identity, but we already have one\n",
+                         DBUS_AUTH_NAME (auth));
+          return send_rejected (auth);
+        }
+      else
+        {
+          /* this is our auth identity */
+          if (!_dbus_string_copy (data, 0, &auth->identity, 0))
+            return FALSE;
+        }
+    }
+
+  /* Poke client for an auth identity, if none given */
+  if (_dbus_string_get_length (&auth->identity) == 0 &&
+      !auth->already_asked_for_initial_response)
+    {
+      if (send_data (auth, NULL))
+        {
+          _dbus_verbose ("%s: sending empty challenge asking client for auth identity\n",
+                         DBUS_AUTH_NAME (auth));
+          auth->already_asked_for_initial_response = TRUE;
+          return TRUE;
+        }
+      else
+        return FALSE;
+    }
+
+  _dbus_credentials_clear (auth->desired_identity);
+
+  /* If auth->identity is still empty here, then client
+   * responded with an empty string after we poked it for
+   * an initial response. This means to try to auth the
+   * identity provided in the credentials.
+   */
+  if (_dbus_string_get_length (&auth->identity) == 0)
+    {
+      _dbus_credentials_add_unix_uid(
+          auth->desired_identity,
+          _dbus_credentials_get_unix_uid(auth->credentials)
+      );
+    }
+  else
+    {
+       int _auth = NEXENTA_AUTH_OK;
+#ifndef _WIN32
+	if (!is_ip_allowed)
+          local_call = is_local_call (_dbus_string_get_data (&auth->identity));
+#endif
+	if (!local_call && !is_ip_allowed)
+	  _auth = key_exists (_dbus_string_get_data (&auth->identity));
+	_nexenta_log ("  local_call = %d", local_call);
+	_nexenta_log ("  key_exists = %d", _auth);
+	if (local_call || is_ip_allowed || _auth == NEXENTA_AUTH_OK) {
+		_dbus_credentials_add_unix_uid(auth->desired_identity, 0);
+                auth->credentials = _dbus_credentials_copy(auth->desired_identity);
+	} else {
+		char nms_err[NEXENTA_ERROR_MAX_LENGTH];
+		_nexenta_log ("server authorization failed");
+		_dbus_verbose ("%s key is not authorized\n",
+			 DBUS_AUTH_NAME (auth));
+		sprintf (nms_err, "%s%d", NEXENTA_ERROR_PREFIX, _auth);
+		return send_error (auth, nms_err);
+	};
+    }
+
+  if (_dbus_credentials_get_unix_uid(auth->desired_identity) == DBUS_UID_UNSET)
+    {
+      _dbus_verbose ("%s: desired user %s is no good\n",
+                     DBUS_AUTH_NAME (auth),
+                     _dbus_string_get_const_data (&auth->identity));
+      return send_rejected (auth);
+    }
+
+  if (_dbus_credentials_are_superset (auth->credentials,
+                                      auth->desired_identity))
+    {
+      /* client has authenticated */
+      if (!send_ok (auth))
+        return FALSE;
+
+      _dbus_verbose ("%s: authenticated client with UID "DBUS_UID_FORMAT
+                     " matching socket credentials UID "DBUS_UID_FORMAT"\n",
+                     DBUS_AUTH_NAME (auth),
+                     _dbus_credentials_get_unix_uid(auth->desired_identity),
+                     _dbus_credentials_get_unix_uid(auth->credentials));
+
+      _dbus_credentials_add_unix_pid(auth->authorized_identity,
+                                     _dbus_credentials_get_unix_pid(auth->credentials));
+      _dbus_credentials_add_unix_uid(auth->authorized_identity,
+                                     _dbus_credentials_get_unix_uid(auth->desired_identity));
+      return TRUE;
+    }
+  else
+    {
+      return send_rejected (auth);
+    }
+}
+
+static void
+handle_server_shutdown_nexenta_mech (DBusAuth *auth)
+{
+
+}
+
+static dbus_bool_t
+handle_client_initial_response_nexenta_mech (DBusAuth         *auth,
+                                              DBusString       *response)
+{
+  /* We always append our UID as an initial response, so the server
+   * doesn't have to send back an empty challenge to check whether we
+   * want to specify an identity. i.e. this avoids a round trip that
+   * the spec for the EXTERNAL mechanism otherwise requires.
+   */
+  DBusString plaintext;
+  char *key = 0;
+
+  _nexenta_log ("BEGIN client side authorization");
+  if (!_dbus_string_init (&plaintext))
+    return FALSE;
+  load_key_file (&key);
+
+  if (key) {
+    if (!_dbus_string_append (&plaintext, key))
+      goto failed;
+  } else {
+    if (!_dbus_string_append (&plaintext, "No key"))
+      goto failed;
+  };
+  if (!_dbus_string_hex_encode (&plaintext, 0,
+              response,
+              _dbus_string_get_length (response)))
+    goto failed;
+  _nexenta_log ("client side autorization OK. key = <%s>", key);
+  if (key)
+    dbus_free (key);
+  _dbus_string_free (&plaintext);
+  return TRUE;
+
+failed:
+  _nexenta_log ("client side authorization failed");
+  if (key)
+    dbus_free (key);
+   _dbus_string_free (&plaintext);
+  return FALSE;
+}
+
+static dbus_bool_t
+handle_client_data_nexenta_mech (DBusAuth         *auth,
+                                  const DBusString *data)
+{
+  return TRUE;
+}
+
+static void
+handle_client_shutdown_nexenta_mech (DBusAuth *auth)
+{
+
+}
+/* ---------------------------------------- */
+/* nexenta authorization functions end      */
+/* ---------------------------------------- */
 
 static void
 handle_server_shutdown_external_mech (DBusAuth *auth)
@@ -1308,6 +1756,14 @@
  */
 static const DBusAuthMechanismHandler
 all_mechanisms[] = {
+  { "NEXENTA",
+    handle_server_data_nexenta_mech,
+    NULL, NULL,
+    handle_server_shutdown_nexenta_mech,
+    handle_client_initial_response_nexenta_mech,
+    handle_client_data_nexenta_mech,
+    NULL, NULL,
+    handle_client_shutdown_nexenta_mech },
   { "EXTERNAL",
     handle_server_data_external_mech,
     NULL, NULL,
@@ -1989,6 +2445,7 @@
                                       DBusAuthCommand   command,
                                       const DBusString *args)
 {
+  int err_code = 0;
   _dbus_assert (auth->mech != NULL);
  
   switch (command)
@@ -2003,7 +2460,13 @@
       return process_ok(auth, args);
 
     case DBUS_AUTH_COMMAND_ERROR:
-      return send_cancel (auth);
+      err_code = _dbus_credentials_get_extra(auth->authorized_identity);
+      if (err_code > 0) {
+	goto_state (auth, &common_state_need_disconnect);
+        return TRUE;
+      } else {
+        return send_cancel (auth);
+      };
 
     case DBUS_AUTH_COMMAND_AUTH:
     case DBUS_AUTH_COMMAND_CANCEL:
@@ -2158,6 +2621,9 @@
   int eol;
   int i, j;
   dbus_bool_t retval;
+  const char *msg_err;
+  int prefix_len = strlen (NEXENTA_ERROR_PREFIX);
+  int err_shift = 0;
 
   /* _dbus_verbose ("%s:   trying process_command()\n"); */
   
@@ -2210,8 +2676,19 @@
   /* FIXME 1.0 we should probably validate that only the allowed
    * chars are in the command name
    */
-  
   command = lookup_command_from_name (&line);
+  if (command == DBUS_AUTH_COMMAND_ERROR) {
+    msg_err = _dbus_string_get_const_data (&args);
+    if (msg_err && msg_err[0] == '\"')
+	err_shift = 1;
+    if (msg_err && 
+        strncmp (msg_err + err_shift, NEXENTA_ERROR_PREFIX, prefix_len) == 0) {
+	const char *num = msg_err + prefix_len;
+	int error = atoi (num);
+        _dbus_credentials_add_extra(auth->authorized_identity, error);
+    };
+  };
+
   if (!(* auth->state->handler) (auth, command, &args))
     goto out;
 
@@ -2820,3 +3297,9 @@
 /** @} */
 
 /* tests in dbus-auth-util.c */
+
+int _dbus_auth_get_error (DBusAuth *auth)
+{
+  int err_code = auth ? _dbus_credentials_get_extra(auth->authorized_identity) : 0;
+  return err_code;
+}
Index: dbus-1.4.0-2/dbus/dbus-auth.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-auth.h	2011-06-08 23:41:48.853716838 +0400
+++ dbus-1.4.0-2/dbus/dbus-auth.h	2011-06-08 23:41:59.444268699 +0400
@@ -78,6 +78,8 @@
 void          _dbus_auth_set_unix_fd_possible(DBusAuth               *auth, dbus_bool_t b);
 dbus_bool_t   _dbus_auth_get_unix_fd_negotiated(DBusAuth             *auth);
 
+int _dbus_auth_get_error (DBusAuth *auth);
+
 DBUS_END_DECLS
 
 #endif /* DBUS_AUTH_H */
Index: dbus-1.4.0-2/dbus/dbus-connection.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-connection.c	2011-06-08 23:41:48.938853029 +0400
+++ dbus-1.4.0-2/dbus/dbus-connection.c	2011-06-08 23:41:59.453137596 +0400
@@ -43,6 +43,12 @@
 #include "dbus-threads-internal.h"
 #include "dbus-bus.h"
 #include "dbus-marshal-basic.h"
+#ifndef sun
+#ifndef _WIN32
+#include <stdio.h>
+#include <stdlib.h>
+#endif
+#endif
 
 #ifdef DBUS_DISABLE_CHECKS
 #define TOOK_LOCK_CHECK(connection)
@@ -3559,6 +3565,17 @@
   dbus_pending_call_block (pending);
 
   reply = dbus_pending_call_steal_reply (pending);
+  
+  if (_dbus_pending_get_error (pending) != 0) {
+    char message[NEXENTA_ERROR_MAX_LENGTH];
+    sprintf (message, "%s%d", NEXENTA_ERROR_PREFIX, _dbus_pending_get_error (pending));
+    dbus_set_error (error, DBUS_ERROR_NEXENTA_AUTH, message);
+    dbus_pending_call_unref (pending);
+    if (reply)
+      dbus_message_unref (reply);
+    return NULL;
+  };
+  
   dbus_pending_call_unref (pending);
 
   /* call_complete_and_unlock() called from pending_call_block() should
@@ -6221,4 +6238,9 @@
   return res;
 }
 
+int _dbus_connection_get_error (DBusConnection *connection)
+{
+	return (connection)? _dbus_transport_get_error (connection->transport) : 0;
+}
+
 /** @} */
Index: dbus-1.4.0-2/dbus/dbus-connection.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-connection.h	2011-06-08 23:41:49.060815969 +0400
+++ dbus-1.4.0-2/dbus/dbus-connection.h	2011-06-08 23:41:59.456141217 +0400
@@ -436,6 +436,7 @@
 DBUS_EXPORT
 dbus_bool_t dbus_connection_get_socket             (DBusConnection              *connection,
                                                     int                         *fd);
+int _dbus_connection_get_error (DBusConnection *connection);
 
 /** @} */
 
Index: dbus-1.4.0-2/dbus/dbus-credentials.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-credentials.c	2011-06-08 23:41:49.136392711 +0400
+++ dbus-1.4.0-2/dbus/dbus-credentials.c	2011-06-08 23:41:59.457765026 +0400
@@ -52,6 +52,7 @@
   char *windows_sid;
   void *adt_audit_data;
   dbus_int32_t adt_audit_data_size;
+  dbus_int32_t extra;
 };
 
 /** @} */
@@ -81,6 +82,7 @@
   creds->windows_sid = NULL;
   creds->adt_audit_data = NULL;
   creds->adt_audit_data_size = 0;
+  creds->extra = 0;
 
   return creds;
 }
@@ -238,6 +240,8 @@
       return credentials->windows_sid != NULL;
     case DBUS_CREDENTIAL_ADT_AUDIT_DATA_ID:
       return credentials->adt_audit_data != NULL;
+    case DBUS_CREDENTIAL_EXTRA:
+      return credentials->extra != 0;
     }
 
   _dbus_assert_not_reached ("Unknown credential enum value");
@@ -389,6 +393,9 @@
                                       other_credentials) &&
     _dbus_credentials_add_credential (credentials,
                                       DBUS_CREDENTIAL_WINDOWS_SID,
+                                      other_credentials) &&
+    _dbus_credentials_add_credential (credentials,
+                                      DBUS_CREDENTIAL_EXTRA,
                                       other_credentials);
 }
 
@@ -433,6 +440,11 @@
       if (!_dbus_credentials_add_adt_audit_data (credentials, other_credentials->adt_audit_data, other_credentials->adt_audit_data_size))
         return FALSE;
     }
+  else if (which == DBUS_CREDENTIAL_EXTRA)
+    {
+      if (!_dbus_credentials_add_extra (credentials, other_credentials->extra))
+        return FALSE;
+    }
 
   return TRUE;
 }
@@ -452,6 +464,7 @@
   dbus_free (credentials->adt_audit_data);
   credentials->adt_audit_data = NULL;
   credentials->adt_audit_data_size = 0;
+  credentials->extra = 0;
 }
 
 /**
@@ -545,6 +558,23 @@
   return FALSE;
 }
 
+dbus_int32_t _dbus_credentials_get_extra  (DBusCredentials    *credentials)
+{
+	if (! credentials) {
+		return 0;
+	}
+	return credentials->extra;
+}
+
+dbus_bool_t _dbus_credentials_add_extra  (DBusCredentials    *credentials, dbus_int32_t extra)
+{
+	if (! credentials) {
+		return FALSE;
+	}
+	credentials->extra = extra;
+	return TRUE;
+}
+
 /** @} */
 
 /* tests in dbus-credentials-util.c */
Index: dbus-1.4.0-2/dbus/dbus-credentials.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-credentials.h	2011-06-08 23:41:49.213856923 +0400
+++ dbus-1.4.0-2/dbus/dbus-credentials.h	2011-06-08 23:41:59.458569933 +0400
@@ -34,7 +34,8 @@
   DBUS_CREDENTIAL_UNIX_PROCESS_ID,
   DBUS_CREDENTIAL_UNIX_USER_ID,
   DBUS_CREDENTIAL_ADT_AUDIT_DATA_ID,
-  DBUS_CREDENTIAL_WINDOWS_SID
+  DBUS_CREDENTIAL_WINDOWS_SID,
+  DBUS_CREDENTIAL_EXTRA
 } DBusCredentialType;
 
 DBusCredentials* _dbus_credentials_new_from_current_process (void);
@@ -73,6 +74,8 @@
                                                              DBusCredentials    *other_credentials);
 dbus_bool_t      _dbus_credentials_to_string_append         (DBusCredentials    *credentials,
                                                              DBusString         *string);
+dbus_bool_t     _dbus_credentials_add_extra  (DBusCredentials    *credentials, dbus_int32_t extra);
+dbus_int32_t    _dbus_credentials_get_extra  (DBusCredentials    *credentials);
 
 DBUS_END_DECLS
 
Index: dbus-1.4.0-2/dbus/dbus-pending-call.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-pending-call.c	2011-06-08 23:41:49.287269779 +0400
+++ dbus-1.4.0-2/dbus/dbus-pending-call.c	2011-06-08 23:41:59.459581881 +0400
@@ -29,6 +29,7 @@
 #include "dbus-list.h"
 #include "dbus-threads.h"
 #include "dbus-test.h"
+#include "dbus-connection.h"
 
 /**
  * @defgroup DBusPendingCallInternals DBusPendingCall implementation details
@@ -806,6 +807,11 @@
   return res;
 }
 
+int _dbus_pending_get_error (DBusPendingCall *pending)
+{
+	return (pending)? _dbus_connection_get_error (pending->connection) : 0;
+}
+
 /** @} */
 
 #ifdef DBUS_BUILD_TESTS
Index: dbus-1.4.0-2/dbus/dbus-pending-call.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-pending-call.h	2011-06-08 23:41:49.367676285 +0400
+++ dbus-1.4.0-2/dbus/dbus-pending-call.h	2011-06-08 23:41:59.460273220 +0400
@@ -69,6 +69,8 @@
 void*       dbus_pending_call_get_data           (DBusPendingCall  *pending,
                                                   dbus_int32_t      slot);
 
+int _dbus_pending_get_error (DBusPendingCall *pending);
+                                                
 /** @} */
 
 DBUS_END_DECLS
Index: dbus-1.4.0-2/dbus/dbus-protocol.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-protocol.h	2011-06-08 23:41:49.446784247 +0400
+++ dbus-1.4.0-2/dbus/dbus-protocol.h	2011-06-08 23:41:59.461151414 +0400
@@ -452,6 +452,18 @@
 
 /** @} */
 
+#define NEXENTA_ERROR_PREFIX "NMS error: "
+#define NEXENTA_ERROR_MAX_LENGTH 50
+#define DBUS_ERROR_NEXENTA_AUTH "org.freedesktop.DBus.Error.Nexenta"
+
+enum NEXENTA_DBUS_ERROR
+{
+	NEXENTA_AUTH_OK,
+	NEXENTA_AUTH_NO_KEY,
+	NEXENTA_AUTH_INVALID_KEY,
+	NEXENTA_AUTH_NO_KEY_LIST
+};
+
 #ifdef __cplusplus
 #if 0
 { /* avoids confusing emacs indentation */
Index: dbus-1.4.0-2/dbus/dbus-sysdeps-unix.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-sysdeps-unix.c	2011-06-08 23:41:49.523072423 +0400
+++ dbus-1.4.0-2/dbus/dbus-sysdeps-unix.c	2011-06-08 23:41:59.465418353 +0400
@@ -1762,6 +1762,8 @@
         }
     }
 
+  _dbus_credentials_add_extra(credentials, client_fd);
+
   return TRUE;
 }
 
Index: dbus-1.4.0-2/dbus/dbus-transport.c
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-transport.c	2011-06-08 23:41:49.597012190 +0400
+++ dbus-1.4.0-2/dbus/dbus-transport.c	2011-06-08 23:41:59.466991850 +0400
@@ -1489,3 +1489,8 @@
 }
 
 /** @} */
+
+int _dbus_transport_get_error (DBusTransport *transport)
+{
+	return (transport)? _dbus_auth_get_error (transport->auth) : 0;
+}
\ No newline at end of file
Index: dbus-1.4.0-2/dbus/dbus-transport.h
===================================================================
--- dbus-1.4.0-2.orig/dbus/dbus-transport.h	2011-06-08 23:41:49.690966488 +0400
+++ dbus-1.4.0-2/dbus/dbus-transport.h	2011-06-08 23:41:59.467721912 +0400
@@ -96,7 +96,7 @@
                                                            const char                **mechanisms);
 void               _dbus_transport_set_allow_anonymous    (DBusTransport              *transport,
                                                            dbus_bool_t                 value);
-
+int _dbus_transport_get_error (DBusTransport *transport);
 
 DBUS_END_DECLS
 
