diff -Nur -x '*.orig' -x '*~' dbus-1.2.24/dbus/dbus-auth.c dbus-1.2.24.new/dbus/dbus-auth.c
--- dbus-1.2.24/dbus/dbus-auth.c	2010-11-18 22:45:42.126812772 +0300
+++ dbus-1.2.24.new/dbus/dbus-auth.c	2010-11-18 22:46:22.093668961 +0300
@@ -30,10 +30,12 @@
 #include "dbus-credentials.h"
 #include <stdio.h>
 #include <stdlib.h>
+#include <errno.h>
 #ifdef _WIN32
 #include <windows.h>
 #else
 #include <sys/stat.h>
+#include <fcntl.h>
 #endif
 #ifdef sun
 #include <sys/types.h>
@@ -1609,6 +1611,239 @@
 }

 /*
+ * NEXENTA_SECRET_KEYS mechanism
+ */
+
+#define NEXENTA_SECRET_KEYS_MECH "NEXENTA_SECRET_KEYS"
+#define NEXENTA_SECRET_KEYS_FILE "/var/lib/nza/.dbus-keys"
+
+static char **
+split_string (const DBusString *string)
+{
+  int i, j, k, count, end;
+  char **array;
+
+  end = _dbus_string_get_length (string);
+
+  i = 0;
+  _dbus_string_skip_blank (string, i, &i);
+  for (count = 0; i < end; count++)
+    {
+      _dbus_string_find_blank (string, i, &i);
+      _dbus_string_skip_blank (string, i, &i);
+    }
+
+  array = dbus_new0 (char *, count + 1);
+  if (array == NULL) {
+    return NULL;
+  }
+
+  i = 0;
+  _dbus_string_skip_blank (string, i, &i);
+  for (k = 0; k < count; k++)
+    {
+      _dbus_string_find_blank (string, i, &j);
+
+      array[k] = dbus_malloc (j - i + 1);
+      if (array[k] == NULL)
+        {
+          dbus_free_string_array (array);
+          return NULL;
+        }
+      memcpy (array[k],
+              _dbus_string_get_const_data_len (string, i, j - i), j - i);
+      array[k][j - i] = '\0';
+
+      _dbus_string_skip_blank (string, j, &i);
+    }
+  array[k] = NULL;
+
+  return array;
+}
+
+static dbus_bool_t
+nexenta_secret_keys_read_from_file (DBusString *secret_keys)
+{
+  int file = -1;
+  struct stat file_stat;
+  char *file_data = NULL;
+
+  _dbus_assert (secret_keys != NULL);
+
+  if ((file = open (NEXENTA_SECRET_KEYS_FILE, O_RDONLY)) == -1) {
+    if (errno == ENOENT) {
+      return TRUE; // it's ok that file doesn't exist
+    }
+    _dbus_verbose ("[%s] open(\"%s\", O_RDONLY) failed: %s\n", NEXENTA_SECRET_KEYS_MECH, NEXENTA_SECRET_KEYS_FILE, strerror(errno));
+    return FALSE;
+  }
+
+  if (fstat (file, &file_stat) != 0) {
+    _dbus_verbose ("[%s] fstat(%d) failed: %s\n", NEXENTA_SECRET_KEYS_MECH, file, strerror(errno));
+    goto failed;
+  }
+
+  file_data = dbus_malloc0 (file_stat.st_size + 1);
+  if (file_data == NULL) {
+    _dbus_verbose ("[%s] dbus_malloc0(%lu)\n", NEXENTA_SECRET_KEYS_MECH, file_stat.st_size + 1);
+    goto failed;
+  }
+
+  if (read (file, file_data, file_stat.st_size) != file_stat.st_size) {
+    _dbus_verbose ("[%s] read(%d, *, %lu) failed: %s\n", NEXENTA_SECRET_KEYS_MECH, file, file_stat.st_size, strerror(errno));
+    goto failed;
+  }
+
+  if (!_dbus_string_append_len (secret_keys, file_data, file_stat.st_size)) {
+    _dbus_verbose ("[%s] _dbus_string_append_len(*, *, %lu) failed\n", NEXENTA_SECRET_KEYS_MECH, file_stat.st_size);
+    goto failed;
+  }
+
+  _dbus_verbose ("[%s] nexenta_secret_keys_read_from_file: \"%s\"\n", NEXENTA_SECRET_KEYS_MECH, file_data);
+
+  dbus_free (file_data);
+  close (file);
+  return TRUE;
+
+failed:
+  if (file_data != NULL) {
+    dbus_free (file_data);
+  }
+  close (file);
+  return FALSE;
+}
+
+static dbus_bool_t
+handle_server_data_nexenta_secret_keys_mech (DBusAuth         *auth,
+                                             const DBusString *data)
+{
+  DBusString secret_keys;
+  dbus_bool_t found = FALSE;
+  int i, k;
+  char **server_keys = NULL;
+  char **client_keys = NULL;
+
+  _dbus_assert (auth != NULL);
+  _dbus_assert (data != NULL);
+
+  if (_dbus_string_get_length (data) == 0) {
+    return send_rejected (auth);
+  }
+
+  _dbus_verbose ("[%s] the following secret keys are recv: \"%s\"\n", NEXENTA_SECRET_KEYS_MECH, _dbus_string_get_const_data (data));
+
+  if (!_dbus_string_init (&secret_keys)) {
+    _dbus_verbose("[%s] cannot allocate memory for server secret keys\n", NEXENTA_SECRET_KEYS_MECH);
+    return FALSE;
+  }
+
+  if (!nexenta_secret_keys_read_from_file (&secret_keys)) {
+    _dbus_verbose("[%s] cannot read server secret keys\n", NEXENTA_SECRET_KEYS_MECH);
+    goto failed;
+  }
+
+  client_keys = split_string(data);
+  if (client_keys == NULL) {
+    _dbus_verbose("[%s] cannot split client keys\n", NEXENTA_SECRET_KEYS_MECH);
+    goto failed;
+  }
+
+  server_keys = split_string(&secret_keys);
+  if (server_keys == NULL) {
+    _dbus_verbose("[%s] cannot split server keys\n", NEXENTA_SECRET_KEYS_MECH);
+    goto failed;
+  }
+
+  for (i = 0; !found && client_keys[i] != NULL; i++) {
+    for (k = 0; !found && server_keys[k] != NULL; k++) {
+      _dbus_verbose ("[%s]: compare keys client(\"%s\") vs server(\"%s\")\n", NEXENTA_SECRET_KEYS_MECH, client_keys[i], server_keys[k]);
+      if (strcmp (client_keys[i], server_keys[k]) == 0) {
+        found = TRUE;
+      }
+    }
+  }
+
+  dbus_free_string_array (client_keys);
+  dbus_free_string_array (server_keys);
+  _dbus_string_free (&secret_keys);
+
+  if (found) {
+    _dbus_verbose("[%s] client authorized by key \"%s\"\n", NEXENTA_SECRET_KEYS_MECH, client_keys[i - 1]);
+
+    if (!_dbus_credentials_add_unix_uid (auth->authorized_identity, 0)) {
+      return FALSE;
+    }
+
+    return send_ok (auth);
+  }
+
+  return send_rejected (auth);
+
+failed:
+  if (client_keys != NULL) {
+    dbus_free_string_array (client_keys);
+  }
+  if (server_keys != NULL) {
+    dbus_free_string_array (server_keys);
+  }
+  _dbus_string_free (&secret_keys);
+  return FALSE;
+}
+
+static void
+handle_server_shutdown_nexenta_secret_keys_mech (DBusAuth *auth)
+{
+  _dbus_assert (auth != NULL);
+}
+
+static dbus_bool_t
+handle_client_initial_response_nexenta_secret_keys_mech (DBusAuth   *auth,
+                                                         DBusString *resp)
+{
+  DBusString secret_keys;
+
+  _dbus_assert (auth != NULL);
+  _dbus_assert (resp != NULL);
+
+  if (!_dbus_string_init (&secret_keys)) {
+    return FALSE;
+  }
+
+  if (!nexenta_secret_keys_read_from_file (&secret_keys)) {
+    goto failed;
+  }
+
+  if (!_dbus_string_hex_encode (&secret_keys, 0, resp, _dbus_string_get_length (resp))) {
+    goto failed;
+  }
+
+  _dbus_verbose ("[%s] the following secret keys are send: \"%s\"\n", NEXENTA_SECRET_KEYS_MECH, _dbus_string_get_const_data(&secret_keys));
+
+  _dbus_string_free (&secret_keys);
+  return TRUE;
+
+failed:
+  _dbus_string_free (&secret_keys);
+  return FALSE;
+}
+
+static dbus_bool_t
+handle_client_data_nexenta_secret_keys_mech (DBusAuth         *auth,
+                                             const DBusString *data)
+{
+  _dbus_assert (auth != NULL);
+  _dbus_assert (data != NULL);
+
+  return TRUE;
+}
+
+static void
+handle_client_shutdown_nexenta_secret_keys_mech (DBusAuth *auth)
+{
+
+}
+
+/*
  * ANONYMOUS mechanism
  */

@@ -1733,6 +1968,14 @@
  */
 static const DBusAuthMechanismHandler
 all_mechanisms[] = {
+  { "NEXENTA_SECRET_KEYS",
+    handle_server_data_nexenta_secret_keys_mech, // process client keys and compare with ours
+    NULL, NULL,
+    handle_server_shutdown_nexenta_secret_keys_mech, // nothing to do, but function required
+    handle_client_initial_response_nexenta_secret_keys_mech, // send client keys to server in AUTH request
+    handle_client_data_nexenta_secret_keys_mech, // nothing to do, but function required
+    NULL, NULL,
+    handle_client_shutdown_nexenta_secret_keys_mech }, // nothing to do, but function required
   { "NEXENTA",
     handle_server_data_nexenta_mech,
     NULL, NULL,
