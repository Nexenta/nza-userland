#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2013 Nexenta Systems, Inc. All rights reserved.
#
# Version 2.0

#set -x

PATH=/usr/gnu/bin:/usr/bin:/usr/sbin
export PATH

CONSOLE=0
REPODIR=""
TARGETBE=""
TARGETMOUNT=""

TMPDIR="/tmp/apt.$$"
LOG="/root/upgrade.log.$$"

BEADM="/usr/sbin/beadm"
MKDIR="/usr/bin/mkdir"
BOOTADM="/usr/sbin/bootadm"
ECHO="/usr/bin/echo"
CAT="/usr/bin/cat"
CP="/usr/bin/cp"
MV="/usr/bin/mv"
APTGET="/usr/bin/apt-get"
TOUCH="/usr/bin/touch"

function usage()
{
	${ECHO} "Usage:"
	${ECHO} "	$0 -t <BE name> -d <path to local APT>"
	${ECHO}
	${ECHO} "Example:"
	${ECHO} "	$0 -t rootfs-nmu-`date +%Y-%m-%d` -d \$PWD/packages/i386/apt"
	exit 0
}

logcmd() {
	if [[ -z "$CONSOLE" ]]; then
		${ECHO} CMD: "$@" >> $LOG
		"$@" >> $LOG 2>&1
	else
		${ECHO} CMD: "$@" | tee $LOG
		"$@" | tee $LOG 2>&1
	fi
}

logmsg() {
	${ECHO} "$@" >> $LOG
	${ECHO} "$@"
}

logerr() {
	logmsg $@
	fullabort
}

fullabort() {
	printf "\nAborting. See $LOG for details\n"
	exit 1
}


###### main ######

while getopts :d:t:R:v i ; do
	case $i in
	d)
		REPODIR="$OPTARG"
		;;
	t)
		TARGETBE="$OPTARG"
		;;
	R)
		TARGETMOUNT="$OPTARG"
		;;
	v)
		CONCOLE=1
		;;
	*)
		usage
	esac
done
shift `expr $OPTIND - 1`

[ -n "$1" ] && usage
[ -z "$TARGETBE" -a -z "$TARGETMOUNT" ] && usage
[ -z "$REPODIR" ] && usage

if ! (echo $REPODIR | grep '^\/'); then
	logmsg "Please use full path for -d option"
	fullabort
fi

if [ ! -f "$REPODIR/conf/distributions" ]; then
	logmsg "Local APT unavailable, please check your path to repo dir: '$REPODIR'"
	fullabort
fi

${ECHO} "$(basename $0) started at `date`" > $LOG

if [ -z "$TARGETMOUNT" ]; then
	logcmd ${MKDIR} -p "$TMPDIR"
	${BEADM} create "$TARGETBE" || fullabort
	logcmd ${BEADM} mount "$TARGETBE" "$TMPDIR"
else
	TMPDIR="$TARGETMOUNT"
fi

if [ ! -z "$REPODIR" -a -z "$TARGETMOUNT" ]; then
	logcmd ${CP} /etc/apt/sources.list /etc/apt/sources.list.saved
	${ECHO} "deb file://$REPODIR nza-kernel main" > /etc/apt/sources.list
	logcmd ${CP} -f /etc/apt/sources.list $TMPDIR/etc/apt/sources.list
fi

export APT_CLONE_ENV=1

logcmd ${APTGET} -R $TMPDIR update

PKGNUM=$(apt-get -s upgrade | awk '/[0-9]+ upgraded,/{print $1 }')

if [ "$PKGNUM" -eq 0 ]; then
	logmsg "Nothing to upgrade. Do you want to bump DEB_VERSION?"
	logmsg "Cleaning up"
	${ECHO} yes | ${BEADM} destroy -f "$TARGETBE"
fi

logcmd ${APTGET} -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -R $TMPDIR install -y --force-yes sunwcsd
logcmd ${APTGET} -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -R $TMPDIR install -y --force-yes sunwcs
logcmd ${APTGET} -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -R $TMPDIR install -y --force-yes system-kernel
logcmd ${APTGET} -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -R $TMPDIR dist-upgrade -y --force-yes

if [ -z "$TARGETMOUNT" ]; then
	logcmd $BOOTADM update-archive -R $TMPDIR
	logcmd ${TOUCH} $TMPDIR/reconfigure
fi

if [ ! -z "$REPODIR" -a -z "$TARGETMOUNT" ]; then
	logcmd ${CP} /etc/apt/sources.list.saved /etc/apt/sources.list
	logcmd ${CP} -f /etc/apt/sources.list $TMPDIR/etc/apt/sources.list
fi

if [ -z "$TARGETMOUNT" ]; then
	logcmd ${BEADM} umount "$TARGETBE"
	logcmd ${BEADM} activate "$TARGETBE"
fi

${CAT}<<-EOF

                          * * *
                      SYSTEM NOTICE

     The upgrade has completed successfully:
       - created new BE '$TARGETBE'
       - created new GRUB menu entry
       - upgrade log saved to '$LOG'
       - the system is ready to reboot into the new BE

   +------------------------------------------------------------------+
   |                                                                  |
   |  At this point you have two options:                             |
   |                                                                  |
   |   1. You can reboot now, make sure that system is healthy.       |
   |                                                                  |
   |   2. Or, you can simply continue using the system as is and      |
   |      reboot to new BE later.                                    |
   |                                                                  |
   +------------------------------------------------------------------+
EOF

${ECHO} "$(basename $0) finished at `date`" >> $LOG

exit 0
