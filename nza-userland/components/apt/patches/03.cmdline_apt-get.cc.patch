--- apt-0.8.15.10+1.orig/cmdline/apt-get.cc	2012-01-11 05:42:59.000000000 -0800
+++ apt-0.8.15.10+1/cmdline/apt-get.cc	2012-10-02 03:24:58.149226839 -0700
@@ -71,6 +71,8 @@
 #include <errno.h>
 #include <regex.h>
 #include <sys/wait.h>
+#include <pwd.h>
+#include <grp.h>
 #include <sstream>
 
 #define statfs statvfs64
@@ -3391,6 +3393,8 @@
       {0,"fix-policy","APT::Get::Fix-Policy-Broken",0},
       {'c',"config-file",0,CommandLine::ConfigFile},
       {'o',"option",0,CommandLine::ArbItem},
+      {'R',"root","APT::Get::Root",CommandLine::HasArg},
+      {'z',"zone","APT::Get::Zone-Install",0},
       {0,0,0,0}};
    CommandLine::Dispatch Cmds[] = {{"update",&DoUpdate},
                                    {"upgrade",&DoUpgrade},
@@ -3430,6 +3434,121 @@
       return 100;
    }
 
+   // define root
+   string DefRoot = _config->Find("APT::Get::Root");
+   if (DefRoot.empty() == false) {
+        string TempStr = _config->FindDir("Dir::Cache");
+        string NewSet = DefRoot + TempStr;
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+        _config->Set("Dir::Cache", NewSet.c_str());
+
+        TempStr = _config->FindDir("Dir::State::lists");
+        NewSet = DefRoot + TempStr;
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+        _config->Set("Dir::State::lists", NewSet.c_str());
+
+        TempStr = _config->FindDir("Dir::Etc");
+        NewSet = DefRoot + TempStr;
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+//        _config->Set("Dir::Etc", NewSet.c_str());
+
+        TempStr = _config->FindFile("Dir::Etc::sourcelist");
+        NewSet = DefRoot + TempStr;
+        if(!RealFileExists(NewSet)) {
+            FileFd FromFile, ToFile;
+            FromFile.Open(TempStr, FileFd::ReadOnly);
+            ToFile.Open(NewSet, FileFd::WriteAtomic);
+            if (CopyFile(FromFile, ToFile) == false)
+                _error->Error(_("Failed:copy %s %s"), TempStr.c_str(), NewSet.c_str());
+            ToFile.Close();
+            FromFile.Close();
+        }
+        _config->Set("Dir::State::sourcelist", NewSet.c_str());
+
+        TempStr = _config->FindFile("Dir::State::status");
+        NewSet = DefRoot + TempStr;
+        _config->Set("Dir::State::status", NewSet.c_str());
+
+        TempStr = _config->FindFile("Dir::State::extended_states");
+        NewSet = DefRoot + TempStr;
+        _config->Set("Dir::State::extended_states", NewSet.c_str());
+
+
+        NewSet = "-R=" + DefRoot;
+        _config->Set("Dpkg::Options::", NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/updates";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/info";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/alien";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/alternatives";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/parts";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+        NewSet = DefRoot + "/var/lib/dpkg/triggers";
+        if (CreateDirectory(DefRoot,NewSet) == false)
+            _error->Error(_("Failed:%s"), NewSet.c_str());
+
+       FileFd StateFile;
+       string state = _config->FindFile("Dir::State::extended_states");
+       // if it does not exist, create a empty one
+       if(!RealFileExists(state))
+       {
+          StateFile.Open(state, FileFd::WriteAtomic);
+          StateFile.Close();
+       }
+
+       state = _config->FindFile("Dir::State::status");
+       // if it does not exist, create a empty one
+       if(!RealFileExists(state))
+       {
+          StateFile.Open(state, FileFd::WriteAtomic);
+          StateFile.Close();
+       }
+
+       state = DefRoot + "/var/lib/dpkg/available";
+       // if it does not exist, create a empty one
+       if(!RealFileExists(state))
+       {
+          StateFile.Open(state, FileFd::WriteAtomic);
+          StateFile.Close();
+       }
+
+       struct passwd *pw;
+       struct group *gr;
+
+       NewSet = DefRoot + "/var";
+       pw = getpwnam("root");
+       gr = getgrnam("sys");
+       if (pw != NULL && gr != NULL)
+       chown(NewSet.c_str(), pw->pw_uid, gr->gr_gid);
+       chmod(NewSet.c_str(), 0755);
+
+       NewSet = DefRoot + "/etc";
+       if (pw != NULL && gr != NULL)
+       chown(NewSet.c_str(), pw->pw_uid, gr->gr_gid);
+       chmod(NewSet.c_str(), 0755);
+   }
+
+   // set ZONEINST=1 for zones
+   if (_config->FindB("APT::Get::Zone-Install", false) == true)
+        setenv("ZONEINST", "1", 1);
+
    // See if the help should be shown
    if (_config->FindB("help") == true ||
        _config->FindB("version") == true ||
