--- Net-DBus-0.33.6/examples/example-signal-receiver.pl	2008-02-21 03:26:44.000000000 +0300
+++ Net-DBus-0.33.6.new/examples/example-signal-receiver.pl	2012-12-07 13:36:48.768181547 +0400
@@ -17,12 +17,30 @@
 my $object  = $service->get_object("/org/designfu/TestService/object",
 				   "org.designfu.TestService");
 
-sub hello_signal_handler {
+my $sig1;
+my $sig2;
+my $sig1ref = \$sig1;
+my $sig2ref = \$sig2;
+
+sub hello_signal_handler1 {
     my $greeting = shift;
-    print "Received hello signal with greeting '$greeting'\n";
+    print ${$sig1ref} . " Received hello signal with greeting '$greeting'\n";
+
+    unless (${$sig2ref}) {
+	$object->disconnect_from_signal("HelloSignal", ${$sig1ref});
+    }
+}
+
+sub hello_signal_handler2 {
+    my $greeting = shift;
+    print ${$sig2ref} . " Received hello signal with greeting '$greeting'\n";
+
+    $object->disconnect_from_signal("HelloSignal", ${$sig2ref});
+    ${$sig2ref} = undef;
 }
 
-$object->connect_to_signal("HelloSignal", \&hello_signal_handler);
+$sig1 = $object->connect_to_signal("HelloSignal", \&hello_signal_handler1);
+$sig2 = $object->connect_to_signal("HelloSignal", \&hello_signal_handler2);
 
 my $reactor = Net::DBus::Reactor->main();
 
--- Net-DBus-0.33.6/lib/Net/DBus/RemoteObject.pm	2008-02-21 03:26:44.000000000 +0300
+++ Net-DBus-0.33.6.new/lib/Net/DBus/RemoteObject.pm	2012-12-07 13:42:01.854131001 +0400
@@ -85,6 +85,8 @@
     $self->{object_path}  = shift;
     $self->{interface} = @_ ? shift : undef;
     $self->{introspected} = 0;
+    $self->{signal_handlers} = {};
+    $self->{signal_id} = 0;
 
     bless $self, $class;
 
@@ -198,14 +200,15 @@
     return $self->{introspector};
 }
 
-
-=item $object->connect_to_signal($name, $coderef);
+=item my $sigid = $object->connect_to_signal($name, $coderef);
 
 Connects a callback to a signal emitted by the object. The C<$name>
 parameter is the name of the signal within the object, and C<$coderef>
 is a reference to an anonymous subroutine. When the signal C<$name>
 is emitted by the remote object, the subroutine C<$coderef> will be
-invoked, and passed the parameters from the signal.
+invoked, and passed the parameters from the signal. A unique C<$sigid>
+will be returned, which can be later passed to C<disconnect_from_signal>
+to remove the handler.
 
 =cut
 
@@ -240,23 +243,90 @@
 	warn "signal $name in interface $interface on " . $self->get_object_path . " is deprecated";
     }
 
-    $self->get_service->
-	get_bus()->
-	_add_signal_receiver(sub {
-	    my $signal = shift;
-	    my $ins = $self->_introspector;
-	    my @params;
-	    if ($ins) {
-		@params = $ins->decode($signal, "signals", $signal->get_member, "params");
-	    } else {
-		@params = $signal->get_args_list;
-	    }
-	    &$code(@params);
-	},
-			     $name,
-			     $interface,
-			     $self->{service}->get_owner_name(),
-			     $self->{object_path});
+    my $cb = sub {
+	my $signal = shift;
+	my $ins = $self->_introspector;
+	my @params;
+	if ($ins) {
+	    @params = $ins->decode($signal, "signals", $signal->get_member, "params");
+	} else {
+        @params = $signal->get_args_list;
+	}
+
+	foreach my $handler (@{$self->{signal_handlers}->{$signal->get_member}->{handlers}}) {
+	    my ($id, $cb) = @{$handler};
+	    &$cb(@params);
+	}
+    };
+    if (!exists $self->{signal_handlers}->{$name}) {
+	$self->{signal_handlers}->{$name} = { cb => $cb, handlers => [] };
+	$self->get_service->
+	    get_bus()->
+	    _add_signal_receiver($cb,
+				 $name,
+				 $interface,
+				 $self->{service}->get_service_name(),
+				 $self->{object_path});
+    }
+    my $sigid = ++$self->{signal_id};
+    push @{$self->{signal_handlers}->{$name}->{handlers}}, [$sigid, $code];
+    return $sigid;
+}
+
+
+=item $object->disconnect_from_signal($name, $sigid);
+
+Disconnects from a signal emitted by the object. The C<$name>
+parameter is the name of the signal within the object. The
+C<$sigid> must be the unique signal handler ID returned by
+a previous C<connect_to_signal> method call.
+
+=cut
+
+sub disconnect_from_signal {
+    my $self = shift;
+    my $name = shift;
+    my $sigid = shift;
+
+    my $ins = $self->_introspector;
+    my $interface = $self->{interface};
+    if (!$interface) {
+	if (!$ins) {
+	    die "no introspection data available for '" . $self->get_object_path .
+		"', and object is not cast to any interface";
+	}
+	my @interfaces = $ins->has_signal($name);
+
+	if ($#interfaces == -1) {
+	    die "no signal with name '$name' is exported in object '" .
+		$self->get_object_path . "'\n";
+	} elsif ($#interfaces > 0) {
+	    warn "signal with name '$name' is exported " .
+		"in multiple interfaces of '" . $self->get_object_path . "'" .
+		"connecting to first interface only\n";
+	}
+	$interface = $interfaces[0];
+    }
+
+    my @handlers;
+    foreach my $handler (@{$self->{signal_handlers}->{$name}->{handlers}}) {
+	my ($thissigid, $cb) = @{$handler};
+	if ($thissigid != $sigid) {
+	    push @handlers, $handler;
+	}
+    }
+    if (@handlers) {
+	$self->{signal_handlers}->{$name}->{handlers} = \@handlers;
+    } else {
+	$self->get_service->
+	    get_bus()->
+	    _remove_signal_receiver($self->{signal_handlers}->{$name}->{cb},
+				    $name,
+				    $interface,
+				    $self->{service}->get_service_name(),
+				    $self->{object_path});
+	delete $self->{signal_handlers}->{$name};
+    }
 }
